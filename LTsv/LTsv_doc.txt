「LTsv_doc」は「LTsv10kanedit(tsvtool10)」を用いたドキュメント生成ツールです。
このモジュール解説文書「LTsv_doc.txt」も「LTsv/LTsv_doc.py」を使って「LTsv/LTsv_doc.tsv」から錬成されてます。
version(branch) 20161023U011852
modify 20161110R074016


目次

 ０-0． ライセンス及びソフトの使用の補足ガイドライン
 ０-1． インストール(ダウンロード・アンインストール)＆セットアップ
 ０-2． その他現在わかっている不具合や今後の課題
 １-0a．「L:Tsv」と「LTSV」の違い
 １-0b．「L:Tsv」ファイルの構造
 １-1a．「LTsv_printf.py」の関数一覧
 １-1b．「LTsv_kanare()」のLTsv_recaseの変換辞書一覧
 １-2． 「LTsv_file.py」の関数一覧
 １-3a．「LTsv_time.py」の関数一覧
 １-3b．日時フォーマットの概要
 １-4a．「LTsv_calc.py」の関数一覧
 １-4b．電卓フォーマットの概要
 １-5a．「LTsv_joy.py」の関数一覧
 １-5a．「LTsv_kbd.tsv」のタグ解説
 １-6a．「LTsv_joy.py」の関数一覧
 １-6b．「LTsv_kbd.tsv」のタグ解説

０-0． ライセンス及びソフトの使用の補足ガイドライン

 ※「MIT License」準拠。
   MIT License - Choose a License
   http://choosealicense.com/licenses/mit/

 ※「MIT License」の日本語訳。
   MIT License - Choose a License
   https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license

 ※日本語による補足。
   ・複製物にも「MIT License」の「LICENSE」ファイルを添付る事(著作権表示を誤魔化さない事)。
   ・いかなる場合においても作者または著作権所有者は一切責任を負わない事。
   ・ソースコードの閲覧やコピーに制限を設けない事。

 ※「kanedit」固有の問題への言及。
   ・単漢字辞書「LTsv/kanchar.tsv」汎用辞書「kanword.tsv」などで翻訳ミスもしくは言い回しが古くなるなど人間語不具合に対してもメンテナンス義務はありません。


０-1． インストール(ダウンロード・アンインストール)＆セットアップ

 ダウンロードは「https://github.com/ooblog/LTsv10kanedit」にある「Clone or download」ボタンを押すと出る「Download ZIP」メニューをクリック。
 インストールは任意(なるだけユーザーディレクトリ内)のフォルダに「LTsv10kanedit-master.zip」を解凍するだけです。
 「kan5x5comic.ttf」を用意する場合は「kan5x5.svg」から「FontForge」で変換するか「kan5x5comic.woff」を「WOFFコンバーター」変換(「kanfont.txt」を参考)。
 Wineを使う予定がある場合は「wine_sh」フォルダ内の[*.sh]のWineパスを適宜修正。
 ※Pythonは別途インストールされているものとします(Pythonの導入分からない人は「<？index3-0>」も参考)。


０-2． その他現在わかっている不具合や今後の課題

 Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)で開発しています。Windows,cygwin,darwinなどでの動作は確認しておりません。
 フォント「kan5x5comic」は半角と全角の幅の比率が約5:3(1024:624)なのでアスキーアートで問題になる場合があります。グリフ不足で表示できない文字などあります。
 「kanpickle.bin」にグリフ座標データが蓄積されるまでは動作が重いです。「kanmap.py」で解決できます。
 「kan5x5.svg」を「kan5x5comic.ttf」に変換する手段として「FontForge」が必要。直接フォント生成したいけど優先順位が低い。
 現在人名に使える漢字の異体字を漢字配列「kanmap.tsv」から単漢字辞書「kanchar.tsv」に移管作業中。なので漢字鍵盤の漢字配列が大幅に変更するかも。
 Windowsのエディタで[kanchar.tsv]を編集すると3バイト以上の文字が「?」に置き換えられる恐れがある。カレー()がよく巻き添え
 マウスボタンの取得は保留。ホイールの取得は放置。tkk方面は手を出さない予定(コンボボックスなどはGTKのみサポート)。
 GTKのコールバックからデータを受けとる方法が不明のため、GUIイベント経由のPCキーボード取得やファイルダイアログからのキャンセル取得などが不明。
 ドキュメント全体でグリフとフォントの言葉の使い分けルールが曖昧な気がする。


１-0a．「L:Tsv」と「LTSV」の違い

 データ間の区切りをタブ(\t)、「label:data」の様にコロン(:)でデータにラベルを付けたのが「LTSV」です。
 素のLTSVファイル自体は単なるログのフォーマットです。

   Labeled Tab-separated Values (LTSV)
   http://ltsv.org/

   LTSV FAQ - LTSV って何? どういうところが良いの?
   http://d.hatena.ne.jp/naoya/20130209/1360381374

 「L:Tsv」は「*.tsv」「*.ltsv」ファイルの事を差す場合もありますがLTSVパーサ類を含めた「tsvtool」も含めて「L:Tsv」と呼ぶ場合があります。
 複数のLTSVを１つのファイルで保存できるようタグで区切ったり、日時処理や分数電卓やGTK＆Tkinterなどを加えたり、Python2,3のprint関数バージョン違いを吸収させたりと、
 LTSVパーサに雑多な拡張を重ねていった結果、漢直エディタ環境と化したモジュール群が今の「L:Tsv」です。


１-0b．「L:Tsv」ファイルの構造

  データ間の区切りはタブ(\t)です。一般的なCSVやLTSV等と事なり、複数のタブがあっても1つのタブとみなします(文字列長0のデータを扱う場合はラベル推奨)。
 先頭データの事をfirst、先頭以降のデータの事をrestと呼びます。例えばLispでも、car関数の代わりにfirst関数、cdr関数の代わりにrest関数が使えたはず。
 firstは縦軸ラベルとして使う場合があります。restでは「label:data」の様なラベルとデータをコロン(:)で区切る形の軸ラベルが付けられます。簡単に言うとrestでLTSVが使えます。
 LTSVを「[tag|」と「|tag]」の様にタグで区切る事で１つのファイルに複数のCSVやLTSVやTXTといったページを格納できます。
 拡張子は「.ltsv」か「.tsv」。メモリ上など拡張子で区別できない場合でもメタタグで判定。メタタグが存在しない場合ファイル全体を１つのページとみなす。

 メタタグ「L:Tsv」のfirst縦軸ラベルの解説。
  [L:Tsv|                    「L:Tsv」ファイルの宣言です。マジックナンバー代わりなのでなるだけファイルの先頭に。
   code                       文字コードの宣言で「UTF-8」。Windowsだろうが半角は3バイトで保存するので注意。
   enter                      改行の宣言で「LF」。Windowsだろうが改行は1バイトで保存するので注意。
   tab                        タブインデントの宣言で半角スペース「4」。フォント「kan5x5comic」の半角と全角の幅の比率は約5:3(1024:624)なので注意。
   program                    「L:Tsv」ファイルをどの様に扱うかを表す規格名(プログラム名)を記述。例えば「LTsv_doc」では「LTsv_doc.py」。
   1st                        「L:Tsv」自体を何かのスクリプトとして実行する場合に最初に実行するページ指定を想定。例えば「LTsv_doc」では「LTsv_doc_tsv」など。
   LTsvver                    構文解析パーサのバージョン。「LTsv_file.py」の「LTsv_file_ver()」。
   modify                     「L:Tsv」ファイルの更新日時。「LTsv_time.py」の「LTsv_getdaytimestr(overhour=24,diffminute=0)」を想定。「LTsv_file.py」で「LTsv_savefile()」上書き時に更新。
  |L:Tsv]                    メタタグ「L:Tsv」を閉じます。タグで区切る事で１つのファイルに複数のCSVやLTSVやTXTといったページを格納できます。

「L:Tsv」のメタタグは「LTsv_newfile()」関数でも作成可能。「１-2． 「LTsv_file.py」の関数一覧」も参考。


１-1a．「LTsv_printf.py」の関数一覧

 Pythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。
 ・Wine上DOSのエラー要因だったCP932(いわゆるシフトJIS、BMP基本多言語面0xffff範囲内)などに変換させる事で漢字をある程度(BMP基本多言語面0xffff範囲内)扱えるようになります。
 ・変換できない文字は数値文字参照に変換されます。
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。

 【LTsv_libc_printf(LTsv_text,LTsv_log=None)】
  LTsv_textの文字列をターミナル(stdout)に表示する。LTsv_logに変数名を指定する事で変数にも出力追記できる。
  LTsv_textに渡す文字列は「"{0}".format(data)」みたいに事前に「str.format()」などで加工する。
  扱えない文字は数値文字参照(「咖喱」が「&#21654;&#21937;」)に変換される。
  「ctypes.cdll.msvcrt(MS-DOS)」は1024バイト(文字数ではなくバイト)を超える文字列を扱えない様子。

 【LTsv_libc_printcat(LTsv_text)】
  上記LTsv_libc_printfからログ保存やL:Tsvタグエスケープ処理などを取り除いたもの。

 【LTsv_libc_printf_type(LTsv_text,LTsv_log=None)】
  Python2では「&lt;type 'str'&gt;」Python3だと「&lt;class 'bytes'&gt;」のようにprintfに渡すバイナリ文字列の変数の型を表示。

 【LTsv_utf2xml(LTsv_text)】
  LTsv_textの文字列を数値文字参照に変換。

 【LTsv_xml2utf(LTsv_text)】
  LTsv_textの文字参照(数値文字参照含む)を文字列に変換。

 【LTsv_kanare(LTsv_before,LTsv_recase)】
  全角半角大文字小文字ひらがなカタカナの変換を行います。LTsv_beforeに変換する文字列、LTsv_recaseで変換辞書指定。
  変換辞書LTsv_recaseのパラメータは「１-1b．「LTsv_kanare()」のLTsv_recaseの変換辞書一覧」を参考。

 【LTsv_utf2ink(LTsv_text)】
  UTF-8をkantrayの「UTF-8点字」に変換(バイナリの点字表記)。
  点字フォントが表示できる環境にないと動作確認は困難なので注意。

 【LTsv_ink2utf(LTsv_text)】
  上記「UTF-8点字」をUTF-8に戻す。
   データ破損を補完する機能はないので注意。

 【LTsv_subprocess(LTsv_subprocess_input="",LTsv_subprocess_shell=False)】
  ターミナルにコマンドを送る。実行結果も取得できる。
  「LTsv_subprocess_shell=True」でより複雑な事もできるようになるが、インジェクション脆弱性の恐れが発生するので注意。


１-1b．「LTsv_kanare()」のLTsv_recaseの変換辞書一覧

   "Hira2Kata"         ひらがなをカタカナに。
   "Kata2Hira"         カタカナをひらがなに。
   "HiraKana2SeiH"     濁音を清音に。「ぱぴぷぺぽ」と「ぱぴぷぺぽ」は「はひふへほ」に。
   "HiraKana2SeiM"     濁音を清音に。「ばびぶべぼ」は「はひふへほ」に、「ぱぴぷぺぽ」を「まみむめも」に。
   "HiraKana2DakB"     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に。
   "HiraKana2DakP"     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に、「まみむめも」を「ぱぴぷぺぽ」に。
   "HiraKana2Han"      ひらがなもカタカナも半角に。
   "HiraKana2HanKaKe"  ひらがなもカタカナも「ヵヶ」も半角に。
   "Han2HiraEz"        半角をひらがなに(濁音は分離したまま)。
   "Han2KataEz"        半角をカタカナに(濁音は分離したまま)。
   "Han2Hira"          半角をひらがなに(濁音があっても１つの文字に統合)。
   "Han2Kata"          半角をカタカナに(濁音があっても１つの文字に統合)。
   "Alpha2BIG"         半角全角にかかわらずアルファベットを大文字に(キリル文字ギリシャ文字含む)。
   "Alpha2SML"         半角全角にかかわらずアルファベットを小文字に(キリル文字ギリシャ文字含む)。
   "Alpha2HAN"         大文字小文字にかかわらずアルファベットを半角に(キリル文字ギリシャ文字含まない)。
   "Alpha2ZENBS"       大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「＼」へ。
   "Alpha2ZENYen"      大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「￥」へ。


１-2． 「LTsv_file.py」の関数一覧

 Pythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。
 ・Wine上DOSのエラー要因だったCP932(いわゆるシフトJIS、BMP基本多言語面0xffff範囲内)に変換させる事で(変換できない文字は数値文字参照)漢字をある程度扱えるようになります。
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。

 【LTsv_newfile(LTsv_program,LTsv_default=None)】
  「L:Tsv」ファイルを変数上に作成する。
   LTsv_programには「L:Tsv」ファイルを扱うプログラムまたは規格を記述。
  LTsv_defaultには「L:Tsv」ファイル自体をスクリプトとして実行する場合の1stページの指定。
  メタタグについては「<？index1-0b>」も参考。

 【LTsv_download(LTsv_url,LTsv_path,LTsv_reporthook=None)】
  ネット上のLTsv_urlにあるファイルをローカルのLTsv_pathに保存する。
  ダウンロード中にLTsv_reporthook(count,blocksize,totalsize)をコールバックして状況報告させる事は可能(スレッド関係の扱いに注意)。

 【LTsv_zipload(LTsv_zip,LTsv_name,LTsv_path)】
  ローカル上のLTsv_zipにあるファイルをローカルのLTsv_pathに解凍する。

 【LTsv_loadfile(LTsv_path,LTsv_encoding="utf-8",LTsv_default=None)】
  ローカル上のLTsv_pathから「L:Tsv」ファイルを読み込む。
  LTsv_encodingにテキストのコード指定。例えばCP932(いわゆるシフトJIS、BMP基本多言語面0xffff範囲内)を読み込むときは「LTsv_encoding="cp932"」が必要。
  LTsv_defaultは読み込みできなかった場合の初期値を指定。

 【LTsv_readlinepages(LTsv_text)】
  LTsv_textテキスト内のタグ「[tag|」一覧を1行のLTSVとして取得する。

 【LTsv_getpage(LTsv_text,LTsv_tag,LTsv_default=None)】
  タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれた範囲のLTSVページを取得。
  LTsv_default(LTsv_page)はページを取得できなかった場合の初期値を指定。

 【LTsv_readlinedeno(LTsv_text)】
  LTSVページの行数を数える。LTsv_textに改行が無くても1行とみなす。
  LTsv_textの文字列長が0の場合0を返す。

 【LTsv_readlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)】
  0から数えた行数でLTSVページから1行読み込む。
  LTsv_default(LTsv_line)は読み込めなかった場合の初期値を指定。

 【LTsv_readlinefirsts(LTsv_text)】
  LTSVページのfirst(縦軸ラベル)一覧を1行のLTSVとして取得。

 【LTsv_readlinerest(LTsv_text,LTsv_first,LTsv_default=None)】
  LTSVページからfirst(縦軸ラベル)指定で先頭以下データrestを1行読み込む。first(縦軸ラベル)の取得にはタブ文字が必要。
  LTsv_default(LTsv_rest)はrestが読み込めなかった場合の初期値を指定。

 【LTsv_pickdatadeno(LTsv_line)】
  1行のLTSVに含まれるデータ個数を取得(firstも0個目のデータとみなす)。
  「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。

 【LTsv_pickdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)】
  1行のLTSVから0から数えた項目数指定で1個読み込む(firstも0個目のデータとみなす)。
  「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。

 【LTsv_split_label_data(LTsv_labeldata,LTsv_seldata=True)】
  「label:data」からlabelかdataのどちらかを取得。LTsv_seldataがTrueならdata部分を、Falseならlabel部分を返す。

 【LTsv_pickdatas(LTsv_line,LTsv_dataL=0,LTsv_dataR=0)】
  1行のLTSVから0から数えた項目数指定で範囲内の複数データを読み込む(firstも0個目のデータとみなす)。いわゆるスライス操作。
  LTsv_dataLとLTsv_dataRが逆(Tsv_dataRの方が小さい)の場合でも関数内で自動的に並び替える。
  LTsv_dataLとLTsv_dataRが同じ場合差分が無いので読み込まない。

 【LTsv_pickdatafind(LTsv_line,LTsv_find)】
  LTsv_findが1行のLTSVの何項目にデータがあるか0から数える(firstも0個目のデータとみなす)。

 【LTsv_joindatanum(LTsv_line,LTsv_datanum,LTsv_default=None)】
  1行のLTSVのLTsv_datanum項目目にLTsv_default(LTsv_data)を追加する。
  LTsv_datanumが0以下の場合先頭firstに追加。項目数以上の場合末尾に追加。
  省略もしくは文字列長0の場合は何もしない。

 【LTsv_setdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)】
  1行のLTSVのLTsv_datanum項目目にデータLTsv_default(LTsv_data)を上書する。
  負数の場合や項目数以上の場合は何もしない。
   LTsv_default(LTsv_data)を省略もしくは文字列長0のデータの場合は項目を削除。

 【LTsv_pickdatalabel(LTsv_line,LTsv_label,LTsv_default=None)】
  1行のLTSVから「label:data」形式の横軸ラベル(LTsv_label)指定で1個読み込む。
  LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。

 【LTsv_pickdic(LTsv_text,LTsv_first,LTsv_label)】
  「LTsv_readlinerest()」と「LTsv_pickdatalabel()」をひとまとめに。単漢字辞書「LTsv/kanchar.tsv」読込用途。
  first(縦軸ラベル)で指定行、restの横軸ラベル(LTsv_label)で指定列、データ1個を読み込む。

 【LTsv_setdatalabel(LTsv_line,LTsv_label,LTsv_default=None)】
  1行のLTSVの「label:data」形式横軸ベル(LTsv_label)項指定でデータLTsv_default(LTsv_data)を上書する。
  元LTSVに存在しない横軸ラベル(LTsv_label)の場合末尾に追加。
  LTsv_default(LTsv_data)を省略した場合に項目はラベルごと削除。
  文字列長0のデータLTsv_default(LTsv_data)であっても省略しなかった場合は横軸ラベル項目を追加もしくは上書き。
  上記LTsv_joindatanumやLTsv_setdatanumと事なりLTsv_setdatalabelでは「label:」が単独で存在(文字列0の「data」が存在できる)違いがあるので注意。

 【LTsv_sievelabels(LTsv_rest,LTsv_labels="")】
  データそのままにラベルを取り替える。
  文字列0の「data」(データ数よりラベル数が多い場合を想定)は項目が消えるので注意。

 【LTsv_sievetuplelabels(LTsv_rest,*LTsv_labels)】
  「LTsv_sievelabels()」とほぼ同じだが、LTsv_labelがLTSVではなくタプル。

 【LTsv_pushlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)】
  LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を追加する。
  1行追加想定だけど複数行のテキスト挿入も可能。
  LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は何もしない。

 【LTsv_overlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)】
  LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を上書する。
  1行上書想定だけど複数行のテキスト挿入も可能。
  LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は1行削除。

 【LTsv_pushlinerest(LTsv_page,LTsv_first,LTsv_default=None)】
  LTSVページにfirst(縦軸ラベル)指定でFirstにrest(LTsv_default)を追加する。
  LTsv_page内にLTsv_firstが存在しない場合LTsv_page末尾に追加。
  LTsv_rest(LTsv_default)を省略した場合に項目を削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。
  文字列長0のrestデータでも縦軸ラベルfirst(縦軸ラベル)の末尾にはタブ文字が付加(「first\t\n」)。

 【LTsv_putpage(LTsv_text,LTsv_tag,LTsv_default=None)】
  タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれたLTSVページとしてLTsv_default(LTsv_page)を上書き。
  LTsv_text内にLTsv_tagタグが存在しない場合末尾に追加。タグ名が文字列長0の場合は何もしない。
  LTsv_page(LTsv_default)を省略の場合はページ削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。

 【LTsv_putmodify(LTsv_text)】
  メタタグ「L:Tsv」の「modify」の更新のみを行う。「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールが必要。
  「LTsv_newfile()」や「LTsv_savefile()」実行時と「LTsv_putmodify()」の時間はズレる場合がある事に注意。

 【LTsv_savedir(LTsv_path)】
  「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が1個フォルダを必要とする場合、1個フォルダを作成する。
  「os.mkdir()」を使うので、一気に深い階層のフォルダを作ろうとするとエラーになる。
  「LTsv_savefile()」「LTsv_saveplain()」の内部で使用。

 【LTsv_savedirs(LTsv_path)】
  「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が複数のフォルダを必要とする場合、複数のフォルダを作成する。
  「os.makedirs()」を使って一気に深い階層のフォルダを作れてしまうので取扱い注意。

 【LTsv_savefile(LTsv_path,LTsv_default=None)】
  ローカルのLTsv_pathに「L:Tsv」ファイル、LTsv_default(LTsv_text)を書き込む。ファイル保存時にメタタグ「L:Tsv」の「modify」の更新。
  「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成。
  LTsv_default(LTsv_text)を省略の場合はファイル削除(フォルダはそのまま)。

 【LTsv_saveplain(LTsv_path,LTsv_plain)】
  ローカルのLTsv_pathにテキストファイルLTsv_plainを(LTsv_text)書き込む。
  「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。

 【LTsv_labelzip(LTsv_labels,LTsv_datas)】
  LTsv_labelsを横軸ラベル、LTsv_datasをデータとして、
  「label/tlabel/t…」と「data/tdata/t…」を1行のLTSV「label:data/tlabel:data/t…」に束ねる。

 【LTsv_unziplabel(LTsv_line)】
  1行のLTSV「label:data/tlabel:data/t…」からラベルだけを取り出して「label/tlabel/t…」に。

 【LTsv_unzipdata(LTsv_line)】
  1行のLTSV「label:data/tlabel:data/t…」からデータだけを取り出して「data/tdata/t…」に。

 【LTsv_unziplabelsdata(LTsv_line,LTsv_labels)】
  1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。
  LTsv_labelsはtsv形式。

 【LTsv_unziptuplelabelsdata(LTsv_line,*LTsv_labels)】
  1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。
  LTsv_labelsはPythonのタプル形式。

 【LTsv_tuple2tsv(LTsv_tuple)】
  Pythonのタプルやリストをtsvに。
  forループよりjoin使った方が速い的なPythonあるある。

 【LTsv_tsv2list(LTsv_line,LTsv_len=None)】
  tsvをPythonのリストに。
  左辺でunpackする場合受けとる変数の個数をLTsv_lenで指定。
  LTsv_lenがデータ数より多い場合は0文字列が補完される。

 【LTsv_tsv2tuple(LTsv_line,LTsv_len=None)】
  「LTsv_tsv2list()」のタプルバージョン。

 【LTsv_label2dictint(LTsv_line)】
  LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは数値化。

 【LTsv_label2dictstr(LTsv_line)】
  LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは文字列化。

 【LTsv_dict2label(LTsv_dict)】
  Pythonの辞書「{"label":data,"label":data,…}」をLTSV「label:data/tlabel:data/t…」に。dataは文字列化。

 【LTsv_file_ver()】
  「LTsv_file.py」のバージョン表示(20161023U011852)。

 【LTsv_issue()】
  「/etc/issue」を開いてLinuxのディストリビューションの種類を探る。バージョンの確認方法はディストリ毎に異なる予感。


１-3a．「LTsv_time.py」の関数一覧

 日時フォーマットモジュールです。FPSも扱います。徹夜日時という概念があります。
 ・とりあえず日時を取得する場合は「LTsv_getdaytimestr(overhour=24,diffminute=0)」で。
 ・20161023U011852形式(@000y@0m@0dm@wdec@0h@0n@0s)だと困るのであればフォーマット指定。
 ・徹夜日時とは正子(夜中の午前0時)を24時として日付を切り替えずに25時(夜中の1時)、26時(夜中の2時)…と時だけが過ぎる状態です。
 ・ISOカレンダーの週はISO8601の1月4日を含む週(最初の木曜日を含む週)を第1週と数える方法。曜日は月曜から始まるので土日は週末。ISOカレンダーの曜は月曜が1で土曜が6、日曜が7。
 ・単体風テストでは複数の日時フォーマットを用いて関数群の挙動確認ができます。

 【LTsv_yearleap(LTsv_toyear)】
  閏年ならTrue。

 【LTsv_yearweeks(LTsv_toyear)】
  一年の間に週(ISOカレンダーの週)が何回あるか、年間の週数52〜53を返す。

 【LTsv_monthleap(LTsv_toyear,LTsv_tomonth)】
  一月の間に日が何回あるか、28〜31を返す。閏年なら2月は29日。

 【LTsv_beat864(LTsv_tohour,LTsv_tominute,LTsv_tosecond)】
  (LTsv_Beat,LTsv_BeatInteger,LTsv_BeatPoint)のタプルを返す。
  LTsv_Beatは1日の秒数0?86399(86400)。@Beatはその秒数を86.4で割った一日を1000分割する数。
  LTsv_BeatIntegerは@Beatの整数部分。LTsv_BeatPointは@Beatの小数部分。

 【LTsv_intstr0x(LTsv_code)】
  "0xff","$80"のように16進数っぽいものは16進数で数値に、そうでないものは10進数と思ってint変換。
  try節で囲む手間を省きたい場合に便利。

 【LTsv_settimerCounter(counter=None)】
  LTsv_timerCounter「@c」の値を設定する(取得のみも可能)。

 【LTsv_checkFPS()】
  LTsv_checkFPS()自身を1秒間に何回実行できるか計測。0〜999の範囲。

 【LTsv_setdaytimeshift()】
  日時フォーマット用の日時変数(LTsv_meridian_nowなど)を再計算する。
  通常は「LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()」から呼び出される内部関数。

 【LTsv_setdaytimeoption(overhour=None,diffminute=None)】
  LTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定。
  LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()にも同等機能のオプションがある。

 【LTsv_putdaytimenow(overhour=None,diffminute=None)】
  現在時刻を「LTsv_meridian_now」に格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。

 【LTsv_putdaytimeearlier(overhour=None,diffminute=None)】
  最後に実行された「LTsv_putdaytimenow()」の時刻「LTsv_earlier_now」を再度「LTsv_meridian_now」に格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。

 【LTsv_putdaytimespecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None,overhour=None,diffminute=None)】
  日時を指定して「LTsv_meridian_now」に格納。省略(Noneを代入)した項目は現在時刻などが代入。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。

 【LTsv_putdaytimemodify(LTsv_path,overhour=None,diffminute=None)】
  ファイルLTsv_pathの更新時刻タイムスタンプをLTsv_meridian_nowに格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
  OSやファイルシステム毎に秒や分の精度に違いがあると思う。

 【LTsv_putdaytimever(LTsv_verstr,overhour=None,diffminute=None)】
  「LTsv_time_ver()」などの20161023U011852形式(@000y@0m@0dm@wdec@0h@0n@0s)をLTsv_meridian_nowに格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。

 【LTsv_getdaytimestr(timeformat=None,overhour=None,diffminute=None)】
  日付フォーマットtimeformatを各種日時変数で置換する。
  timeformatのデフォルト値は「@000y@0m@0dm@wdec@0h@0n@0s」。
  日付フォーマットの概要は「１-3b．日時フォーマットの概要」を参照。

 【LTsv_settimershift()】
  日時フォーマット用のタイマー変数(LTsv_lap_nowなど)を再計算する。
  通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。

 【LTsv_settimershiftoption()】
  LTsv_start_nowとLTsv_goal_nowの差分を再計算する。
  通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。

 【LTsv_puttimerstartgoal(microsecond=None,millisecond=None,seconds=None,minute=None,hour=None,day=None)】
  タイマーのLTsv_goal_nowを数秒後(seconds)・数分後(minute)・数時間後(hour)・数日後(day)などいずれかに設定する。
  例えば三分後を指定する場合「LTsv_puttimerstartgoal(minute=3)」と入力。
  複数のパラメータを同時指定した場合、例えば分と秒なら秒優先というように細かい方の単位が採用される(内部ではmicrosecondで計算)。

 【LTsv_puttimerspecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None)】
  タイマーのLTsv_goal_nowを日時指定。省略(Noneを代入)した項目は現在時刻などが代入。

 【LTsv_puttimerlap()】
  タイマーの経過時間をLTsv_passed_TotalSecondsに、残り時間をLTsv_timeleft_TotalSecondsに設定する。各種タイマー変数も計算。

 【LTsv_gettimerstr(timeformat=None)】
  日付フォーマットtimeformatを各種タイマー変数で置換する。
  timeformatのデフォルト値は「@0h@0n@0s.0Rs」。時間フォーマットの概要は「１-3b．日時フォーマットの概要」を参照。


１-3b．日時フォーマットの概要

 0.「@」で始まるキーワードが年月日等に置換される仕組み。「@」を表示する場合は「@@」と表記。
 1.日付フォーマット(daytime系)では、小文字が現在時刻(meridian)、大文字が徹夜日時(allnight)です。分以下・Beat・timer系に徹夜日時はありません。
 2.時間フォーマット(timer系)では、小文字が現在時刻(lap)、大文字が曲や動画などの長さ(limit)、「-」が先頭でタイマーの残り時間(timeleft)です。
 3.分(miNute)は「n」で代用して月(Month)との変数名衝突防止してます。ミリ秒は「L」(miLlisecond)。マイクロ秒は「R」(micRoSecond)。
 4.「_」(アンダースコア)を先頭に入れると0が空白に。0も空白も省くと数値は可変長。
 5.月で「JFCAMNLUSOND」表記が使えます。曜で「UMTWRFS」表記が使えます。末尾に「ec」で英語1文字。末尾「j」で日本語表記。
 5.日時の月,週,時,分,秒で2桁以下の数値項目の場合、末尾に「z」で１,２,３,４,５,６,７,８,９,10,11,12といった1桁の時全角数値の表現が可能。

 年=@yzj,@yzc,@0yz,@_yz,@yz,@0yd,@_yd,@yd,@0yw,@_yw,@yw,@000yi,@___yi,@4yi,@0yi,@_yi,@2yi,@yi,@000y,@___y,@4y,@0y,@_y,@2y,@y,@Yzj,@Yzc,@0Yz,@_Yz,@Yz,@0Yd,@_Yd,@Yd,@0Yw,@_Yw,@Yw,@000Yi,@___Yi,@4Yi,@0Yi,@_Yi,@2Yi,@Yi,@000Y,@___Y,@4Y,@0Y,@_Y,@2Y,@Y
  000y,___y,4y系は4桁の年(Year)。000y,___y,4y系は2桁の年(Yearlower)。
  yz系は干支(YearZodiac)。@yzjで鼠,牛,虎,兎,龍,蛇,馬,羊,猿,鶏,犬,猪。@yzcで子,丑,寅,卯,辰,巳,午,未,申,酉,戌,亥
  yi系はISOカレンダーの年(YearIso)。第1週に突入した時点で年が明けるので、年末年始の間は西暦カレンダーの年とズレる場合があります。
  ywi系は年間の週数(YearWeeksIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。
  yd系は年間の日数(YearDays)。年間約365〜366日。閏年の時に1日増える。

 月=@0md,@_md,@md,@mec,@mes,@mel,@_mel,@meh,@_meh,@mjiz,@_mjiz,@mj,@_mj,@0m,@_m,@mz,@m,@0Md,@_Md,@Md,@Mec,@Mes,@Mel,@_Mel,@Meh,@_Meh,@Mjiz,@_Mjiz,@Mj,@_Mj,@0M,@_M,@Mz,@M
  m系は月の数値(Month)。1?12。
  me系は月の英語表記。末尾「c」で一文字(JFCAMNLUSOND)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。
   (January,February,marCh,April,May,juNe,juLy,aUgust,September,October,November,December)
  mj系は神無月、mjiz系は神有月(睦月,如月,弥生,卯月,皐月,水無月,文月,葉月,長月,神有月,霜月,師走)表記の旧暦の月名。
  md系は月間の日数(MonthDays)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。

 週=@0wnyi,@_wnyi,@wnyiz,@wnyi,@0Wnyi,@_Wnyi,@Wnyiz,@Wnyi,@0wnm,@_wnm,@wnmz,@wnm,@0Wnm,@_Wnm,@Wnmz,@Wnm
  wnyi系はISOカレンダーの週番号(WeekNumberYearIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。
  wnm系は月毎の曜番号(WeekNumberMonth)。月間約4?5回。単純に月内の日数を7で割った数。

 曜=@wdj,@wdec,@wdes,@wdel,@_wdel,@wdeh,@_wdeh,@wdi,@wd,@Wdj,@Wdec,@Wdes,@Wdel,@_Wdel,@Wdeh,@_Wdeh,@Wdi,@Wd
  wd系は曜の数値(WeekDay)。月曜が0で土曜が5、日曜が6。
  we系は曜の英語表記。末尾「c」で一文字(MTWRFSU)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。
   (Monday,Tuesday,Wednesday,thuRsday,Friday,Saturday,sUnday)
  wj系は月火水木金土日。
  wdi系はISOカレンダー曜日の数値(WeekDayIso)。月曜が1で土曜が6、日曜が7。

 日(日付)=@0dm,@_dm,@dmz,@dm,@0dy,@_dy,@dy,@0Dm,@_Dm,@Dmz,@Dm,@0Dy,@_Dy,@Dy
 日(時間)=@000d,@___d,@00d,@__d,@0d,@_d,@d,@-000d,@-___d,@-00d,@-__d,@-0d,@-_d,@-d,@000D,@___D,@00D,@__D,@0D,@_D,@D
  dm系は月換算の日数(DayMonth)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。
  dy系は年換算の日数(DayYear)。年間約365〜366日。閏年の時に1日増える。
  時間フォーマット(timer系)では日は4桁まで使えます。

 時(日付)=@apj,@apel,@apeu,@ap,@Apj,@Apel,@Apeu,@Ap,@0hap,@_hap,@hapz,@hap,@0h,@_h,@hz,@h,@0H,@_H,@Hz,@H
 時(時間)=@0dh,@_dh,@dh,@-0dh,@-_dh,@-dh,@0Dh,@_Dh,@Dh,@0h,@_h,@h,@-0h,@-_h,@-h,@0H,@_H,@H
  h系は時の数値(Hour)。1?24。大文字の「H」を使うと徹夜日時を表示(overhour)。1〜48。
  hap系は午前午後表記の数値(HourAP)。1〜12。
  apj系は午前午後徹夜表記。大文字の「A」を使うと徹夜日時を表示(overhour)。36時を過ぎようが徹夜日時の時は「徹夜」と表示される。
  ape系はam,pm,al表記。大文字の「A」を使うと徹夜日時を表示(overhour)。末尾「l」で小文字、末尾「u」で大文字。
  ap系は午前午後を0,1で。大文字の「A」を使うと午前午後徹夜を0,1,2で。何を言ってるか分からないだろうがoverhourの設定次第では昼の12時だろうが徹夜と表示。
  午前午後徹夜は時間フォーマット(timer系)には存在しません。

 分(日付)=@0n,@_n,@nz,@n,@0N,@_N,@Nz,@N
 分(時間)=@0n,@_n,@n,@-0n,@-_n,@-n,@0N,@_N,@N
  n系は分(miNute)。0〜59。

 秒(日付)=@0s,@_s,@sz,@s,@0S,@_S,@Sz,@S,@0ls,@_ls,@ls,@0rs,@_rs,@rs,@0Ls,@_Ls,@Ls,@0Rs,@_Rs,@Rs
 秒(時間)=@0s,@_s,@s,@-0s,@-_s,@-s,@0S,@_S,@S,@0ls,@_ls,@ls,@-0ls,@-_ls,@-ls,@0Ls,@_Ls,@Ls,@0rs,@_rs,@rs,@-0rs,@-_rs,@-rs,@0Rs,@_Rs,@Rs
  s系は秒(Second)。0〜59。
  ls系はミリ秒(miLlisecond)。ミリ秒は3桁、0〜999。
  rs系はマイクロ秒(micRoSecond)。マイクロ秒は6桁、0〜999999。

 @Beat(日付)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@bt
 @Beat(時間)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@0bt,@_bt,@bt,@-0bti,@-_bti,@-bti,@-0btp,@-_btp,@-btp,@-0bt,@-_bt,@-bt,@0Bti,@_Bti,@Bti,@0Btp,@_Btp,@Btp,@0Bt,@_Bt,@Bt
  bt系はビート(Beat)の途中計算。1日の秒数0〜86399(86400)をそのまま表示。本当のビートは86.4秒。
  bti系はビートの整数部分(BeatInteger)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。
  btp系はビートの小数部分(BeatPoint)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。
  時間フォーマット(timer系)としてビートを用いる場合時差は関係無し。

 正負符号(時間)=@+-,@_-,@--
  LTsv_lap_nowがLTsv_goal_nowを通りすぎた、いわゆるタイムオーバーの時はLTsv_lap_nowが負の数に。
  @+-はプラスマイナス両方表示。
  @_-はプラスの時は空白を表示。
  @--はマイナスのみ表示。プラスの時は一文字詰める。

 @c(日付)=@000c,@00c,@0c,@c
  「LTsv_getdaytimestr()」もしくは「LTsv_gettimerstr()」が実行される度にカウンター(LTsv_timerCounter)が加算される。
  @Z=\0。文字列長0用。

 その他エスケープ文字
  @T=\t。タブ文字用。
  @E=\n。改行文字用。
  @Z=\0。文字列長0用。


１-4a．「LTsv_calc.py」の関数一覧

 電卓フォーマットモジュールです。分数計算を扱います。電卓フォーマットの概要は「１-4b．電卓フォーマットの概要」を参照。
 ・「LTsv_calc()」に電卓フォーマットの計算式を渡すと分数が帰ってきます。通分できない分数の場合小数が帰ってきます。
 ・単体風テストでは複数の電卓フォーマットを用いて関数群の挙動確認ができます。

 【LTsv_calc_GCM(LTsv_calcL,LTsv_calcR)】
  最大公約数。

 【LTsv_calc_LCM(LTsv_calcL,LTsv_calcR)】
  最小公倍数。

 【LTsv_calc_bracketsbalance(LTsv_calcQbase)】
  左右の括弧の数を合わせる。ついでに演算子の整理整頓など。

 【LTsv_calc_decimalize(LTsv_calcQbase)】
  分数を小数に。

 【LTsv_calc_fractalize(LTsv_calcQbase)】
  小数を分数に。

 【LTsv_calc(LTsv_calcQbase)】
  電卓フォーマットを入力すると分数計算。「1/3⇔1|3」と分数に計算。
  LTsv_calc自体は主に括弧の正規表現による検索。括弧の内側を「LTsv_calc_function()」に渡す。
  電卓フォーマットの概要は「１-4b．電卓フォーマットの概要」を参照。

 【LTsv_calc_function(LTsv_calcQbase)】
  主に数列和・数列積などの計算。「Σ(数列和)」などの左側を「LTsv_calc_addition()」に渡す。

 【LTsv_calc_addition(LTsv_calcQbase,LTsv_Count)】
  主に分数の加算減算。分数の積割処理で「LTsv_calc_addition()」を呼び出す。

 【LTsv_calc_multiplication(LTsv_calcQbase)】
  主に分数の積(分数の割り算含む)。小数排除処理で「LTsv_calc_fractalize()」呼び出す。


１-4b．電卓フォーマットの概要

 分数「|」と割り算「/」を別物として扱います。分数の入れ子は「2|3|5|7⇔2|105」のように分母にまとめられます。
 通常は分数で計算するので「1/3⇔1|3」「1|3*3⇔1」になり一般的な電卓のように「0.999999999999」などにはならない。
 分数内で小数が使用可能です。「0.5|3.5⇔1|7」の様に小数が混在してても分数に変換します。
 加算「+」減算「-」と区別して表現できます。「1-(-2)」と括弧を使わなくても「1-m2⇔3|1」のようにマイナスで引くといった表現が可能。
 数列計算のカウント変数「c」は整数です。初期値は+1で増減は±1です。カウント変数に代入する過程で整数変換が発生するので注意。括弧の内外で別カウントになるので要注意。
 「(c+2)(c+1)」のように括弧間の演算子が省略された場合には(c+2)*(c+1)⇔6|1」のように掛け算を適用します。
 Pythonには整数有効計算範囲の概念は存在しないはずですが、小数計算ではPythonの実装・環境に応じた丸め誤差などが発生します。
 0で割るなどの計算できない場合は無限エラー扱いにして「n|0」と表示します。実際の無限には正負の概念が存在しますが電卓フォーマットの「n|0」は単に計算放棄です。

 使用できる数字
  012456789 １２３４５６７８９０    アラビア数字は全角でも使用できます。
  〇一二三四五六七八九              漢数字も使用できます。大字も「壱弐参肆伍陸漆捌玖零陌阡萬」が使用可能です。
  垓京兆億万千百十 銭               漢数字の万単位の繰り上がりも垓までとりあえず対応しています。銭は百分の一になります。

 使用できる演算子
   . ．      小円                    小数点は「3.1416⇔3927|1250」の様にドットを使います。「円」は「3円14銭」のような表現用途。
  | ｜      分                      分数を表します。分数中の小数は「0.5|3⇔1|6」のように通分されます。
  p PｐＰ   正                      正の数を表現。符号が付加されてなければ0以上の数です。
  m MｍＭ   負                      負の数を表現できます。「2-m1⇔3|1」のように負の数で引き算すると加算されます。
  + ＋      加足和                  足し算をします。計算結果は「1|6+1|3⇔1|2」のように通分されます。

  - －      減引差                  引き算をします。計算結果は「3|4-1|4⇔1|2」のように通分されます。
  * ×      乗掛積                  掛け算をします。計算結果は「2|3*3|4⇔1|2」のように通分されます。
  / ／÷    除割商                  割り算をします。計算結果は「2|5/4|5⇔1|2」のように通分されます。
  \ ＼                              整数未満を切り捨てる割り算をします。計算結果は「7\3⇔2」のように小数以下は切り捨てられます。
  # ＃      余                      割り算の余りを求めます。「3|2#1|3⇔1|6」のように分数も使えます。
  L lＬｌ   倍                      最小公倍数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。
  G gＧｇ   約                      最大公約数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。
  % ％      率                      消費税などの計算用。「10000+8%⇔10800|1」のように「10000×1.08⇔10800|1」と小数計算の手間簡略化。
  y π      周                       円周率。math.pi(約3.14159265359)が代入される。桁数はおそらくPython環境依存。
  e ｅ      底                      ネイピア数。math.e(約2.71828182846)が代入される。桁数はおそらくPython環境依存。

 括弧および関数用途の演算子
  ()（）                            括弧の中を先に計算する「3(c+1)→3×(c+1)→3×(1+1)→3×2」。もしくは数列の表現にも使用。
  c CＣｃ   数                      数列内で有効なカウント変数。括弧の内外で異なる数列を数えるので注意。初期値は「1」。
  S SｓＳΣ 列但※                   数列和。「(cΣ1～5)→1＋2＋3＋4＋5」といった等差数列の和を想定。
  ! ！      方                      数列積。「(2!1～4)→2×2×2×2」のような乗数や「(c!1～5)→1×2×3×4×5」のような階乗を想定。
  ~ ～      ?                       数列和(もしくは数列積)の範囲指定。「(cΣ1~4)→1＋2＋3＋4」「(c!4～1)→4×3×2×1」と増減±1の計算は自動。

 未実装等で使用できない演算子
  n NｎＮ∞ 無                      0で割った時など計算"できない"事を表す「n|0」と同じ。本当の無限には正負などがあるが、単純に未定というか計算放棄。
  ,                                 「10,800⇔10800|1」とコンマ無しの計算結果を帰します。使用でき無い他の演算子もだいたいコンマ扱いです。
  √                                平方根に使う予定の演算子。分数電卓なので無理数などの扱いに困ってる。


１-5a．「LTsv_joy.py」の関数一覧

 【LTsv_joyreset(LTsv_tsvpath)】
  

 【LTsv_joyexit()】
  

 【LTsv_joyinit(LTsv_tsvpath="LTsv/LTsv_joy.tsv")】
  

 【LTsv_setjoydata(LTsv_joyid,LTsv_default=None)】
  

 【LTsv_getjoystr(LTsv_joyid,joyformat=None)】
  

 【LTsv_atanscalar(LTsv_atanX,LTsv_atanY)】
  

 【LTsv_atanclock(LTsv_atanX,LTsv_atanY,LTsv_labels)】
  

 【LTsv_joyaxis_label()】
  


１-5a．「LTsv_kbd.tsv」のタグ解説

 【[LTsv_deviceL|】
  Linuxのデバイス指定ページ。

 【joy】
  

 【[keydefault|】
  

 【axisL】
  

 【axisW】
  

 【button】
  

 【[keyanother|】
  

 【axisUV】
  

 【axisLW】
  

 【axisL7】
  

 【axisW8】
  

 【buttonN】
  

 【buttonP】
  


１-6a．「LTsv_joy.py」の関数一覧

 【LTsv_kbdreset(LTsv_tsvpath)】
  

 【LTsv_kbdgettypename(LTsv_code)】
  

 【LTsv_kbdgettypekana(LTsv_code)】
  

 【LTsv_kbdgettypecode(LTsv_name)】
  

 【LTsv_kbdgettypegana(LTsv_gana)】
  

 【LTsv_kbdexit()】
  

 【LTsv_kbdinit(LTsv_tsvpath="LTsv/LTsv_kbd.tsv",LTsv_initmouse=False)】
  

 【LTsv_kbdEVIOCGRAB(LTsv_grabflag)】
  

 【LTsv_kbdwrite(LTsv_code,LTsv_press)】
  

 【LTsv_kbdwriteCtrl(LTsv_ganastsv)】
  

 【LTsv_setkbddata(LTsv_kbdstacks,LTsv_mousestacks)】
  

 【LTsv_getkbdlabels(kbdformat=LTsv_defkbdformat)】
  

 【LTsv_getkbdnames()】
  

 【LTsv_getkbdcodes()】
  

 【LTsv_getkbdkanas()】
  


１-6b．「LTsv_kbd.tsv」のタグ解説

 【[LTsv_deviceL|】
  

 【kbd】
  

 【mouse】
  

 【[LTsv_mouse_EV_KEY|】
  

 【BTN_LEFT:0x110】
  

 【BTN_RIGHT:0x111】
  

 【BTN_MIDDLE:0x112】
  

 【BTN_TOUCH:0x14a】
  

 【BTN_STYLUS:0x14b】
  

 【BTN_STYLUS2:0x14c】
  

 【BTN_FORWARD:0x115】
  

 【BTN_BACK:0x116】
  

 【[LTsv_EV_REL|】
  

 【REL_WHEEL:8】
  

 【[LTsv_EV_ABS|】
  

 【[LTsv_typenameW|】
  

 【1:0x31】
  

 【Q:0x51】
  

 【A:0x41】
  

 【Z:0x5a】
  

 【NFER:0xe6】
  

 【ShiftL:0xa0】
  

 【Left:0x25】
  

 【Enter:0x0d】
  

 【F01:0x70】
  

 【MouseL:1】
  

 【[WineVK|】
  

 【[WindowsVK|】
  

 【NFER:0x1c】
  

 【[LTsv_typenameL|】
  

 【1:2】
  

 【Q:16】
  

 【A:30】
  

 【Z:44】
  

 【NFER:94】
  

 【ShiftL:42】
  

 【Left:105】
  

 【Enter:28】
  

 【F01:59】
  

 【MouseL:250】
  

 【[LTsv_typegana|】
  

 【ぬ:1】
  

 【た:Q】
  

 【ち:A】
  

 【つ:Z】
  

 【[LTsv_keydefault|】
  


# Copyright (c) 2016 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE


