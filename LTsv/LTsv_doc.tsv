[L:Tsv|
code	UTF-8
enter	LF
tab	4
program	LTsv_doc.py
1st		LTsv_doc_this
LTsvver	20161023U011852
modify	20161127U143549
|L:Tsv]

[LTsv_doc|
tsvlist	LTsv_doc.tsv	../../ooblog.github.io/yakuyon.tsv	LTsv_debug.tsv
window_size	width:600	height:480	wait:100	fontsize:24
modify	@000y@0m@0dm@wdec@0h@0n@0s
|LTsv_doc]

[LTsv_doc_this|
main	<＃LTsv_doc_main>
tagseparate	*
skplist	LTsv_doc
outdir	./
outlist	LTsv_doc.txt	../docs/LTsv_doc.html	../docs/LTsv_doc.css
defdir	./
deftag	L:<！	R:>
defindent	firstL:<？firstL>	firstR:<？firstR>	restL:<？restL>	restC:<？restC>	restR:<？restR>	restRLast:<？restRLast>
|LTsv_doc_this]

[<＃LTsv_doc_main>|
<？LTsv_doc_ext>
|<＃LTsv_doc_main>]

[<？LTsv_doc_ext>|
.+\.html?	<＃LTsv_doc_html>
.+\.css	<＃LTsv_doc_css>
.*	<＃LTsv_doc_txt>
|<？LTsv_doc_ext>]

[<＃LTsv_doc_txt>|
<＃summary>

目次

<？list00-0>*<？list00-1>*<？list00-2><？list01-0>*<？list01-1><？list02-0>*<？list02-1><？list03-0><？list04-0>*<？list04-1><？list05-0>*<？list05-1><？list06-0>*<？list06-1>*<？list06-2><？list07-0>*<？list07-1><？list08-0>*<？list08-1><？list09-0>*<？list09-1>*<？list09-2>*<？list09-3>*<？list09-4><？list10-0>*<？list10-1>*<？list10-2><？list11-0><？list12-0>
<？section00-0>*<？section00-1>*<？section00-2><？section01-0>*<？section01-1><？section02-0>*<？section02-1><？section03-0><？section04-0>*<？section04-1><？section05-0>*<？section05-1><？section06-0>*<？section06-1>*<？section06-2><？section07-0>*<？section07-1><？section08-0>*<？section08-1><？section09-0>*<？section09-1>*<？section09-2>*<？section09-3>*<？section09-4><？section10-0>*<？section10-1>*<？section10-2><？section11-0><？section12-0>
<？ooblog>
|<＃LTsv_doc_txt>]

[<＃LTsv_doc_html>|
<?DOCTYPE html>
<html lang="ja"><head>
 <meta charset="UTF-8" />
 <meta name="description" content="">
 <title><？title></title>
 <link rel="stylesheet" type="text/css" href="LTsv_doc.css" />
 <link rel="icon" type="image/png" href="LTsv_doc_logo.png" />
</head><body>

 <header>
  <div class="yonmoji_root"><a href="https://ooblog.github.io/" rel="publisher" title="<？yakuyon>">約四<br /></a><a href="https://ooblog.github.io/" rel="publisher" title="<？yakuyon>">文字</a></div>
  <span> &#62; <a href="https://ooblog.github.io/LTsv.html" title="LTsv - <？yakuyon>">LTsv</a> &#62; <mark class="applogo"><img src="LTsv_doc_logo.png" width="48" height="48" alt="LTsv_doc" title="LTsv_doc"></mark></span> <span class="yonmoji_sitemap"><a href="https://ooblog.github.io/404.html" title="404 - <？yakuyon>">sitemap(404)</a></span>
  <br class="yonmoji_both" />
 </header>

 <section>
  <h1><？title></h1>
  <＃summary>
  <h2>目次</h2>
  <ul>
   <？list00-0>*<？list00-1>*<？list00-2>
   <？list01-0>*<？list01-1>
   <？list02-0>*<？list02-1>
   <？list03-0>
   <？list04-0>*<？list04-1>
   <？list05-0>*<？list05-1>
   <？list06-0>*<？list06-1>*<？list06-2>
   <？list07-0>*<？list07-1>
   <？list08-0>*<？list08-1>
   <？list09-0>*<？list09-1>*<？list09-2>*<？list09-3>*<？list09-4>
   <？list10-0>*<？list10-1>*<？list10-2>
   <？list11-0>
   <？list12-0>
  </ul>
 </section>

<？section00-0>*<？section00-1>*<？section00-2>
<？section01-0>*<？section01-1>
<？section02-0>*<？section02-1>
<？section03-0>
<？section04-0>*<？section04-1>
<？section05-0>*<？section05-1>
<？section06-0>*<？section06-1>*<？section06-2>
<？section07-0>*<？section07-1>
<？section08-0>*<？section08-1>
<？section09-0>*<？section09-1>*<？section09-2>*<？section09-3>*<？section09-4>
<？section10-0>*<？section10-1>*<？section10-2>
<？section11-0>
<？section12-0>

<footer>
 <p>site generator "<？https99-9:LTsv_doc.py>" repository：<？https99-9:LTsv10repository></p>
 <p class="ooblog"><？ooblog></p>
</footer>
</body></html>
|<＃LTsv_doc_html>]

[<＃LTsv_doc_css>|
@charset "utf-8";
@font-face{
  font-family: "kan5x5comic";
  src: url("https://ooblog.github.io/kan5x5comic.woff") format('woff');
}
body{
  background-color: white;
}
mark{
  background-color: white;
  border: 1px pink solid;
}
mark.applogo{
  border: 0px;
}
 mark.applogo > img{
   margin: -1rem 0rem -1rem;
   vertical-align: middle;
   border: 1px pink solid;
 }
header{
  border: 1px gray dotted;
  padding: 1rem;
}
 .yonmoji_root{
   font-family: "kan5x5comic";  font-size: 1rem;
   line-height: 1rem;
   float: left;
   margin-top: -0.5rem;
   padding-right: 0.5rem;
 }
 .yonmoji_root > a:nth-child(odd){
   text-decoration: none;
 }
 .yonmoji_sitemap{
   float: right;
 }
 yonmoji_both{
   float: both;
 }
section{
  margin-top: 1rem;
  border: 2px black solid;
  padding: 1rem;
}
input.yonmoji_entry{
  border: solid 1px orange;
  width: 12rem;
}
input.yonmoji_entry:focus{
  border: solid 2px IndianRed;
}
 .yonmoji{
   width: 100%;  margin: 0 auto;
   text-align: center;
   padding-top: 1rem;
   padding-bottom: 0rem;
 }
 .yonmoji_logo{
   font-family: "kan5x5comic";  font-size: 5rem;
   line-height: 5rem;
   width: 10rem;
   height: 10rem;
   margin: 0 auto;
 }
 .yonmoji_word{
   font-family: "kan5x5comic";  font-size: 2rem;
   line-height: 2rem;
   float: left;
   margin: 0rem;
 }
article{
  margin-top: 0.5rem;
  border: 1px gray solid;
  padding: 1rem;
}
aside{
  border: 1px gray dotted;
  float: right;
  width: 12rem;
  margin-top: 1rem;
  padding: 1rem;
}
footer{
  margin-top:1rem;
  float: both;
  border: 1px gray dotted;
  text-align: center;
}
p.ooblog{
  text-align: left;
  padding: 1rem 1rem 0em;
}
dt{
  font-weight: bold;
  word-wrap: break-word; word-break: break-all;
}
dd{
  word-wrap: break-word; word-break: break-all;
}
h1{ font-size: 2.0rem; margin: 1rem 0.5rem 0.5rem; }
h2{ font-size: 1.8rem; margin: 1rem 0.5rem 0.5rem; }
h3{ font-size: 1.6rem; margin: 1rem 0.5rem 0.5rem; }
h4{ font-size: 1.4rem; margin: 1rem 0.5rem 0.5rem; }
h5{ font-size: 1.2rem; margin: 1rem 0.5rem 0.5rem; }
h6{ font-size: 1.0rem; margin: 1rem 0.5rem 0.5rem; }

/*
<？ooblog>
*/
|<＃LTsv_doc_css>]

[<？title>|
.*	<？LTsv>モジュール解説(「LTsv/LTsv_doc.tsv」を「LTsv/LTsv_doc.py」で「docs/LTsv.html」に変換)
|<？title>]

[<＃summary>|
<？P>「<？LTsv>」は「L:Tsv」の読み書きを中心としたモジュール群です。<？BR>
このモジュール解説文書「<？outlist>」は「<？https10:LTsv_doc.py>」を使って「<？https10:LTsv_doc.tsv>」から錬成されてます。<？BR>
version(branch) <！L:TsvLTsvver><？BR>
modify <？modify><？BR><？/P>
|<＃summary>]

[<？section00-0>*<？section00-1>*<？section00-2>|
.+\.html?	<section>@E <h3><a name="index00-@c"><？title00-@c></a></h3>@E<＃contents00-@c>@E</section>@E
.*	@E<？title00-@c>@E@E<＃contents00-@c>@E
|<？section00-0>*<？section00-1>*<？section00-2>]

[<＃contents00-0>|
<？P> ※「MIT License」準拠。<？BR>
<？/P>
<？https00:mit>

<？https00:osdn>

<？https00:postd>

<？P> ※口語的説明。<？BR>
   ・「<？https00:LICENSE>」も含めソースコードの閲覧やコピーに制限を設けない事。<？BR>
   ・いかなる場合においても作者または著作権者は一切責任を負わない事。<？BR>
<？/PP>
 ※「<？LTsv>」固有の問題への言及。<？BR>
   ・<？DICchar><？DICword>などで翻訳ミスもしくは言い回しが古くなるなど日本語(英語中国語なども含む)の不具合に対しても作者または著作権者にはメンテナンス義務等はありません。<？BR><？/P>
|<＃contents00-0>]

[<＃contents00-1>|
<？P> ※Pythonは別途インストールされているものとします(Pythonの導入分からない人は「<？index11-0>」も参考)。<？BR>
 ダウンロードは「<？https99-9:LTsv10repository>」にある「Clone or download」ボタンを押すと出る「Download ZIP」メニューをクリック。<？BR>
 インストールは任意(なるだけユーザーディレクトリ内)のフォルダに「LTsv10kanedit-master.zip」を解凍するだけです。<？BR>
 「*.py」のパーミッションがOFFになってたら実行可能に変更、Wineで使う場合は「wine_sh」フォルダ内の「*.sh」のWineパスを適宜修正。<？BR>
 フォント「kan5x5comic.ttf」を用意する場合はLinuxなら「kan5x5.svg」から「FontForge」で変換するか、<？BR>
 Windowsの場合は「<？https00:yakuyon>」からWebフォント「<？https00:kan5x5comic.woff>」をダウンロードして「WOFFコンバーター」で変換。「<？https00:kanfont.txt>」も参考。<？BR>
 フォント「kan5x5comic.ttf」を用意しない場合は適宜「*.tsv」のフォントに関する設定を修正。<？BR>
<？/P>
<？https00:LTsv10kanedit>

<？https00:ooblog.github.io>

<？https00:woffconv>
|<＃contents00-1>]

[<＃contents00-2>|
<？P> Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)で開発しています。Windows,cygwin,darwinなどでの動作は確認しておりません。<？BR>
 フォント(グリフ)「kan5x5comic」は半角と全角の幅の比率が約5:3(1024:624)なのでアスキーアートで問題になる場合があります。グリフ不足で表示できない文字などあります。<？BR>
 「LTsv/kanpickle.bin」にグリフデータが蓄積されるまでは動作が重いです。「<？https11:kanmap.py>」で解決できます。<？BR>
 グリフデータ「kan5x5.svg」をフォント「kan5x5comic.ttf」に変換する手段として「FontForge」が必要。本当は<？DICchar>から直接生成したいけど優先順位が低い。<？BR>
 人名に使える漢字の異体字を<？DICmap>から<？DICchar>に移管作業中。なので<？VRkeyboard>の<？DICmap>が大幅に変更するかも。<？BR>
 Windowsのエディタで<？DICmap>を編集すると3バイト以上の文字が「?」に置き換えられる恐れがある。カレー()がよく巻き添え<？BR>
 マウスボタンの取得は保留。ホイールの取得は放置。tkk方面は手を出さない予定(コンボボックスなどはGTKのみサポート)。<？BR>
 GTKのコールバックからデータを受けとる方法が不明のため、GUIイベント経由の<？PCkeyboard>取得やファイルダイアログからのキャンセル取得などが不明。<？BR>
 outlistページ化未実装。<？BR>
|<＃contents00-2>]

[<？https00:mit>*<？https00:osdn>*<？https00:postd>*<？https00:LTsv10kanedit>*<？https00:ooblog.github.io>*<？https00:woffconv>|
.+\.html?	<dl><dt><？web00-@c></dt><dd><a href="<？url00-@c>" title="<？web00-@c>"><？url00-@c></a></dd></dl>
.*	   <？web00-@c><？BR>@E   <？url00-@c><？BR>
|<？https00:mit>*<？https00:osdn>*<？https00:postd>*<？https00:LTsv10kanedit>*<？https00:ooblog.github.io>*<？https00:woffconv>]
[<？url00-0>|
.*	http://choosealicense.com/licenses/mit/
|<？url00-0>]
[<？web00-0>|
.*	MIT License - Choose a License
|<？web00-0>]
[<？url00-1>|
.*	https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license
|<？url00-1>]
[<？web00-1>|
.*	licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN
|<？web00-1>]
[<？url00-2>|
.*	http://postd.cc/mit-license-line-by-line/
|<？url00-2>]
[<？web00-2>|
.*	MITライセンスを1行1行読んでいく | プログラミング | POSTD
|<？web00-2>]
[<？url00-3>|
.*	<？url99-9:LTsv10repository>
|<？url00-3>]
[<？web00-3>|
.*	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
|<？web00-3>]
[<？url00-4>|
.*	https://ooblog.github.io/%E3%81%B5%E3%81%89%E3%82%93%E3%81%A8.html
|<？url00-4>]
[<？web00-4>|
.*	ふぉんと - 「約四文字」(http://ooblog.github.io/)
|<？web00-4>]
[<？url00-5>|
.*	http://opentype.jp/woffconv.htm
|<？url00-5>]
[<？web00-5>|
.*	WOFFコンバータ
|<？web00-5>]


[<？section01-0>*<？section01-1>|
.+\.html?	<section>@E <h3><a name="index01-@c"><？title01-@c></a></h3>@E<＃contents01-@c>@E</section>@E
.*	@E<？title01-@c>@E@E<＃contents01-@c>@E
|<？section01-0>*<？section01-1>]

[<＃contents01-0>|
<？P> データ間の区切りをタブ(\t)、「label:data」の様にコロン(:)でデータにラベルを付けたのが「LTSV」です。<？BR>
 素のLTSVファイル自体は単なるログのフォーマットです。<？BR>
<？/P>
<？https01-0:ltsvorg>
<？https01-0:ltsvfaq>
<？P> 「L:Tsv」は「*.tsv」「*.ltsv」ファイルの事を差す場合もありますがLTSVパーサ類を含めた「tsvtool」も含めて「L:Tsv」と呼ぶ場合があります。<？BR>
 複数のLTSVを１つのファイルで保存できるようタグで区切ったり、日時処理や分数電卓やGTK＆Tkinterなどを加えたり、Python2,3のprint関数バージョン違いを吸収させたりと、<？BR>
 LTSVパーサに雑多な拡張を重ねていった結果、漢直エディタ環境と化したモジュール群が今の「L:Tsv」です。<？BR><？/P>
|<＃contents01-0>]
[<？https01-0:ltsvorg>|
.+\.html?	<dl><dt><？title01-0:ltsvorg></dt><dd><a href="<？url01-0:ltsvorg>" title="<？title01-0:ltsvorg>"><？url01-0:ltsvorg></a></dd></dl>
.*	   <？title01-0:ltsvorg><？BR>@E   <？url01-0:ltsvorg><？BR>@E
|<？https01-0:ltsvorg>]
[<？url01-0:ltsvorg>|
.*	http://ltsv.org/
|<？url01-0:ltsvorg>]
[<？title01-0:ltsvorg>|
.*	Labeled Tab-separated Values (LTSV)
|<？title01-0:ltsvorg>]
[<？https01-0:ltsvfaq>|
.+\.html?	<dl><dt><？title01-0:ltsvfaq></dt><dd><a href="<？url01-0:ltsvfaq>" title="<？title01-0:ltsvfaq>"><？url01-0:ltsvfaq></a></dd></dl>
.*	   <？title01-0:ltsvfaq><？BR>@E   <？url01-0:ltsvfaq><？BR>@E
|<？https01-0:ltsvfaq>]
[<？url01-0:ltsvfaq>|
.*	http://d.hatena.ne.jp/naoya/20130209/1360381374
|<？url01-0:ltsvfaq>]
[<？title01-0:ltsvfaq>|
.*	LTSV FAQ - LTSV って何? どういうところが良いの?
|<？title01-0:ltsvfaq>]
|<？title$http://d.hatena.ne.jp/naoya/20130209/1360381374>]

[<＃contents01-1>|
<？P>  データ間の区切りはタブ(\t)です。一般的なCSVやLTSV等と事なり、複数のタブがあっても1つのタブとみなします(文字列長0のデータを扱う場合はラベル推奨)。<？BR>
 先頭データの事をfirst、先頭以降のデータの事をrestと呼びます。例えばLispでも、car関数の代わりにfirst関数、cdr関数の代わりにrest関数が使えたはず。<？BR>
 firstは縦軸ラベルとして使う場合があります。restでは「label:data」の様なラベルとデータをコロン(:)で区切る形の軸ラベルが付けられます。簡単に言うとrestでLTSVが使えます。<？BR>
 LTSVを「[tag<？&#x7C;>」と「<？&#x7C;>tag]」の様に<？contents01-1:tagsplit><？BR>
 拡張子は「.ltsv」か「.tsv」。メモリ上など拡張子で区別できない場合でもメタタグで判定。メタタグが存在しない場合ファイル全体を１つのページとみなす。<？BR>
 first縦軸ラベル自体にコロン(:)が含まれる(「label:data」のようになってる)場合、ページ全体を１つのLTSVとみなす場合がある(「LTsv_label2dictint()」「LTsv_label2dictstr()」など)。
<？/PP>
 メタタグ「L:Tsv」のfirst縦軸ラベルの解説。<？BR>
<？/P>
<？DLDT>  [L:Tsv|<？/DTDD>                    「L:Tsv」ファイルの宣言です。マジックナンバー代わりなのでなるだけファイルの先頭に。<？/DD/DL>
<？DLDT>   code<？/DTDD>                       文字コードの宣言で「UTF-8」。Windowsだろうが半角は3バイトで保存するので注意。<？/DD/DL>
<？DLDT>   enter<？/DTDD>                      改行の宣言で「LF」。Windowsだろうが改行は1バイトで保存するので注意。<？/DD/DL>
<？DLDT>   tab<？/DTDD>                        タブインデントの宣言で半角スペース「4」。フォント「kan5x5comic」の半角と全角の幅の比率は約5:3(1024:624)なので注意。<？/DD/DL>
<？DLDT>   program<？/DTDD>                    「L:Tsv」ファイルをどの様に扱うかを表す規格名(プログラム名)を記述。例えば「LTsv_doc」では「LTsv_doc.py」。<？/DD/DL>
<？DLDT>   1st<？/DTDD>                        「L:Tsv」自体を何かのスクリプトとして実行する場合に最初に実行するページ指定を想定。例えば「LTsv_doc」では「LTsv_doc_tsv」など。<？/DD/DL>
<？DLDT>   LTsvver<？/DTDD>                    構文解析パーサのバージョン。「LTsv_file.py」の「LTsv_file_ver()」。<？/DD/DL>
<？DLDT>   modify <？/DTDD>                    「L:Tsv」ファイルの更新日時。「LTsv_time.py」の「LTsv_getdaytimestr(overhour=24,diffminute=0)」を想定。「LTsv_file.py」で「LTsv_savefile()」上書き時に更新。<？/DD/DL>
<？DLDT>  |L:Tsv]<？/DTDD>                    メタタグ「L:Tsv」を閉じます。<？contents01-1:tagsplit><？/DD/DL>
<？P>
「L:Tsv」のメタタグは「LTsv_newfile()」関数でも作成可能。「<？index03-0>」も参考。<？BR><？/P>
|<＃contents01-1>]
[<？contents01-1:tagsplit>|
.*	タグで区切る事で１つのファイルに複数のCSVやLTSVやTXTといったページを格納できます。
|<？contents01-1:tagsplit>]

[<？section02-0>*<？section02-1>|
.+\.html?	<section>@E <h3><a name="index02-@c"><？title02-@c></a></h3>@E<＃contents02-@c>@E</section>@E
.*	@E<？title02-@c>@E@E<＃contents02-@c>@E
|<？section02-0>*<？section02-1>]

[<＃contents02-0>|
<？P> 「<？https02:LTsv_printf.py>」はPythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。<？BR>
 ・Wine上DOSのエラー要因だった<？CP932>などに変換させる事で範囲内の漢字が扱えるようになります。<？BR>
 ・変換できない文字は数値文字参照に変換されます。<？BR>
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。<？BR>
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。<？BR><？/P>

<！LTsv_printf.py>
|<＃contents02-0>]

[LTsv_printf.py|
LTsv_libc_printf(LTsv_text,LTsv_log=None)	LTsv_textの文字列をターミナル(stdout)に表示する。LTsv_logと返り値を指定する事で変数にも出力追記できる。	LTsv_textに渡す文字列は「"{0}".format(data)」みたいに事前に「str.format()」などで加工する。	扱えない文字は数値文字参照(「咖喱」が「&#21654;&#21937;」)に変換される。	「ctypes.cdll.msvcrt(MS-DOS)」は1024バイト(文字数ではなくバイト)を超える文字列を扱えない様子。
LTsv_libc_printcat(LTsv_text)	上記LTsv_libc_printfからログ保存やL:Tsvタグエスケープ処理などを取り除いたもの。
LTsv_libc_printf_type(LTsv_text,LTsv_log=None)	Python2では「<？&lt;>type 'str'<？&gt;>」Python3だと「<？&lt;>class 'bytes'<？&gt;>」のようにprintfに渡すバイナリ文字列の変数の型を表示。	LTsv_logと返り値を指定する事で変数にも出力追記できる。
LTsv_utf2xml(LTsv_text)	LTsv_textの文字列を数値文字参照に変換。
LTsv_xml2utf(LTsv_text)	LTsv_textの文字参照(数値文字参照含む)を文字列に変換。
LTsv_kanare(LTsv_before,LTsv_recase)	全角半角大文字小文字ひらがなカタカナの変換を行います。LTsv_beforeに変換する文字列、LTsv_recaseで変換辞書指定。	変換辞書LTsv_recaseのパラメータは「<？index02-1>」を参考。
LTsv_utf2ink(LTsv_text)	UTF-8をkantrayの「UTF-8点字」に変換(バイナリの点字表記)。	点字フォントが表示できる環境にないと動作確認は困難なので注意。
LTsv_ink2utf(LTsv_text)	上記「UTF-8点字」をUTF-8に戻す。	 データ破損を補完する機能はないので注意。
LTsv_subprocess(LTsv_subprocess_input="",LTsv_subprocess_shell=False)	ターミナルにコマンドを送る。実行結果も取得できる。	「LTsv_subprocess_shell=True」でgrepなどパイプライン処理のような事もできるようになるが、インジェクション脆弱性の恐れが発生するので注意。
|LTsv_printf.py]

[<＃contents02-1>|
<？DLDT>   "Hira2Kata"<？/DTDD>         ひらがなをカタカナに。<？/DD/DL>
<？DLDT>   "Kata2Hira"<？/DTDD>         カタカナをひらがなに。<？/DD/DL>
<？DLDT>   "HiraKana2SeiH"<？/DTDD>     濁音を清音に。「ぱぴぷぺぽ」と「ぱぴぷぺぽ」は「はひふへほ」に。<？/DD/DL>
<？DLDT>   "HiraKana2SeiM"<？/DTDD>     濁音を清音に。「ばびぶべぼ」は「はひふへほ」に、「ぱぴぷぺぽ」を「まみむめも」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakB"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakP"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に、「まみむめも」を「ぱぴぷぺぽ」に。<？/DD/DL>
<？DLDT>   "HiraKana2Han"<？/DTDD>      ひらがなもカタカナも半角に。<？/DD/DL>
<？DLDT>   "HiraKana2HanKaKe"<？/DTDD>  ひらがなもカタカナも「ヵヶ」も半角に。<？/DD/DL>
<？DLDT>   "Han2HiraEz"<？/DTDD>        半角をひらがなに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2KataEz"<？/DTDD>        半角をカタカナに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2Hira"<？/DTDD>          半角をひらがなに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Han2Kata"<？/DTDD>          半角をカタカナに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Alpha2BIG"<？/DTDD>         半角全角にかかわらずアルファベットを大文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2SML"<？/DTDD>         半角全角にかかわらずアルファベットを小文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2HAN"<？/DTDD>         大文字小文字にかかわらずアルファベットを半角に(キリル文字ギリシャ文字含まない)。<？/DD/DL>
<？DLDT>   "Alpha2ZENBS"<？/DTDD>       大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「＼」へ。<？/DD/DL>
<？DLDT>   "Alpha2ZENYen"<？/DTDD>      大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「￥」へ。<？/DD/DL>
|<＃contents02-1>]

[<？section03-0>|
.+\.html?	<section>@E <h3><a name="index03-@c"><？title03-@c></a></h3>@E<＃contents03-@c>@E</section>@E
.*	@E<？title03-@c>@E@E<＃contents03-@c>@E
|<？section03-0>]

[<＃contents03-0>|
<？P> 「<？https03:LTsv_file.py>」は「L;Tsv」ファイルの基本的な読み書きモジュールです。
 ・「LTsv10kanedit(tsvtool10)」の本編です。主に「L:Tsv」の読み書きです。<？BR>
 ・Python2とPython3のテキストファイル読み込み方法の違いを吸収する手段にも使えます。<？BR>
 ・modify項目で「LTsv_getdaytimestr()」を使うので「LTsv_time.py」モジュールも必要。<？BR><？/P>

<！LTsv_file.py>
|<＃contents03-0>]

[LTsv_file.py|
LTsv_newfile(LTsv_program,LTsv_default=None)	「L:Tsv」ファイルを変数上に作成する。	 LTsv_programには「L:Tsv」ファイルを扱うプログラムまたは規格を記述。	LTsv_defaultには「L:Tsv」ファイル自体をスクリプトとして実行する場合の1stページの指定。	メタタグについては「<？index01-1>」も参考。
LTsv_download(LTsv_url,LTsv_path,LTsv_reporthook=None)	ネット上のLTsv_urlにあるファイルをローカルのLTsv_pathに保存する。	ダウンロード中にLTsv_reporthook(count,blocksize,totalsize)をコールバックして状況報告させる事は可能(スレッド関係の扱いに注意)。
LTsv_zipload(LTsv_zip,LTsv_name,LTsv_path)	ローカル上のLTsv_zipにあるファイルをローカルのLTsv_pathに解凍する。
LTsv_64load(LTsv_path,LTsv_codewidth=128)	
LTsv_loadfile(LTsv_path,LTsv_encoding="utf-8",LTsv_default=None)	ローカル上のLTsv_pathから「L:Tsv」ファイルを読み込む。	LTsv_encodingにテキストのコード指定。例えば<？CP932>を読み込むときは「LTsv_encoding="cp932"」が必要。	LTsv_defaultは読み込みできなかった場合の初期値を指定。
LTsv_readlinepages(LTsv_text)	LTsv_textテキスト内のタグ「[tag<？&#x7C;>」一覧を1行のLTSVとして取得する。
LTsv_getpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれた範囲のLTSVページを取得。	LTsv_default(LTsv_page)はページを取得できなかった場合の初期値を指定。
LTsv_readlinedeno(LTsv_text)	LTSVページの行数を数える。LTsv_textに改行が無くても1行とみなす。	LTsv_textの文字列長が0の場合0を返す。
LTsv_readlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	0から数えた行数でLTSVページから1行読み込む。	LTsv_default(LTsv_line)は読み込めなかった場合の初期値を指定。
LTsv_readlinefirsts(LTsv_text)	LTSVページのfirst(縦軸ラベル)一覧を1行のLTSVとして取得。
LTsv_readlinerest(LTsv_text,LTsv_first,LTsv_default=None)	LTSVページからfirst(縦軸ラベル)指定で先頭以下データrestを1行読み込む。first(縦軸ラベル)の取得にはタブ文字が必要。	LTsv_default(LTsv_rest)はrestが読み込めなかった場合の初期値を指定。
LTsv_pickdatadeno(LTsv_line)	1行のLTSVに含まれるデータ個数を取得(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_pickdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVから0から数えた項目数指定で1個読み込む(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_split_label_data(LTsv_labeldata,LTsv_seldata=True)	「label:data」からlabelかdataのどちらかを取得。LTsv_seldataがTrueならdata部分を、Falseならlabel部分を返す。
LTsv_pickdatas(LTsv_line,LTsv_dataL=0,LTsv_dataR=0)	1行のLTSVから0から数えた項目数指定で範囲内の複数データを読み込む(firstも0個目のデータとみなす)。いわゆるスライス操作。	LTsv_dataLとLTsv_dataRが逆(Tsv_dataRの方が小さい)の場合でも関数内で自動的に並び替える。	LTsv_dataLとLTsv_dataRが同じ場合差分が無いので読み込まない。
LTsv_pickdatafind(LTsv_line,LTsv_find)	LTsv_findが1行のLTSVの何項目にデータがあるか0から数える(firstも0個目のデータとみなす)。
LTsv_joindatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にLTsv_default(LTsv_data)を追加する。	LTsv_datanumが0以下の場合先頭firstに追加。項目数以上の場合末尾に追加。	省略もしくは文字列長0の場合は何もしない。
LTsv_setdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にデータLTsv_default(LTsv_data)を上書する。	負数の場合や項目数以上の場合は何もしない。	 LTsv_default(LTsv_data)を省略もしくは文字列長0のデータの場合は項目を削除。
LTsv_pickdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVから「label:data」形式の横軸ラベル(LTsv_label)指定で1個読み込む。	LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。
LTsv_pickdic(LTsv_text,LTsv_first,LTsv_label)	「LTsv_readlinerest()」と「LTsv_pickdatalabel()」をひとまとめに。<？DICchar>読込用途。	first(縦軸ラベル)で指定行、restの横軸ラベル(LTsv_label)で指定列、データ1個を読み込む。
LTsv_setdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVの「label:data」形式横軸ベル(LTsv_label)項指定でデータLTsv_default(LTsv_data)を上書する。	元LTSVに存在しない横軸ラベル(LTsv_label)の場合末尾に追加。	LTsv_default(LTsv_data)を省略した場合に項目はラベルごと削除。	文字列長0のデータLTsv_default(LTsv_data)であっても省略しなかった場合は横軸ラベル項目を追加もしくは上書き。	上記LTsv_joindatanumやLTsv_setdatanumと事なりLTsv_setdatalabelでは「label:」が単独で存在(文字列0の「data」が存在できる)違いがあるので注意。
LTsv_sievelabels(LTsv_rest,LTsv_labels="")	データそのままにラベルを取り替える。	文字列0の「data」(データ数よりラベル数が多い場合を想定)は項目が消えるので注意。
LTsv_sievetuplelabels(LTsv_rest,*LTsv_labels)	「LTsv_sievelabels()」とほぼ同じだが、LTsv_labelがLTSVではなくタプル。
LTsv_pushlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を追加する。	1行追加想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は何もしない。
LTsv_overlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を上書する。	1行上書想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は1行削除。
LTsv_pushlinerest(LTsv_page,LTsv_first,LTsv_default=None)	LTSVページにfirst(縦軸ラベル)指定でFirstにrest(LTsv_default)を追加する。	LTsv_page内にLTsv_firstが存在しない場合LTsv_page末尾に追加。	LTsv_rest(LTsv_default)を省略した場合に項目を削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。	文字列長0のrestデータでも縦軸ラベルfirst(縦軸ラベル)の末尾にはタブ文字が付加(「first\t\n」)。
LTsv_putpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれたLTSVページとしてLTsv_default(LTsv_page)を上書き。	LTsv_text内にLTsv_tagタグが存在しない場合末尾に追加。タグ名が文字列長0の場合は何もしない。	LTsv_page(LTsv_default)を省略の場合はページ削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。
LTsv_putmodify(LTsv_text)	メタタグ「L:Tsv」の「modify」の更新のみを行う。「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールが必要。	「LTsv_newfile()」や「LTsv_savefile()」実行時と「LTsv_putmodify()」の時間はズレる場合がある事に注意。
LTsv_savedir(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が1個フォルダを必要とする場合、1個フォルダを作成する。	「os.mkdir()」を使うので、一気に深い階層のフォルダを作ろうとするとエラーになる。	「LTsv_savefile()」「LTsv_saveplain()」の内部で使用。
LTsv_savedirs(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が複数のフォルダを必要とする場合、複数のフォルダを作成する。	「os.makedirs()」を使って一気に深い階層のフォルダを作れてしまうので取扱い注意。
LTsv_savefile(LTsv_path,LTsv_default=None)	ローカルのLTsv_pathに「L:Tsv」ファイル、LTsv_default(LTsv_text)を書き込む。ファイル保存時にメタタグ「L:Tsv」の「modify」の更新。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成。	LTsv_default(LTsv_text)を省略の場合はファイル削除(フォルダはそのまま)。
LTsv_saveplain(LTsv_path,LTsv_plain)	ローカルのLTsv_pathにテキストファイルLTsv_plainを(LTsv_text)書き込む。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。
LTsv_labelzip(LTsv_labels,LTsv_datas)	LTsv_labelsを横軸ラベル、LTsv_datasをデータとして、	「label/tlabel/t…」と「data/tdata/t…」を1行のLTSV「label:data/tlabel:data/t…」に束ねる。
LTsv_unziplabel(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からラベルだけを取り出して「label/tlabel/t…」に。
LTsv_unzipdata(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からデータだけを取り出して「data/tdata/t…」に。
LTsv_unziplabelsdata(LTsv_line,LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはtsv形式。
LTsv_unziptuplelabelsdata(LTsv_line,*LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはPythonのタプル形式。
LTsv_tuple2tsv(LTsv_tuple)	Pythonのタプルやリストをtsvに。	forループよりjoin使った方が速い的なPythonあるある。
LTsv_tsv2list(LTsv_line,LTsv_len=None)	tsvをPythonのリストに。	左辺でunpackする場合受けとる変数の個数をLTsv_lenで指定。	LTsv_lenがデータ数より多い場合は0文字列が補完される。
LTsv_tsv2tuple(LTsv_line,LTsv_len=None)	「LTsv_tsv2list()」のタプルバージョン。
LTsv_label2dictint(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは数値化。	複数行あっても1つのLTSVとみなす。
LTsv_label2dictstr(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは文字列化。	複数行あっても1つのLTSVとみなす。
LTsv_dict2label(LTsv_dict)	Pythonの辞書「{"label":data,"label":data,…}」をLTSV「label:data/tlabel:data/t…」に。dataは文字列化。
LTsv_file_ver()	「LTsv_file.py」のバージョン表示(<！L:TsvLTsvver>)。
LTsv_issue()	「/etc/issue」を開いてLinuxのディストリビューションの種類を探る。バージョンの確認方法はディストリ毎に異なる予感。
|LTsv_file.py]

[<？section04-0>*<？section04-1>|
.+\.html?	<section>@E <h3><a name="index04-@c"><？title04-@c></a></h3>@E<＃contents04-@c>@E</section>@E
.*	@E<？title04-@c>@E@E<＃contents04-@c>@E
|<？section04-0>*<？section04-1>]

[<＃contents04-0>|
<？P> 「<？https04:LTsv_time.py>」は日時フォーマットモジュールです。FPSも扱います。徹夜日時という概念があります。<？BR>
 ・とりあえず日時を取得する場合は「LTsv_getdaytimestr(overhour=24,diffminute=0)」で。<？BR>
 ・<？modify_style>だと困るのであればフォーマット指定。<？BR>
 ・徹夜日時とは正子(夜中の午前0時)を24時として日付を切り替えずに25時(夜中の1時)、26時(夜中の2時)…と時だけが過ぎる状態です。<？BR>
 ・ISOカレンダーの週はISO8601の1月4日を含む週(最初の木曜日を含む週)を第1週と数える方法。曜日は月曜から始まるので土日は週末。ISOカレンダーの曜は月曜が1で土曜が6、日曜が7。<？BR>
 ・単体風テストでは複数の日時フォーマットを用いて関数群の挙動確認ができます。<？BR><？/P>

<！LTsv_time.py>
|<＃contents04-0>]

[LTsv_time.py|
LTsv_yearleap(LTsv_toyear)	閏年ならTrue。
LTsv_yearweeks(LTsv_toyear)	一年の間に週(ISOカレンダーの週)が何回あるか、年間の週数52〜53を返す。
LTsv_monthleap(LTsv_toyear,LTsv_tomonth)	一月の間に日が何回あるか、28〜31を返す。閏年なら2月は29日。
LTsv_beat864(LTsv_tohour,LTsv_tominute,LTsv_tosecond)	(LTsv_Beat,LTsv_BeatInteger,LTsv_BeatPoint)のタプルを返す。	LTsv_Beatは1日の秒数0?86399(86400)。@Beatはその秒数を86.4で割った一日を1000分割する数。	LTsv_BeatIntegerは@Beatの整数部分。LTsv_BeatPointは@Beatの小数部分。
LTsv_intstr0x(LTsv_code)	"0xff","$80"のように16進数っぽいものは16進数で数値に、そうでないものは10進数と思ってint変換。	try節で囲む手間を省きたい場合に便利。
LTsv_settimerCounter(counter=None)	LTsv_timerCounter「@c」の値を設定する(取得のみも可能)。
LTsv_checkFPS()	LTsv_checkFPS()自身を1秒間に何回実行できるか計測。0〜999の範囲。
LTsv_setdaytimeshift()	日時フォーマット用の日時変数(LTsv_meridian_nowなど)を再計算する。	通常は「LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()」から呼び出される内部関数。
LTsv_setdaytimeoption(overhour=None,diffminute=None)	LTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定。	LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()にも同等機能のオプションがある。
LTsv_putdaytimenow(overhour=None,diffminute=None)	現在時刻を「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimeearlier(overhour=None,diffminute=None)	最後に実行された「LTsv_putdaytimenow()」の時刻「LTsv_earlier_now」を再度「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimespecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None,overhour=None,diffminute=None)	日時を指定して「LTsv_meridian_now」に格納。省略(Noneを代入)した項目は現在時刻などが代入。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimemodify(LTsv_path,overhour=None,diffminute=None)	ファイルLTsv_pathの更新時刻タイムスタンプをLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。	OSやファイルシステム毎に秒や分の精度に違いがあると思う。
LTsv_putdaytimever(LTsv_verstr,overhour=None,diffminute=None)	「LTsv_time_ver()」などの<？modify_style>をLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_getdaytimestr(timeformat=None,overhour=None,diffminute=None)	日付フォーマットtimeformatを各種日時変数で置換する。	timeformatのデフォルト値は「@000y@0m@0dm@wdec@0h@0n@0s」。	日付フォーマットの概要は「<？index04-1>」を参照。
LTsv_settimershift()	日時フォーマット用のタイマー変数(LTsv_lap_nowなど)を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_settimershiftoption()	LTsv_start_nowとLTsv_goal_nowの差分を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_puttimerstartgoal(microsecond=None,millisecond=None,seconds=None,minute=None,hour=None,day=None)	タイマーのLTsv_goal_nowを数秒後(seconds)・数分後(minute)・数時間後(hour)・数日後(day)などいずれかに設定する。	例えば三分後を指定する場合「LTsv_puttimerstartgoal(minute=3)」と入力。	複数のパラメータを同時指定した場合、例えば分と秒なら秒優先というように細かい方の単位が採用される(内部ではmicrosecondで計算)。
LTsv_puttimerspecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None)	タイマーのLTsv_goal_nowを日時指定。省略(Noneを代入)した項目は現在時刻などが代入。
LTsv_puttimerlap()	タイマーの経過時間をLTsv_passed_TotalSecondsに、残り時間をLTsv_timeleft_TotalSecondsに設定する。各種タイマー変数も計算。
LTsv_gettimerstr(timeformat=None)	日付フォーマットtimeformatを各種タイマー変数で置換する。	timeformatのデフォルト値は「@0h@0n@0s.0Rs」。時間フォーマットの概要は「<？index04-1>」を参照。
|LTsv_time.py]

[<＃contents04-1>|
<？P> 0.「@」で始まるキーワードが年月日等に置換される仕組み。「@」を表示する場合は「@@」と表記。<？BR>
 1.日付フォーマット(daytime系)では、小文字が現在時刻(meridian)、大文字が徹夜日時(allnight)です。分以下・Beat・timer系に徹夜日時はありません。<？BR>
 2.時間フォーマット(timer系)では、小文字が現在時刻(lap)、大文字が曲や動画などの長さ(limit)、「-」が先頭でタイマーの残り時間(timeleft)です。<？BR>
 3.分(miNute)は「n」で代用して月(Month)との変数名衝突防止してます。ミリ秒は「L」(miLlisecond)。マイクロ秒は「R」(micRoSecond)。<？BR>
 4.「_」(アンダースコア)を先頭に入れると0が空白に。0も空白も省くと数値は可変長。<？BR>
 5.月で「JFCAMNLUSOND」表記が使えます。曜で「UMTWRFS」表記が使えます。末尾に「ec」で英語1文字。末尾「j」で日本語表記。<？BR>
 5.日時の月,週,時,分,秒で2桁以下の数値項目の場合、末尾に「z」で１,２,３,４,５,６,７,８,９,10,11,12といった1桁の時全角数値の表現が可能。<？BR>
<？/P>
<？DLDT> 年=@yzj,@yzc,@0yz,@_yz,@yz,@0yd,@_yd,@yd,@0yw,@_yw,@yw,@000yi,@___yi,@4yi,@0yi,@_yi,@2yi,@yi,@000y,@___y,@4y,@0y,@_y,@2y,@y,@Yzj,@Yzc,@0Yz,@_Yz,@Yz,@0Yd,@_Yd,@Yd,@0Yw,@_Yw,@Yw,@000Yi,@___Yi,@4Yi,@0Yi,@_Yi,@2Yi,@Yi,@000Y,@___Y,@4Y,@0Y,@_Y,@2Y,@Y<？/DTDD>
  000y,___y,4y系は4桁の年(Year)。000y,___y,4y系は2桁の年(Yearlower)。<？BR>
  yz系は干支(YearZodiac)。@yzjで鼠,牛,虎,兎,龍,蛇,馬,羊,猿,鶏,犬,猪。@yzcで子,丑,寅,卯,辰,巳,午,未,申,酉,戌,亥<？BR>
  yi系はISOカレンダーの年(YearIso)。第1週に突入した時点で年が明けるので、年末年始の間は西暦カレンダーの年とズレる場合があります。<？BR>
  ywi系は年間の週数(YearWeeksIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。<？BR>
  yd系は年間の日数(YearDays)。年間約365〜366日。閏年の時に1日増える。<？BR><？/DD/DL>

<？DLDT> 月=@0md,@_md,@md,@mec,@mes,@mel,@_mel,@meh,@_meh,@mjiz,@_mjiz,@mj,@_mj,@0m,@_m,@mz,@m,@0Md,@_Md,@Md,@Mec,@Mes,@Mel,@_Mel,@Meh,@_Meh,@Mjiz,@_Mjiz,@Mj,@_Mj,@0M,@_M,@Mz,@M<？/DTDD>
  m系は月の数値(Month)。1?12。<？BR>
  me系は月の英語表記。末尾「c」で一文字(JFCAMNLUSOND)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。<？BR>
   (January,February,marCh,April,May,juNe,juLy,aUgust,September,October,November,December)<？BR>
  mj系は神無月、mjiz系は神有月(睦月,如月,弥生,卯月,皐月,水無月,文月,葉月,長月,神有月,霜月,師走)表記の旧暦の月名。<？BR>
  md系は月間の日数(MonthDays)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。<？BR><？/DD/DL>

<？DLDT> 週=@0wnyi,@_wnyi,@wnyiz,@wnyi,@0Wnyi,@_Wnyi,@Wnyiz,@Wnyi,@0wnm,@_wnm,@wnmz,@wnm,@0Wnm,@_Wnm,@Wnmz,@Wnm<？/DTDD>
  wnyi系はISOカレンダーの週番号(WeekNumberYearIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。<？BR>
  wnm系は月毎の曜番号(WeekNumberMonth)。月間約4?5回。単純に月内の日数を7で割った数。<？BR><？/DD/DL>

<？DLDT> 曜=@wdj,@wdec,@wdes,@wdel,@_wdel,@wdeh,@_wdeh,@wdi,@wd,@Wdj,@Wdec,@Wdes,@Wdel,@_Wdel,@Wdeh,@_Wdeh,@Wdi,@Wd<？/DTDD>
  wd系は曜の数値(WeekDay)。月曜が0で土曜が5、日曜が6。<？BR>
  we系は曜の英語表記。末尾「c」で一文字(MTWRFSU)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。<？BR>
   (Monday,Tuesday,Wednesday,thuRsday,Friday,Saturday,sUnday)<？BR>
  wj系は月火水木金土日。<？BR>
  wdi系はISOカレンダー曜日の数値(WeekDayIso)。月曜が1で土曜が6、日曜が7。<？BR><？/DD/DL>

<？DLDT> 日(日付)=@0dm,@_dm,@dmz,@dm,@0dy,@_dy,@dy,@0Dm,@_Dm,@Dmz,@Dm,@0Dy,@_Dy,@Dy<？/DTDD>
 日(時間)=@000d,@___d,@00d,@__d,@0d,@_d,@d,@-000d,@-___d,@-00d,@-__d,@-0d,@-_d,@-d,@000D,@___D,@00D,@__D,@0D,@_D,@D<？BR>
  dm系は月換算の日数(DayMonth)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。<？BR>
  dy系は年換算の日数(DayYear)。年間約365〜366日。閏年の時に1日増える。<？BR>
  時間フォーマット(timer系)では日は4桁まで使えます。<？BR><？/DD/DL>

<？DLDT> 時(日付)=@apj,@apel,@apeu,@ap,@Apj,@Apel,@Apeu,@Ap,@0hap,@_hap,@hapz,@hap,@0h,@_h,@hz,@h,@0H,@_H,@Hz,@H<？/DTDD>
 時(時間)=@0dh,@_dh,@dh,@-0dh,@-_dh,@-dh,@0Dh,@_Dh,@Dh,@0h,@_h,@h,@-0h,@-_h,@-h,@0H,@_H,@H<？BR>
  h系は時の数値(Hour)。1?24。大文字の「H」を使うと徹夜日時を表示(overhour)。1〜48。<？BR>
  hap系は午前午後表記の数値(HourAP)。1〜12。<？BR>
  apj系は午前午後徹夜表記。大文字の「A」を使うと徹夜日時を表示(overhour)。36時を過ぎようが徹夜日時の時は「徹夜」と表示される。<？BR>
  ape系はam,pm,al表記。大文字の「A」を使うと徹夜日時を表示(overhour)。末尾「l」で小文字、末尾「u」で大文字。<？BR>
  ap系は午前午後を0,1で。大文字の「A」を使うと午前午後徹夜を0,1,2で。何を言ってるか分からないだろうがoverhourの設定次第では昼の12時だろうが徹夜と表示。<？BR>
  午前午後徹夜は時間フォーマット(timer系)には存在しません。<？BR><？/DD/DL>

<？DLDT> 分(日付)=@0n,@_n,@nz,@n,@0N,@_N,@Nz,@N<？/DTDD>
 分(時間)=@0n,@_n,@n,@-0n,@-_n,@-n,@0N,@_N,@N<？BR>
  n系は分(miNute)。0〜59。<？BR><？/DD/DL>

<？DLDT> 秒(日付)=@0s,@_s,@sz,@s,@0S,@_S,@Sz,@S,@0ls,@_ls,@ls,@0rs,@_rs,@rs,@0Ls,@_Ls,@Ls,@0Rs,@_Rs,@Rs<？BR>
 秒(時間)=@0s,@_s,@s,@-0s,@-_s,@-s,@0S,@_S,@S,@0ls,@_ls,@ls,@-0ls,@-_ls,@-ls,@0Ls,@_Ls,@Ls,@0rs,@_rs,@rs,@-0rs,@-_rs,@-rs,@0Rs,@_Rs,@Rs<？/DTDD>
  s系は秒(Second)。0〜59。<？BR>
  ls系はミリ秒(miLlisecond)。ミリ秒は3桁、0〜999。<？BR>
  rs系はマイクロ秒(micRoSecond)。マイクロ秒は6桁、0〜999999。<？BR><？/DD/DL>

<？DLDT> @Beat(日付)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@bt<？/DTDD>
 @Beat(時間)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@0bt,@_bt,@bt,@-0bti,@-_bti,@-bti,@-0btp,@-_btp,@-btp,@-0bt,@-_bt,@-bt,@0Bti,@_Bti,@Bti,@0Btp,@_Btp,@Btp,@0Bt,@_Bt,@Bt<？/DTDD>
  bt系はビート(Beat)の途中計算。1日の秒数0〜86399(86400)をそのまま表示。本当のビートは86.4秒。<？BR>
  bti系はビートの整数部分(BeatInteger)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。<？BR>
  btp系はビートの小数部分(BeatPoint)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。<？BR>
  時間フォーマット(timer系)としてビートを用いる場合時差は関係無し。<？BR><？/DD/DL>

<？DLDT> 正負符号(時間)=@+-,@_-,@--<？/DTDD>
  LTsv_lap_nowがLTsv_goal_nowを通りすぎた、いわゆるタイムオーバーの時はLTsv_lap_nowが負の数に。<？BR>
  @+-はプラスマイナス両方表示。<？BR>
  @_-はプラスの時は空白を表示。<？BR>
  @--はマイナスのみ表示。プラスの時は一文字詰める。<？BR><？/DD/DL>

<？DLDT> @c(カウンター)=@000c,@00c,@0c,@c<？/DTDD>
  「LTsv_getdaytimestr()」もしくは「LTsv_gettimerstr()」が実行される度にカウンター(LTsv_timerCounter)が加算される。<？BR>
  カウンターの値を変更は「LTsv_settimerCounter()」。<？BR><？/DD/DL>

<？DLDT> その他エスケープ文字<？/DTDD>
  @T=\t。タブ文字用。<？BR>
  @E=\n。改行文字用。<？BR>
  @Z=\0。文字列長0用。<？BR><？/DD/DL>
|<＃contents04-1>]

[<？section05-0>*<？section05-1>|
.+\.html?	<section>@E <h3><a name="index05-@c"><？title05-@c></a></h3>@E<＃contents05-@c>@E</section>@E
.*	@E<？title05-@c>@E@E<＃contents05-@c>@E
|<？section05-0>*<？section05-1>]

[<＃contents05-0>|
<？P> 「<？https05:LTsv_calc.py>」は電卓フォーマットモジュールです。分数計算を扱います。電卓フォーマットの概要は「<？index05-1>」を参照。<？BR>
 ・「LTsv_calc()」に電卓フォーマットの計算式を渡すと分数が帰ってきます。通分できない分数の場合小数が帰ってきます。<？BR>
 ・単体風テストでは複数の電卓フォーマットを用いて関数群の挙動確認ができます。<？BR><？/P>

<！LTsv_calc.py>
|<＃contents05-0>]

[LTsv_calc.py|
LTsv_calc_GCM(LTsv_calcL,LTsv_calcR)	最大公約数。
LTsv_calc_LCM(LTsv_calcL,LTsv_calcR)	最小公倍数。
LTsv_calc_bracketsbalance(LTsv_calcQbase)	左右の括弧の数を合わせる。ついでに演算子の整理整頓など。
LTsv_calc_decimalize(LTsv_calcQbase)	分数を小数に。
LTsv_calc_fractalize(LTsv_calcQbase)	小数を分数に。
LTsv_calc(LTsv_calcQbase)	電卓フォーマットを入力すると分数計算。「1/3⇔1|3」と分数に計算。	LTsv_calc自体は主に括弧の正規表現による検索。括弧の内側を「LTsv_calc_function()」に渡す。	電卓フォーマットの概要は「<？index05-1>」を参照。
LTsv_calc_function(LTsv_calcQbase)	主に数列和・数列積などの計算。「Σ(数列和)」などの左側を「LTsv_calc_addition()」に渡す。
LTsv_calc_addition(LTsv_calcQbase,LTsv_Count)	主に分数の加算減算。分数の積割処理で「LTsv_calc_addition()」を呼び出す。
LTsv_calc_multiplication(LTsv_calcQbase)	主に分数の積(分数の割り算含む)。小数排除処理で「LTsv_calc_fractalize()」呼び出す。
|LTsv_calc.py]

[<＃contents05-1>|
<？P> 分数「|」と割り算「/」を別物として扱います。分数の入れ子は「2|3|5|7⇔2|105」のように分母にまとめられます。<？BR>
 通常は分数で計算するので「1/3⇔1|3」「1|3*3⇔1」になり一般的な電卓のように「0.999999999999」などにはならない。<？BR>
 分数内で小数が使用可能です。「0.5|3.5⇔1|7」の様に小数が混在してても分数に変換します。<？BR>
 加算「+」減算「-」と区別して表現できます。「1-(-2)」と括弧を使わなくても「1-m2⇔3|1」のようにマイナスで引くといった表現が可能。<？BR>
 数列計算のカウント変数「c」は整数です。初期値は+1で増減は±1です。カウント変数に代入する過程で整数変換が発生するので注意。括弧の内外で別カウントになるので要注意。<？BR>
 「(c+2)(c+1)」のように括弧間の演算子が省略された場合には(c+2)*(c+1)⇔6|1」のように掛け算を適用します。<？BR>
 Pythonには整数有効計算範囲の概念は存在しないはずですが、小数計算ではPythonの実装・環境に応じた丸め誤差などが発生します。<？BR>
 0で割るなどの計算できない場合は無限エラー扱いにして「n|0」と表示します。実際の無限には正負の概念が存在しますが電卓フォーマットの「n|0」は単に計算放棄です。<？BR><？/P>

<？index05:number>
<？DLDT>  012456789 １２３４５６７８９０<？/DTDD>    アラビア数字は全角でも使用できます。<？/DD/DL>
<？DLDT>  〇一二三四五六七八九<？/DTDD>              漢数字も使用できます。大字も「壱弐参肆伍陸漆捌玖零陌阡萬」が使用可能です。<？/DD/DL>
<？DLDT>  垓京兆億万千百十 銭<？/DTDD>               漢数字の万単位の繰り上がりも垓までとりあえず対応しています。銭は百分の一になります。<？/DD/DL>

<？index05:‎operator>
<？DLDT>   . ．      小円<？/DTDD>                    小数点は「3.1416⇔3927|1250」の様にドットを使います。「円」は「3円14銭」のような表現用途。<？/DD/DL>
<？DLDT>  | ｜      分<？/DTDD>                      分数を表します。分数中の小数は「0.5|3⇔1|6」のように通分されます。<？/DD/DL>
<？DLDT>  p PｐＰ   正<？/DTDD>                      正の数を表現。符号が付加されてなければ0以上の数です。<？/DD/DL>
<？DLDT>  m MｍＭ   負<？/DTDD>                      負の数を表現できます。「2-m1⇔3|1」のように負の数で引き算すると加算されます。<？/DD/DL>
<？DLDT>  + ＋      加足和<？/DTDD>                  足し算をします。計算結果は「1|6+1|3⇔1|2」のように通分されます。<？/DD/DL>
<？DLDT><？/DTDD><？/DD/DL>
<？DLDT>  - －      減引差<？/DTDD>                  引き算をします。計算結果は「3|4-1|4⇔1|2」のように通分されます。<？/DD/DL>
<？DLDT>  * ×      乗掛積<？/DTDD>                  掛け算をします。計算結果は「2|3*3|4⇔1|2」のように通分されます。<？/DD/DL>
<？DLDT>  / ／÷    除割商<？/DTDD>                  割り算をします。計算結果は「2|5/4|5⇔1|2」のように通分されます。<？/DD/DL>
<？DLDT>  \ ＼<？/DTDD>                              整数未満を切り捨てる割り算をします。計算結果は「7\3⇔2」のように小数以下は切り捨てられます。<？/DD/DL>
<？DLDT>  # ＃      余<？/DTDD>                      割り算の余りを求めます。「3|2#1|3⇔1|6」のように分数も使えます。<？/DD/DL>
<？DLDT>  L lＬｌ   倍 <？/DTDD>                     最小公倍数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。<？/DD/DL>
<？DLDT>  G gＧｇ   約<？/DTDD>                      最大公約数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。<？/DD/DL>
<？DLDT>  % ％      率<？/DTDD>                      消費税などの計算用。「10000+8%⇔10800|1」のように「10000×1.08⇔10800|1」と小数計算の手間簡略化。<？/DD/DL>
<？DLDT>  y π      周<？/DTDD>                       円周率。math.pi(約3.14159265359)が代入される。桁数はおそらくPython環境依存。<？/DD/DL>
<？DLDT>  e ｅ      底<？/DTDD>                      ネイピア数。math.e(約2.71828182846)が代入される。桁数はおそらくPython環境依存。<？/DD/DL>

<？index05:bracket>
<？DLDT>  ()（）<？/DTDD>                            括弧の中を先に計算する「3(c+1)→3×(c+1)→3×(1+1)→3×2」。もしくは数列の表現にも使用。<？/DD/DL>
<？DLDT>  c CＣｃ   数<？/DTDD>                      数列内で有効なカウント変数。括弧の内外で異なる数列を数えるので注意。初期値は「1」。<？/DD/DL>
<？DLDT>  S SｓＳΣ 列但※<？/DTDD>                   数列和。「(cΣ1～5)→1＋2＋3＋4＋5」といった等差数列の和を想定。<？/DD/DL>
<？DLDT>  ! ！      方<？/DTDD>                      数列積。「(2!1～4)→2×2×2×2」のような乗数や「(c!1～5)→1×2×3×4×5」のような階乗を想定。<？/DD/DL>
<？DLDT>  ~ ～      ?<？/DTDD>                       数列和(もしくは数列積)の範囲指定。「(cΣ1~4)→1＋2＋3＋4」「(c!4～1)→4×3×2×1」と増減±1の計算は自動。<？/DD/DL>

<？index05:nonuse>
<？DLDT>  n NｎＮ∞ 無<？/DTDD>                      0で割った時など計算"できない"事を表す「n|0」と同じ。本当の無限には正負などがあるが、単純に未定というか計算放棄。<？/DD/DL>
<？DLDT>  ,  <？/DTDD>                               「10,800⇔10800|1」とコンマ無しの計算結果を帰します。使用でき無い他の演算子もだいたいコンマ扱いです。<？/DD/DL>
<？DLDT>  √<？/DTDD>                                平方根に使う予定の演算子。分数電卓なので無理数などの扱いに困ってる。<？/DD/DL>
|<＃contents05-1>]

[<？index05:number>|
.+\.html?	<h4><？title05:number></h4>
.*	 <？title05:number>
|<？index05:number>]
[<？title05:number>|
.*	使用できる数字
|<？title05:number>]
[<？index05:‎operator>|
.+\.html?	<h4><？title05:‎operator></h4>
.*	 <？title05:‎operator>
|<？index05:‎operator>]
[<？title05:‎operator>|
.*	使用できる演算子
|<？title05:‎operator>]
[<？index05:bracket>|
.+\.html?	<h4><？title05:bracket></h4>
.*	 <？title05:bracket>
|<？index05:bracket>]
[<？title05:bracket>|
.*	括弧および関数用途の演算子
|<？title05:bracket>]
[<？index05:nonuse>|
.+\.html?	<h4><？title05:nonuse></h4>
.*	 <？title05:nonuse>
|<？index05:nonuse>]
[<？title05:nonuse>|
.*	未実装等で使用できない演算子
|<？title05:nonuse>]

[<？section06-0>*<？section06-1>*<？section06-2>|
.+\.html?	<section>@E <h3><a name="index06-@c"><？title06-@c></a></h3>@E<＃contents06-@c>@E</section>@E
.*	@E<？title06-@c>@E@E<＃contents06-@c>@E
|<？section06-0>*<？section06-1>*<？section06-2>]

[<＃contents06-0>|
<？P> 「<？https06:LTsv_joy.py>」は<？gamepad>の入力をLTSVに変換するモジュールです。<？BR>
 ・WindowsでもPOVをPxPyの2軸として扱います。極座標変換は「LTsv_atanscalar()」と「LTsv_atanclock()」。<？BR>
 ・単体風テストで<？gamepad>の挙動確認ができます。「<？https08:LTsv_gui.py>」でも挙動確認はできます。<？BR><？/P>
 
<！LTsv_joy.py>
|<＃contents06-0>]

[LTsv_joy.py|
LTsv_joyreset(LTsv_tsvpath)	「LTsv_joy.tsv」からモジュールの初期設定を読み込む。詳細は「<？index06-1>」。
LTsv_joyexit()	<？gamepad>の変数初期化です。Linuxではデバイスをクローズします。
LTsv_joyinit(LTsv_tsvpath="LTsv/LTsv_joy.tsv")	<？gamepad>の準備です。Linuxではデバイスをオープンします。	「LTsv_joyinit()」のタイミングで<？gamepad>ので個数を受けとる。	0を受け取った場合<？gamepad>を見つけれてない状態。
LTsv_setjoydata(LTsv_joyid,LTsv_default=None)	スティック(axisW/axisL)とボタン(button)の状態を読み込む。	axisリストとbuttonリストのタプルで返り値も受け取れる。
LTsv_getjoystr(LTsv_joyid,joyformat=None)	スティックとボタンの状態を<？joyformat_label>のrestへLTSVで返す。	LTsv_joyidには<？gamepad>の番号を指定。	項目一覧の詳細は「<？index06-2>」。
LTsv_atanscalar(LTsv_atanX,LTsv_atanY)	スティック(axisW/axisL)の直交座標を極座標に変換、スティックの傾きを取得します。
LTsv_atanclock(LTsv_atanX,LTsv_atanY,LTsv_labels)	ラジアン角度円周2πをLTsv_labelsのラベルに置き換え。	<？gamepad>の方角、上下左右東西南北などの表現を想定。
LTsv_joyaxis_label()	Windowsなら「axisW」を返す。Windowsなら「axisL」を返す。	「LTsv_getjoystr()」でどのaxisを取得するべきかの調査用途。
|LTsv_joy.py]

[<＃contents06-1>|
<？P> 「<？https06:LTsv_joy.tsv>」は「<？https06:LTsv_joy.py>」の設定ファイルです。<？BR><？/P>
<！LTsv_joy.tsv>
|<＃contents06-1>]

[LTsv_joy.tsv|
[LTsv_deviceL|	Linuxのデバイス指定ページ。
joy	Linuxの場合デバイス名(から数字を省いた物)を指定。初期設定は「/dev/input/js」(「/dev/input/js0」を想定)。
[keydefault|	「LTsv_getjoystr()」のLTsv_joykbdformatの初期値設定。
axisL	初期値は「Lx\tLy\t_\tRx\tRy\tPx\tPy」。
axisW	初期値は「Lx\tLy\tRy\tRx\tPx\tPy」。
button	初期値は「X\tY\tA\tB\tC\tZ\tL\tR\tF\tJ\tS\tP」。	C,ZがむしろL1,R1。L,Rが機種によってZL,ZR(L2,R2)。F,JがいわゆるL3,R3。
[keyanother|	「keydefault」の初期値ボツ案などだがボタン配置解説用に温存。
axisUV	Windowsを「dwXpos,dwYpos,dwZpos,dwRpos,dwUpos,dwVpos,dwPOV」固定でも構わなかったけどPOVもLinux同様に２軸にしてすり合わせたかったので直接は使わず。
axisLW	本来こうしたかった例「Lx\tLy\tRy\tRx\tPx\tPy」。でもこれだとZ軸(dwUpos,dwVpos)の扱いが謎に。
axisL7	Linuxドライバのaxis解釈が謎7軸なのは多分こうなるはずだったから予想「Lx\tLy\tLz\tRx\tRy\tRz\tPx\tPy」。そのせいでなのかWindowsとLinuxでaxisにズレが発生する。
axisW8	axisWが実際に6軸取得できる場合LTsv_getjoystr()に渡す配置「Lx\tLy\tRy\tRx\tPx\tPy\tLz\tRz」。Z軸を後付け設計にしたので注意。
buttonN	いわゆる任天堂(3DS)配列風。「X\tY\tA\tB\tL\tR\tZL\tZR\tLC\tRC\tS\tP\tH」。
buttonP	いわゆるソニー(PS4)配列風。「△\t□\t×\t○\tL1\tR1\tL2\tR2\tL3\tR3\tS\tO\tP」。。
|LTsv_joy.tsv]

[<＃contents06-2>|
<？DLDT>  status<？/DTDD>           axis最大値とボタン最大値。2項目。axis最大値はWindowsとLinuxでズレる場合があります。ループ内省略推奨。<？/DD/DL>
<？DLDT>  button<？/DTDD>           ボタンが押されてれば1。押されてなければ0。データ項目はボタンの個数分。WindowsとLinuxで共通。<？/DD/DL>
<？DLDT>  axisL<？/DTDD>            Linux版はPOVが2軸扱い。合計6項目の場合でも7項目を返すゲームPADが存在したりするので注意(PxPy軸がズレてる場合がある)。<？/DD/DL>
<？DLDT>  axisW<？/DTDD>            Windows版はPOVが1軸扱いですがスクリプト側で2軸に変換。通常6項目。<？/DD/DL>
|<＃contents06-2>]

[<？section07-0>*<？section07-1>|
.+\.html?	<section>@E <h3><a name="index07-@c"><？title07-@c></a></h3>@E<＃contents07-@c>@E</section>@E
.*	@E<？title07-@c>@E@E<＃contents07-@c>@E
|<？section07-0>*<？section07-1>]

[<＃contents07-0>|
<？P> 「<？https07:LTsv_kbd.tsv>」は<？PCkeyboard>の入力(マウスのボタン含む)をLTSVに変換するモジュールです。<？BR>
 ・ウィンドウがアクティブでない時にもキー入力を取得するので取扱い注意。<？BR>
 ・WindowsとLinuxではキーフックの手段が異なるので一部関数「LTsv_kbdEVIOCGRAB()」がOS依存になるので注意。<？BR>
 ・仮想キーの番号はWindowsとLinuxで異なるので注意。「LTsv_kbd.tsv」で調整。<？BR>
 ・「LTsv_kbd.py」単独の単体風テストでは<？PCkeyboard>の挙動確認は難しい(Windows環境ではターミナルの「GetAsyncKeyState」がWineの外なので拾えない)ので挙動確認は「<？https08:LTsv_gui.py>」を使います。<？BR><？/P>

<！LTsv_kbd.py>
|<＃contents07-0>]

[LTsv_kbd.py|
LTsv_kbdcatproc(LTsv_devname)	「cat /proc/bus/input/devices」からLTsv_devnameで検索して「event?」を返す。「?」の部分は数値。
LTsv_kbdreset(LTsv_tsvpath)	 [LTsv_kbd.tsv]からモジュールの初期設定や、<？keycode00FF>に名付けたキー名称を読み込む。
LTsv_kbdgettypename(LTsv_code)	<？keycode00FF>をキー名称に変換。ひらがなキー名称は用いない。
LTsv_kbdgettypekana(LTsv_code)	<？keycode00FF>をキー名称に変換。かな入力に用いるキーはひらがなキー名称を取得。
LTsv_kbdgettypecode(LTsv_name)	キー名称を<？keycode00FF>に変換。
LTsv_kbdgettypegana(LTsv_gana)	ひらがなキー名称を<？keycode00FF>に変換。ひらがな以外のキー名称も使用可能。
LTsv_kbdexit()	<？PCkeyboard>(マウス含む)の変数初期化です。Linuxではデバイスをクローズします。
LTsv_kbdinit(LTsv_tsvpath="LTsv/LTsv_kbd.tsv",LTsv_initmouse=False)	<？PCkeyboard>の準備です。Linuxではデバイスをオープンします。	Linuxで複数のマウスボタンを使う場合LTsv_initmouseで監視許可も出すことが可能です。	マウスボタンの配置は「<？index07-1>」を参考。	Windowsの場合逆にLTsv_initmouseと関係なくら最初から「MouseL:1\tMouseR:2\tMouseC:4」固定です。
LTsv_kbdEVIOCGRAB(LTsv_grabflag)	※Linux専用命令です。<？PCkeyboard>の入力をターミナルやテキストエリアなどに出力しないようにします。	Windowsのキーフックとすり合わせる過程で別の名前になる可能性があります。	漢直とかで<？PCkeyboard>のアルファベット入力を漢字出力に置き換える用途です。
LTsv_kbdwrite(LTsv_code,LTsv_press)	※Linux専用命令です。<？PCkeyboard>を入力した事にします。	「LTsv_kbdEVIOCGRAB()」実行中は動作しません。
LTsv_kbdwriteCtrl(LTsv_ganastsv)	※Linux専用命令です。「Ctrl」など複数のキーを押しながら入力みたいな動作を再現します。	「LTsv_kbdEVIOCGRAB()」実行中は動作しません。
LTsv_setkbddata(LTsv_kbdstacks,LTsv_mousestacks)	<？PCkeyboard>の状態を読み込みます。	LTsv_kbdstacksとLTsv_mousestacksはLinuxでそれぞれのデバイスから一度に読み込む量の指定です。
LTsv_getkbdlabels(kbdformat=LTsv_defkbdformat)	キー名一覧のtsvをLTsv_defkbdformatに渡すとキーの状態を表すLTSVが帰ってくる。	例えば「LTsv_getkbdlabels("MouseL\tMouseR\tMouseC")」とすると「MouseL:0\nMouseR:0\nMouseC:0」とかが帰ってくる。
LTsv_getkbdnames()	押された<？PCkeyboard>のキー名称を返す。<？keycode00FF>にキー名称が付けられる必要がある。
LTsv_getkbdcodes()	 押された<？PCkeyboard>の<？keycode00FF>を返す。
LTsv_getkbdkanas()	押された<？PCkeyboard>のかな文字を返す。かな以外だと押された<？PCkeyboard>の<？keycode00FF>を返す。
|LTsv_kbd.py]

[<＃contents07-1>|
<？P> 「<？https07:LTsv_kbd.tsv>」は「<？https07:LTsv_kbd.py>」の設定ファイルです。<？BR><？/P>
<！LTsv_kbd.tsv>
|<＃contents07-1>]

[LTsv_kbd.tsv|
[LTsv_deviceL|	Linuxのデバイス指定。
kbd	初期設定は「/dev/input/event?」。	万が一「LTsv_kbdreset()」内の「LTsv_kbdcatproc()」でデバイスを検出できない場合は直接指定。
mouse	初期想定は「/dev/input/event?」。	万が一「LTsv_kbdreset()」内の「LTsv_kbdcatproc()」でデバイスを検出できない場合は直接指定。
[LTsv_mouse_EV_KEY|	※Linux専用。マウスボタンなどの入力をWindowsのGetAsyncKeyStateの1,2,4みたいに<？keycode00FF>風に処理するための仮想キーコードの設定。
[LTsv_EV_REL|	マウスホイールなどの入力を処理する予定だった設定枠(未実装)。
[LTsv_EV_ABS|	その他アナログな入力を処理する予定だった設定枠(未定)。
[LTsv_typenameW|	Windowsの「キー名称:<？keycode00FF>」の組み合わせを記述。	だがWineとWindows実機でGetAsyncKeyStateの返り値が違う様子。	※この項目はページ全体がLTSVです。
[WineVK|	Wineで得られる「キー名称:<？keycode00FF>」の組み合わせ解説用。<？PCkeyboard>の種類によって変化する怖れ。	※この項目はページ全体がLTSVです。
[WindowsVK|	Windowsの仮想キーで「キー名称:<？keycode00FF>」の組み合わせ確認用。	※この項目はページ全体がLTSVです。
[LTsv_typenameL|	Linuxの「キー名称:<？keycode00FF>」の組み合わせを記述。<？PCkeyboard>の種類によって変化する怖れ。	※この項目はページ全体がLTSVです。
[LTsv_typegana|	Windows仮想キーの「キー名称:<？keycode00FF>」の組み合わせ保存用。<？PCkeyboard>の種類によって変化する怖れ。	※この項目はページ全体がLTSVです。
[LTsv_keydefault|	「LTsv_getkbdlabels()」のkbdformat初期値。	※この項目はページ全体がLTSVです。
|LTsv_kbd.tsv]

[<？section08-0>*<？section08-1>|
.+\.html?	<section>@E <h3><a name="index08-@c"><？title08-@c></a></h3>@E<＃contents08-@c>@E</section>@E
.*	@E<？title08-@c>@E@E<＃contents08-@c>@E
|<？section08-0>*<？section08-1>]

[<＃contents08-0>|
<？P> 「<？https08:LTsv_gui.py>」はウィンドウなど<？GUIwidget>を設置するモジュールです。<？BR>
 ・環境次第では「GTK2」と「Tkinter」が選べるはずですがPuppyLinuxでは「GTK2」Windows環境では「Tkinter」です。<？BR>
 ・「canvas」の描画高速化のため「LTsv_draw_*_shell(LTsv_GUI)」で関数オブジェクトを用意する手続き推奨。<？BR>
 ・「LTsv_window_main()」実行前に「print()」「LTsv_libc_printf()」などターミナル(stdout)系命令が実行されるとGUIが表示されない場合があります。<？BR>
 ・「LTsv_window_main()」実行後は<？GUIwidget>のイベント(「LTsv_window_after()」の様なタイマー系含む)が発生するまでPythonスクリプトが停止するので注意。<？BR>
 ・「LTsv_」を付加してないローカル変数が多々あるので変数名の衝突が心配。<？BR>
 ・「LTsv_widgetPAGE」はほぼ「LTsv_widget_newUUID()」で生成するユニークIDっぽいIDの事。<？BR>
 ・<？tasktrayNotify>関連は「Tkinter」で使えないので注意。他にも「Tkinter」で動かない命令はいくつか存在。<？BR>
 ・単体風テストでは<？GUIwidget>はもちろん、<？PCkeyboard>や<？gamepad>、日時フォーマットや電卓フォーマットなどの挙動確認もできます。<？BR><？/P>
 
<！LTsv_gui.py>
|<＃contents08-0>]

[LTsv_gui.py|
LTsv_guiCDLLver(LTsv_libname,LTsv_libvermin,LTsv_libvermax)	「LTsv_guiinit()」で使う「libgtk-x11-2.0.so.?」などの「?」のバージョン番号部分を探索。
LTsv_guiinit(LTsv_guistyle=LTsv_GUI_GTK2,LTsv_libvermin=0,LTsv_libvermax=0)	どのGUIを使うか(「Tkinter」と「GTK2」の選択)を決定。 LTsv_guistyleでUI指定できるがPuppyLinuxだと強制的に「GTK2」。	Windowsだと今の所「Tkinter」。「WinAPI」はほぼ未実装。	「LTsv_libvermin」「LTsv_libvermax」でDLLバージョン違いの探索範囲指定。
LTsv_global_GUI()	「LTsv_GUI」の値(「Tkinter」「GTK2」どちらか)を取得。
LTsv_global_Notify()	「LTsv_Notify」の値(「WinAPI」「GTK2」どちらか)を取得。	「Tkinter」に<？tasktrayNotify>が存在しないので暫定的に「WinAPI」で対応。
LTsv_global_GTK2()	「LTsv_GUI_GTK2」の値"GTK2"を取得。「LTsv_guiinit()」の返り値判定用。
LTsv_global_Tkinter()	「LTsv_GUI_Tkinter」の値"Tkinter"を取得。「LTsv_guiinit()」の返り値判定用。
LTsv_global_WinAPI()	「LTsv_GUI_WinAPI」の値"WinAPI"を取得。「LTsv_guiinit()」の返り値判定用。
LTsv_global_libgtk()	「LTsv_libgtk」の値取得。「ctypes.CDLL("libgtk-x11-2.0.so.0")」あたりが帰ってくると思う。
LTsv_global_libgdk()	「LTsv_libgdk」の値取得。「ctypes.CDLL("libgdk-x11-2.0.so.0")」あたりが帰ってくると思う。
LTsv_global_libobj()	「LTsv_libobj」の値取得。「ctypes.CDLL("libgobject-2.0.so.0")」あたりが帰ってくると思う。
LTsv_global_canvasmotionZ()	マウスはどの「canvas」上に存在しているのかを取得。
LTsv_global_canvasmotionX(motionZ=None)	「canvas」上のマウスのX座標(横)を取得。canvas外なら-1。	motionZを指定しないと隣接してる「canvas」間を移動する際に正しくない値を拾う場合がある。
LTsv_global_canvasmotionY(motionZ=None)	「canvas」上のマウスのY座標(縦)を取得。canvas外なら-1。	motionZを指定しないと隣接してる「canvas」間を移動する際に正しくない値を拾う場合がある。
LTsv_global_canvascolor()	「canvas」に設定した描画色を取得。
LTsv_global_canvasbgcolor()	「canvas」に設定した背景色を取得。
LTsv_global_canvasTAG(TkinterTAG=None)	「canvas」に設定した描画タグを取得。もしくは変更。
LTsv_global_widgetltsv(new_LTSV=None)	<？GUIwidget>を管理している「L:Tsv」を取得。もしくは直接書き換え。
LTsv_global_widgetgetpage(LTsv_widgetPAGENAME)	widgetを管理している「L:Tsv」からwidgetのページを取得。
LTsv_global_widgetOBJ(LTsv_objid)	<？GUIwidget>などテキスト化できないオブジェクトは番号で管理していて、LTsv_objid暗号でオブジェクトを取得。
LTsv_global_pictureOBJ(LTsv_objid)	LTsv_objid暗号で画像オブジェクトを取得。
LTsv_global_pictureW(LTsv_objid)	画像オブジェクトの横幅を取得。
LTsv_global_pictureH(LTsv_objid)	画像オブジェクトの縦幅を取得。
LTsv_global_iconOBJ(LTsv_objid)	WindowsのアイコンIDを取得。
LTsv_global_popupmenuOBJ(LTsv_objid)	ポップアップメニューのオブジェクトを取得。
LTsv_widget_newUUID(LTsv_widgetID=None)	<？GUIwidget>管理用にユニークIDを発行する。	「uuid.uuid4()」と「str(time.time())」の組み合わせ。1秒未満以内に122bitの乱数が重複する事はほぼないと思うが重複する確率は理論上ゼロではないので注意。	LTsv_widgetIDにFalseを指定することで前回と同じIDを再発行できる。コールバック関数に自身のIDを渡す必要がある場合に必要。
LTsv_widget_newobj(LTsv_widgetPAGE,LTsv_widgetoption,widget_obj)	 「LTsv_widgetPAGEXYWH()」のオブジェクト管理で番号が被らないようにするカウンター。
LTsv_widget_getobj(LTsv_widgetPAGE,LTsv_widgetoption)	「LTsv_widget_newobj()」で登録したオブジェクトを直接IDで吸い出す関数。
LTsv_widgetPAGEXYWH(LTsv_widgetPAGE,widget_o=None,widget_k=None,widget_t=None,widget_u=None,widget_s=None,widget_e=None,widget_a=None,widget_v=None,widget_b=None, widget_p=None,widget_m=None,widget_g=None,widget_f=None,widget_x=None,widget_y=None,widget_w=None,widget_h=None,widget_c=None, event_z=None,event_k=None,event_y=None,event_b=None,event_p=None,event_r=None,event_e=None,event_m=None,event_l=None,event_a=None,event_u=None, menu_o=None,menu_b=None,menu_c=None,dialog_t=None,dialog_c=None)	詳細は「<？index08-1>」参考。
LTsv_fonttuple(LTsv_line)	「Tkinter」のフォント指定はタプルなので、例えばCSV「"kan5x5comic,10"」なら「(kan5x5comic,10)」のようにタプルに変換。
LTsv_GTKwidget_fixed(window_c,widget_o,widget_x,widget_y,widget_w,widget_h,widget_f=None,widget_d=False)	「GTK2」のコンテナを「gtk_fixed_put」にしてフォントも「gtk_widget_modify_font」で指定する。	widget_dは「gtk_bin_get_child」が要求される場合の分岐。
LTsv_hideondelete_shell(LTsv_windowPAGENAME)	ウィンドウの閉じるボタンを押してもプログラム続行するようにする関数の取得。
LTsv_window_new(widget_n=None,event_b=None,widget_t="LTsv_window",widget_w=200,widget_h=120,event_z=None,event_k=None,event_y=None)	「window」オブジェクトを作成。widget_tにウィンドウのタイトル。	widget_w,widget_hにウィンドウサイズ(最小値)。event_zにコールバック関数登録で同時にリサイズの許可。	event_bはウィンドウを閉じた時にコールバック関数を呼ぶ場合指定。コールバック先で必ず「LTsv_window_exit()」を使う。	event_k,event_yはキーボード入力時(event_kが押した時event_yが離した時)のコールバック関数。
LTsv_widget_settext(LTsv_widgetPAGENAME,widget_t="")	<？GUIwidget>の文字列を設定。
LTsv_widget_gettext(LTsv_widgetPAGENAME)	<？GUIwidget>の文字列を取得。	ウィンドウのタイトル取得には「LTsv_window_title(LTsv_window_id)」という別解もある。
LTsv_widget_setnumber(LTsv_widgetPAGENAME,widget_s=0)	<？GUIwidget>の数値を設定。
LTsv_widget_getnumber(LTsv_widgetPAGENAME)	<？GUIwidget>の数値を取得。
LTsv_widget_seturi(LTsv_widgetPAGENAME,widget_u="")	<？GUIwidget>のURIを設定。
LTsv_widget_geturi(LTsv_widgetPAGENAME)	<？GUIwidget>のURIを取得。
LTsv_widget_showhide(LTsv_widgetPAGENAME,widget_i)	<？GUIwidget>の表示非表示の設定。	「Tkinter」の<？GUIwidget>非表示オプション未確認。
LTsv_widget_disableenable(LTsv_widgetPAGENAME,widget_i)	<？GUIwidget>の無効有効の設定。
LTsv_widget_focus(LTsv_widgetPAGENAME)	<？GUIwidget>にフォーカスする(「edit」「entry」「spin」などにカーソルを合わせる)。
LTsv_window_main(LTsv_windowPAGENAME)	<？GUIwidget>のイベント発生(コールバック)待機。スクリプトはここで一旦停止。	「LTsv_window_main()」の直後にもやる事ある場合「LTsv_window_after()」を使う。	「LTsv_guiinit()」から「LTsv_window_main()」の途中に「print()」「LTsv_libc_printf()」などコンソール系命令が挟まってるとGUIが起動しないので注意。
LTsv_window_after(LTsv_windowPAGENAME,event_b=None,event_i="mousemotion",event_w=1000)	タイマーの設定。「LTsv_window_main()」から一時的に抜け出す手段の一つ。	event_bにコールバックする関数の指定。Noneの場合何もしない。	event_iでタグの指定。タイマーは複数設置できるのでタグで管理。	event_tでタイマーイベント発生のミリ秒の指定。
LTsv_window_foreground()	アクティブウィンドウのIDを取得する。	ターミナルから起動した場合でもターミナルは別ウィンドウ。
LTsv_window_title(LTsv_window_id)	「LTsv_window_foreground()」で取得したウィンドウIDからタイトルを取得する。	通常使用の「LTsv_widget_gettext()」とは事なり別アプリのウィンドウからもタイトル取得できる。
LTsv_window_exit(window_objvoid=None,window_objptr=None)	スクリプトを終了する。	ウィンドウを閉じる時のコールバック関数を指定(LTsv_window_newにevent_b)してる場合そのコールバック先の関数の最後に設定。
LTsv_window_none(window_objvoid=None,window_objptr=None)	 何もしない。Pythonのpassみたいな使い方想定。
LTsv_screen_w(LTsv_windowPAGENAME="")	ディスプレイの縦サイズ。	「Tkinter」ではルートウィンドウが設置されてからでないと「winfo_vrootwidth()」が使えないので注意(代わりに-1を返します)。
LTsv_screen_h(LTsv_windowPAGENAME="")	ディスプレイの横サイズ。	「Tkinter」ではルートウィンドウが設置されてからでないと「winfo_vrootheight()」が使えないので注意(代わりに-1を返します)。
LTsv_window_wh(LTsv_windowPAGENAME)	ウィンドウの縦サイズ横サイズをタプルで取得。
LTsv_window_w(LTsv_windowPAGENAME)	ウィンドウの横サイズを数値で取得。
LTsv_window_h(LTsv_windowPAGENAME)	ウィンドウの縦サイズを数値で取得。
LTsv_window_resize(LTsv_windowPAGENAME,widget_w=16,widget_h=16)	「window」のリサイズ。
LTsv_label_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_label",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「label」オブジェクトを作成。テキストを表示。widget_tにラベルで表示するテキスト。	widget_fはCSVで「widget_f="kan5x5comic,10"」のようにフォント指定。「LTsv_fonttuple()」も参考。
LTsv_image_new(LTsv_windowPAGENAME,widget_n=None,widget_u="LTsv_logo.png",widget_x=0,widget_y=0)	「image」オブジェクトを作成。画像を表示。widget_uに画像のファイルパス。	「LTsv_image_new()」は「LTsv_label_new()」と違ってwidget_w,widget_hによるオブジェクトの大きさ指定は無く、widget_x,widget_yによる表示位置座標のみ。
LTsv_button_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_button",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「button」オブジェクトを作成。ボタンを押すとevent_bをコールバック。widget_tにボタンに表示するテキスト。
LTsv_check_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_check",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「check」オブジェクトを作成。チェックマークをONOFFするとevent_bをコールバック。widget_tにラベルに表示するテキスト。
LTsv_radio_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_radio",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「radio」オブジェクトを作成。ラジオボタンを選択するとevent_bをコールバック。widget_tにラベルに表示するテキスト。「LTsv_radio_new()」を連続して呼び出すと自動でラジオボタングループ(選択肢)として動作。	「LTsv_widget_getnumber()」で選択肢の取得。「LTsv_widget_setnumber()」で選択肢の変更。	GTKの場合チェックマークのONOFFと同じ理屈なのか2回分のコールバックが発生。	「Tkinter」の場合「LTsv_widget_setnumber()」でラジオボタンの個数を越える値も通るので注意。
LTsv_clipboard_new(LTsv_windowPAGENAME,widget_n=None)	「clipboard」を作成。クリップボードを用いたテキスト入力(コピペ補助)。	「LTsv_widget_settext()」「LTsv_widget_gettext()」でテキスト交換。
LTsv_clipmenu_new(widget_o)	「Tkinter」専用の内部関数。「edit」「entry」「spin」の右クリックメニュー(コピペ補助)を作成。
LTsv_edit_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_edit",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「edit」オブジェクトを作成。テキスト複数行入力欄。widget_tに初期値テキスト。
LTsv_entry_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_entry",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「edit」オブジェクトを作成。テキスト１行入力欄入力欄。widget_tに初期値テキスト。	テキスト変更後エンターキーでevent_bをコールバック。
LTsv_spin_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「spin」オブジェクトを作成。数値入力。数値変更でevent_bをコールバック。
LTsv_scale_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16)	「scale」オブジェクトを作成。数値調節。数値変更でevent_bをコールバック。	「GTK2」と「Tkinter」で数値表示の位置というかデザインが異なるので注意。
LTsv_scale_adjustment(LTsv_widgetPAGENAME,widget_s=0,widget_e=255,widget_a=1)	「spin」「scale」の範囲を変更。	widget_s,widget_eで数値の範囲、widget_aで増減量の指定。
LTsv_combobox_list(LTsv_widgetPAGENAME,widget_t="")	「combobox」の項目を変更。widget_tに項目一覧をテキスト複数行で設定。
LTsv_combobox_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	「combobox」オブジェクトを作成。「GTK2」のみ。	項目変更でevent_bをコールバック。	「Tkinter」版tkkなので未実装。
LTsv_canvas_new(LTsv_windowPAGENAME,widget_n=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,event_p=None,event_r=None,event_e=None,event_m=None,event_l=None,event_w=100)	「canvas」オブジェクトを作成。画像やテキストの描画。マウスジェスチャーでコールバック発生。任意のGUIを作れるはず。	event_pはマウス押下時のコールバック。event_rはマウス押上時のコールバック。	event_eはマウスポインタが「canvas」枠内に入ったのコールバック。event_lはマウスポインタが「canvas」枠外に出た時のコールバック。	event_mはマウスポインタが「canvas」枠内滞在中event_wミリ秒毎に発生する。マウスを動かしてなくてもevent_mにコールバックするので注意。	「GTK2」だとラスタ(ドット絵)形式「Tkinter」だとベクター(クリップアートやFlash)形式の違いがあります。
LTsv_drawGTK_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG")	描画先「canvas」の指定。	「GTK2」の場合描画図形に添付するタグ「LTsv_draw_tkTAG」は不要。「LTsv_draw_selcanvas_shell()」の互換性で存在。
LTsv_drawTkinter_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG")	描画先「canvas」の指定。	「Tkinter」の場合描画図形に添付するタグ「LTsv_draw_tkTAG」も指定できる。
LTsv_draw_selcanvas_shell(LTsv_GUI)	「LTsv_drawGTK_selcanvas()」か「LTsv_drawTkinter_selcanvas()」の関数取得。	「LTsv_draw_selcanvas=LTsv_draw_selcanvas_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_delete(draw_c="white")	「canvas」に描画した図形の消去。	「GTK2」だと長方形を上描き描画して図形を消去する(塗りつぶす)。
LTsv_drawTkinter_delete(draw_c="white")	「canvas」に描画した図形の消去。	「Tkinter」ではタグ(初期値は「LTsv_draw_tkTAG」)が付けられた図形を消去する(消去のみで塗りつぶすわけではない)。
LTsv_draw_delete_shell(LTsv_GUI)	「LTsv_drawGTK_delete()」か「LTsv_drawTkinter_delete()」の関数取得。	「LTsv_draw_delete=LTsv_draw_delete_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawTkinter_deleteTAG(TkinterTAG=None)	「canvas」に描画した図形の消去。「Tkinter」で特定のタグ付けられた図形を消去する。
LTsv_draw_deleteTAG_shell(LTsv_GUI)	「LTsv_drawTkinter_delete()」の関数取得。	「LTsv_drawGTK_delete()」は存在しないが文法上「LTsv_draw_deleteTAG_shell()」が存在。
LTsv_drawGTK_color(draw_c="")	「LTsv_drawGTK_delete()」か「LTsv_drawTkinter_delete()」の関数取得。	「LTsv_draw_delete=LTsv_draw_delete_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawTkinter_color(draw_c="")	「canvas」描画色指定。
LTsv_draw_color_shell(LTsv_GUI)	「canvas」描画色指定。
LTsv_drawGTK_bgcolor(draw_c="")	「canvas」背景色指定。グリフ穴空けなどの図形消去に使う色指定。
LTsv_drawTkinter_bgcolor(draw_c="")	「canvas」背景色指定。グリフ穴空けなどの図形消去に使う色指定。
LTsv_draw_bgcolor_shell(LTsv_GUI)	「LTsv_drawGTK_bgcolor()」か「LTsv_drawTkinter_bgcolor()」の関数取得。	「LTsv_draw_bgcolor=LTsv_draw_bgcolor_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_polygon(*draw_xy)	「canvas」にポリゴン(ワイヤフレーム)の描画。座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_polygon(*draw_xy)	「canvas」にポリゴン(ワイヤフレーム)の描画。座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_polygon_shell(LTsv_GUI)	「LTsv_drawGTK_polygon()」か「LTsv_drawTkinter_polygon()」の関数取得。	「LTsv_draw_polygon=LTsv_draw_polygon_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_polygonfill(*draw_xy)	「canvas」にポリゴン(塗り潰し)の描画。頂点座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_polygonfill(*draw_xy)	「canvas」にポリゴン(塗り潰し)の描画。頂点座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_polygonfill_shell(LTsv_GUI)	「LTsv_drawGTK_polygonfill()」か「LTsv_drawTkinter_polygonfill()」の関数取得。	「LTsv_draw_polygonfill=LTsv_draw_polygonfill_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_squares(draw_wh=16,*draw_xy)	「canvas」に正方形(ワイヤフレーム)を描画。draw_whは円で例えると半径のサイズ。	中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_squares(draw_wh=16,*draw_xy)	「canvas」に正方形(ワイヤフレーム)を描画。draw_whは円で例えると半径のサイズ。		中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_squares_shell(LTsv_GUI)	「LTsv_drawGTK_squares()」か「LTsv_drawTkinter_squares()」の関数取得。	「LTsv_draw_squares=LTsv_draw_squares_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_squaresfill(draw_wh=16,*draw_xy)	「canvas」に正方形(塗り潰し)を描画。draw_whは円で例えると半径のサイズ。	中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_squaresfill(draw_wh=16,*draw_xy)	「canvas」に正方形(塗り潰し)を描画。draw_whは円で例えると半径のサイズ。	中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_squaresfill_shell(LTsv_GUI)	「LTsv_drawGTK_squaresfill()」か「LTsv_drawTkinter_squaresfill()」の関数取得。	「LTsv_draw_squaresfill=LTsv_draw_squaresfill_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_circles(draw_wh=16,*draw_xy)	「canvas」に円(ワイヤフレーム)を描画。draw_whに円の半径サイズ。中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_circles(draw_wh=16,*draw_xy)	「canvas」に円(ワイヤフレーム)を描画。draw_whに円の半径サイズ。中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_circles_shell(LTsv_GUI)	「LTsv_drawGTK_circles()」か「LTsv_draw_circles_shell()」の関数取得。	「LTsv_draw_circles=LTsv_draw_circles_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_circlesfill(draw_wh=16,*draw_xy)	「canvas」に円(塗り潰し)を描画。draw_whに円の半径サイズ。中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_circlesfill(draw_wh=16,*draw_xy)	「canvas」に円(塗り潰し)を描画。draw_whに円の半径サイズ。中心座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_circlesfill_shell(LTsv_GUI)	「LTsv_drawGTKfill_circles()」か「LTsv_draw_circlesfillfill_shell()」の関数取得。	「LTsv_draw_circlesfill=LTsv_draw_circlesfill_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_points(*draw_xy)	「canvas」に点を描画。座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_drawTkinter_points(*draw_xy)	「canvas」に点(短線)を描画。座標はX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_draw_points_shell(LTsv_GUI)	「LTsv_drawGTK_points()」か「LTsv_drawTkinter_points()」の関数取得。	「LTsv_draw_points=LTsv_draw_points_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	「canvas」に弧(円周のみ)を描画。「arc」の挙動が「GTK2」と「Tkinter」で事なる。	楕円に外接する長方形の左上座標がdraw_x,draw_y。長方形のサイズがdraw_w,draw_h。	draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。
LTsv_drawTkinter_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	「canvas」に扇(半径含む)を描画。「arc」の挙動が「GTK2」と「Tkinter」で事なる。	円に外接する長方形の左上座標がdraw_x,draw_y。長方形のサイズがdraw_w,draw_h。	draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。
LTsv_draw_arc_shell(LTsv_GUI)	「LTsv_drawGTK_arc()」か「LTsv_drawTkinter_arc()」の関数取得。	「LTsv_draw_arc=LTsv_draw_arc_shell(LTsv_GUI)」の様に文法上プラットフォーム間差異吸収しても挙動が異なるので注意。
LTsv_drawGTK_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	「canvas」に弧(塗り潰し)を描画。結果的に「GTK2」と「Tkinter」がほぼ同じ挙動。	楕円に外接する長方形の左上座標がdraw_x,draw_y。長方形のサイズがdraw_w,draw_h。	draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。
LTsv_drawTkinter_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	「canvas」に扇(塗り潰し)を描画。結果的に「GTK2」と「Tkinter」がほぼ同じ挙動。	楕円に外接する長方形の左上座標がdraw_x,draw_y。長方形のサイズがdraw_w,draw_h。	draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。
LTsv_draw_arcfill_shell(LTsv_GUI)	「LTsv_drawGTK_arcfill()」か「LTsv_drawTkinter_arcfill()」の関数取得。	「LTsv_draw_arcfill=LTsv_draw_arcfill_shell(LTsv_GUI)」の様に文法上プラットフォーム間差異吸収しても挙動が異なるので注意。
LTsv_drawGTK_font(draw_f="")	「canvas」のフォント指定。widget_fにCSVで「widget_f="kan5x5comic,10"」のようにフォント指定。	「LTsv_fonttuple()」も参考。
LTsv_drawTkinter_font(draw_f=None)	「canvas」のフォント指定。widget_fにCSVで「widget_f="kan5x5comic,10"」のようにフォント指定。	「LTsv_fonttuple()」も参考。
LTsv_draw_font_shell(LTsv_GUI)	「LTsv_drawGTK_font()」か「LTsv_drawTkinter_font()」の関数取得。	「LTsv_draw_font=LTsv_draw_font_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_drawGTK_text(draw_t="",draw_x=0,draw_y=0)	「canvas」にフォントでテキストを描画。draw_tに文字列。左上座標はdraw_x,draw_y。	グリフでのテキスト描画は「<？index09-0>」を参考。
LTsv_drawTkinter_text(draw_t="",draw_x=0,draw_y=0)	「canvas」にフォントでテキストを描画。draw_tに文字列。左上座標はdraw_x,draw_y。	「Tkinter」には「<？CP932>」の制限があるのでグリフでのテキスト描画「<？index09-0>」も参考。
LTsv_draw_text_shell(LTsv_GUI)	「LTsv_drawGTK_text()」か「LTsv_drawTkinter_text()」の関数取得。	「LTsv_draw_text=LTsv_draw_text_shell(LTsv_GUI)」の様にプラットフォーム間差異吸収に使う。
LTsv_draw_picture_load(LTsv_picturepath)	「canvas」用の画像を読み込む。LTsv_picturepathはローカルの画像ファイルのパス。	GUIオブジェクト(widget)の「image」とは別腹。	「Tkinter」では先に「LTsv_canvas_new()」で「canvas」を作って置く必要がある。
LTsv_draw_picture_celldiv(LTsv_picturepath,picture_divw,picture_divh)	「LTsv_draw_picture_load()」で読み込んだ(読み込んでなければ読み込む)画像を分割して「filepath[num]」の様に番号を付けることができる。	「GTK2」でのみ実装。
LTsv_draw_picture_save(LTsv_pictureoldpath,LTsv_picturenewpath)	「LTsv_draw_picture_celdiv()」で分割した、あるいは分割前の「LTsv_draw_picture_load()」読み込んだ画像を保存。png推奨。	「GTK2」でのみ実装。
LTsv_draw_canvas_save(LTsv_canvasPAGENAME,LTsv_picturenewpath)	「canvas」を画像保存。png推奨。	「GTK2」でのみ実装。
LTsv_drawGTK_picture(LTsv_picturepath,draw_x=0,draw_y=0)	「canvas」に「LTsv_draw_picture_load()」で読み込んだ(「LTsv_draw_picture_celdiv()」で分割した)画像を描画。	LTsv_picturepathは「LTsv_draw_picture_load(LTsv_picturepath)」と同じパス(LTsv_draw_picture_celldiv()の場合「filepath[num]」の添字num数値は分割数範囲内)。左上座標はdraw_x,draw_y。
LTsv_drawTkinter_picture(LTsv_picturepath,draw_x=0,draw_y=0)	「canvas」に「LTsv_draw_picture_load()」で読み込んだ画像を描画。	LTsv_picturepathは「LTsv_draw_picture_load(LTsv_picturepath)」と同じパス。左上座標はdraw_x,draw_y。
LTsv_draw_picture_shell(LTsv_GUI)	「LTsv_drawGTK_picture()」か「LTsv_drawTkinter_picture()」の関数取得。	「LTsv_draw_picture=LTsv_draw_picture_shell(LTsv_GUI)」の様に文法上プラットフォーム間差異吸収しても挙動が異なるので注意。
LTsv_drawGTK_queue()	「canvas」の描画更新をする。描画更新を通知しないと描画が「window」に反映されません。「GTK2」でのみ必要。
LTsv_drawTkinter_queue()	「Tkinter」の「canvas」は描画更新を自動で行うのでこの関数は何もしません。文法上の都合で存在。
LTsv_draw_queue_shell(LTsv_GUI)	「LTsv_drawGTK_queue()」か「LTsv_drawTkinter_queue()」の関数取得。	「LTsv_draw_queue=LTsv_draw_queue_shell(LTsv_GUI)」の様に文法上プラットフォーム間差異吸収しても挙動が異なるので注意。
LTsv_clockwise(*draw_xy)	ポリゴンが時計回りなら正数、反時計回りなら負数、判定できない場合0のカウントを返す。	時計回りの判定は簡易的(外積による角度のみの計算で面積無視)なので８の字にねじった形状や十字手裏剣のような凹みのある形状を扱う場合注意。	座標は「LTsv_draw_polygon」系と同じくX座標とY座標が交互に来るタプル(x,y,x,y…)。
LTsv_icon_load(LTsv_picturepath)	通知タスクトレイ(Notify)に使うアイコン「*.ico」またはアイコンDLL「*.icl」を読込。	1つのファイルに複数のアイコンを認識できた場合「filepath[num]」の様に番号が添付される。	「WinAPI」でのみ実装(「Tkinter」でもWindowsなら「WinAPI」で対応)。「canvas」用途の画像とは別に管理。
LTsv_notifyicon_new(LTsv_windowPAGENAME,notify_n=None,widget_t="",widget_u="",menu_b=None,menu_c=None)	<？tasktrayNotify>の作成。	「GTK2」ではポップアップメニュー表示を実装できたが、「Tkinter」で「WinAPI」のイベントを拾う方法が不明なのでポップアップメニューが開けない。	widget_tはツールチップテキスト。	widget_uはアイコンのURI(ファイルパス)。「GTK2」では「LTsv_draw_picture_load()」、「WinAPI」では「LTsv_icon_load()」を呼び出す。	menu_bに「yield ("window exit",LTsv_window_exit_cbk)」のようなイテレータ生成関数を送るとポップアップメニューを作成。	menu_cにポップアップメニューとは別途1クリック実行するコールバック関数を指定。
LTsv_filedialog_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_filedialog",dialog_t=0)	ファイルダイアログ「filedialog」の作成。widget_tにダイアログウィンドウ用のテキスト。	dialog_tでダイアログの種類。偶数ならOpen、奇数ならSave、2未満ならファイル、2以上ならフォルダ。	ダイアログウィンドウを表示するときは「LTsv_widget_showhide(kanedit_filedialog,True)」。	ボタンを押すとevent_bをコールバック。コールバック先で「LTsv_widget_showhide(kanedit_filedialog,False)」してダイアログウィンドウを閉じる必要。	キャンセルが実装されてないので注意。
debug_canvas(window_objvoid=None,window_objptr=None)	単体風テスト専用。「LTsv_window_after()」を使って「debug_canvas()」自身をループ。	日時表示の更新や「canvas」の描き替えをしてる。
debug_timebutton(callback_void=None,callback_ptr=None)	単体風テスト専用。reset「button」が押されたら日時フォーマットの初期化。
debug_calc(callback_void=None,callback_ptr=None)	単体風テスト専用。電卓の「entry」が書き換えた(Enterキー押下した)ら電卓フォーマットで演算。
debug_polygonpoints(callback_void=None,callback_ptr=None)	単体風テスト専用。描画テスト用ポリゴンの頂点がX座標とY座標が交互に来るタプル(x,y,x,y…)になってるか確認して奇数なら偶数に減らして揃える。
debug_polygonbutton(callback_void=None,callback_ptr=None)	単体風テスト専用。描画テスト用ポリゴンの頂点削除。
debug_activewindow(callback_void=None,callback_ptr=None)	単体風テスト専用。アクティブウィンドウのID取得テスト。
debug_canvas_press(callback_void=None,callback_ptr=None)	単体風テスト専用。「canvas」マウス押下のコールバック。
debug_color_scale(window_objvoid=None,window_objptr=None)	単体風テスト専用。「scale」で描画テスト用ポリゴンの色変更。
debug_color_combo(window_objvoid=None,window_objptr=None)	単体風テスト専用。「combobox」で描画テスト用ポリゴンの色変更…みたいなのを想定。未実装。「Tkinter」では機能しない。
debug_edit_clip(window_objvoid=None,window_objptr=None)	単体風テスト専用。クリップボード「clipboard」の動作確認。
debug_checkbutton_shell(checkNumber)	単体風テスト専用。「check」のコールバック用関数の例。「radio」と比較用途。	同じような動作をする<？GUIwidget>を複数連続で作る場合、関数をネストして関数自体を返り値にする関数を使います(クロージャ・関数閉包・高階関数…呼び名は色々)。
debug_radiobutton_shell(radioNumber)	単体風テスト専用。「radio」のコールバック用関数の例。「check」と比較用途。	同じような動作をする<？GUIwidget>を複数連続で作る場合、関数をネストして関数自体を返り値にする関数を使います(クロージャ・関数閉包・高階関数…呼び名は色々)。
debug_keypress(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？PCkeyboard>入力(押下)の動作検証。	「GTK2」の場合コールバック構造体から値を取り出す方法が不明なので、キー取得に別途「<？https07:LTsv_kbd.py>」によるキー入力取得が必要です。詳細は「<？index07-0>」を参考。
debug_keyrelease(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？PCkeyboard>入力(押上)の動作検証。	「GTK2」の場合コールバック構造体から値を取り出す方法が不明なので、キー取得に別途「<？https07:LTsv_kbd.py>」によるキー入力取得が必要です。詳細は「<？index07-0>」を参考。
debug_filedialog(window_objvoid=None,window_objptr=None)	単体風テスト専用。「filedialog」の表示テスト。
debug_filedialog_response(window_objvoid=None,window_objptr=None)	単体風テスト専用。「filedialog」のレスポンステスト。	「GTK2」で「GTK_RESPONSE_ACCEPT」を取り出す方法が不明なので、ファイルダイアログのキャンセル方法が不明。
|LTsv_gui.py]

[<＃contents08-1>|
<？P> 「<？https08:LTsv_gui.py>」では「<？GUIwidget>」を「L:Tsv」で管理してます。<？BR>
 ページ名として「LTsv_widget_newUUID()」で発行されるユニークIDが付与されます。<？BR>
 テキスト化できる項目とテキスト化できないので「LTsv_widget_newobj()」のIDだけを保管する項目とに仕分けるのが「LTsv_widgetPAGEXYWH()」の役割です。<？BR>
 オブジェクトを「L:Tsv」で管理する理由はガベージコレクションで消えるのを予防とグローバル変数が散らかるのを予防するためです。<？BR><？/P>
<？DLDT>   widget_o(widgetobj)<？/DTDD>                  <？GUIwidget>本体のポインターもしくはオブジェクトID。<？/DD/DL>
<？DLDT>   widget_k(widgetkind)<？/DTDD>                 <？GUIwidget>の種類。「LTsv_window_new()」なら「window」。<？BR>
                                       「LTsv_label_new()」なら"label"。<？BR>
                                       「LTsv_image_new()」なら"image"。<？BR>
                                       「LTsv_button_new()」なら"button"。<？BR>
                                       「LTsv_check_new()」なら"check"。<？BR>
                                       「LTsv_radio_new()」なら"radio"。<？BR>
                                       「LTsv_clipboard_new()」なら"clipboard"。<？BR>
                                       「LTsv_entry_new()」なら"entry"。<？BR>
                                       「LTsv_spin_new()」なら"spin"。<？BR>
                                       「LTsv_scale_new()」なら"scale"。<？BR>
                                       「LTsv_scale_new()」なら"combobox"。<？BR>
                                       「LTsv_combobox_new()」なら"combobox"。<？BR>
                                       「LTsv_canvas_new()」なら"canvas"。<？BR>
                                       「LTsv_notifyicon_new()」なら"notify"。<？BR>
                                       「LTsv_filedialog_new()」なら"filedialog"。<？BR><？/DD/DL>
<？DLDT>   widget_t(widgettext)<？/DTDD>                <？GUIwidget>が保有するテキスト。「window」のタイトルなど。<？/DD/DL>
<？DLDT>   widget_u(widgettext)<？/DTDD>                <？GUIwidget>が保有するURI(URLもしくはファイルパス)。「image」のファイルパスなど。<？/DD/DL>
<？DLDT>   widget_s(widgetstart)<？/DTDD>               「spin」「scale」など数値入力系<？GUIwidget>のmin(start)。<？/DD/DL>
<？DLDT>   widget_e(widgetend)<？/DTDD>                 「spin」「scale」など数値入力系<？GUIwidget>のmax(end)。<？/DD/DL>
<？DLDT>   widget_a(widgetadd)<？/DTDD>                 「spin」scale」など数値入力系<？GUIwidget>の増減量。「Tkinter」だと整数だが「GTK2」だと小数指定が可能。<？/DD/DL>
<？DLDT>   widget_v(widgetstringvar)<？/DTDD>           「entry」などテキスト入力系<？GUIwidget>のテキスト。<？/DD/DL>
<？DLDT>   widget_b(widgetbooleanvar)<？/DTDD>          「check」など論理値入力系<？GUIwidget>の0または1。<？/DD/DL>
<？DLDT>   widget_p(widgetphotoimage)<？/DTDD>          「image」などで管理される<？GUIwidget>の画像。<？/DD/DL>
<？DLDT>   widget_m(widgetpixmap)<？/DTDD>              「canvas」の「LTsv_libgdk.gdk_pixmap_new()」を「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理。<？/DD/DL>
<？DLDT>   widget_g(widgetgc)<？/DTDD>                  「canvas」の「LTsv_GDKCOLOR()」を「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理。<？/DD/DL>
<？DLDT>   widget_f(widgetfont)<？/DTDD>                <？GUIwidget>のフォント。<？/DD/DL>
<？DLDT>   widget_x(widgetsizeX)<？/DTDD>               <？GUIwidget>のウィンドウ内X座標。<？/DD/DL>
<？DLDT>   widget_y(widgetsizeY)<？/DTDD>               <？GUIwidget>のウィンドウ内Y座標。<？/DD/DL>
<？DLDT>   widget_w(widgetsizeW)<？/DTDD>               <？GUIwidget>の横幅。<？/DD/DL>
<？DLDT>   widget_h(widgetsizeH)<？/DTDD>               <？GUIwidget>の縦幅。<？/DD/DL>
<？DLDT>   widgetcontainer(widget_c)<？/DTDD>           「window」がオブジェクト配置するルールを格納するコンテナ。<？/DD/DL>
<？DLDT>   widgetresize(event_z)<？/DTDD>               「window」のサイズ変更時のコールバック関数。<？/DD/DL>
<？DLDT>   keyboard_press(event_k)<？/DTDD>             「window」のキー押した時のコールバック関数。<？/DD/DL>
<？DLDT>   keyboard_release(event_y)<？/DTDD>           「window」のキー離した時のコールバック関数。<？/DD/DL>
<？DLDT>   event_b(widgetcallback)<？/DTDD>             例えば「button」を押した時に呼び出されような何かしらのコールバック関数。<？/DD/DL>
<？DLDT>   event_p(mouse_press)<？/DTDD>                「canvas」でマウスボタンを押した時のコールバック関数。<？/DD/DL>
<？DLDT>   event_r(mouse_release)<？/DTDD>              「canvas」でマウスボタンを離した時のコールバック関数。<？/DD/DL>
<？DLDT>   event_e(mouse_enter)<？/DTDD>                「canvas」にマウスポインタが入った時のコールバック関数。<？/DD/DL>
<？DLDT>   event_m(mouse_motion)<？/DTDD>               「canvas」内でマウスポインタが動いた時のコールバック関数。<？/DD/DL>
<？DLDT>   event_l(mouse_leave)<？/DTDD>                「canvas」からマウスポインタが出た時のコールバック関数。<？/DD/DL>
<？DLDT>   event_a(notify_activate)<？/DTDD>            <？tasktrayNotify>を左クリックした時のコールバック関数。<？/DD/DL>
<？DLDT>   event_u(notify_popupmenu)<？/DTDD>           <？tasktrayNotify>を右クリックした時のコールバック関数。<？/DD/DL>
<？DLDT>   menu_o(popupmenuobj)<？/DTDD>                WindowsのNOTIFYICONなどポップアップメニューの呼び出し元となるオブジェクト。<？/DD/DL>
<？DLDT>   menu_b(popupmenubind)<？/DTDD>               ポップアップメニュー表示用コールバック関数。<？/DD/DL>
<？DLDT>   menu_c(popupmenuclick)<？/DTDD>              <？tasktrayNotify>クリック時のコールバック関数。<？/DD/DL>
<？DLDT>   dialog_t(dialog_type)<？/DTDD>                ファイルダイアログの種類。<？/DD/DL>
<？DLDT>   dialog_c(dialog_close)<？/DTDD>               ファイルダイアログを閉じる時のコールバック関数。<？/DD/DL>
|<＃contents08-1>]

[<？section09-0>*<？section09-1>*<？section09-2>*<？section09-3>*<？section09-4>|
.+\.html?	<section>@E <h3><a name="index09-@c"><？title09-@c></a></h3>@E<＃contents09-@c>@E</section>@E
.*	@E<？title09-@c>@E@E<＃contents09-@c>@E
|<？section09-0>*<？section09-1>*<？section09-2>*<？section09-3>*<？section09-4>]

[<＃contents09-0>|
<？P> 「<？https09:LTsv_glyph.py>」は「canvas」上でフォントグリフを描画するモジュールです。<？VRkeyboard>関連も扱います。<？BR>
 ・「<？https08:LTsv_gui.py>」の「LTsv_draw_text」系列との違いはフォントを用いずにグリフを描画することです。<？BR>
 ・ 「Tkinter」では表示できない<？CP932>を越える3バイト以上のUTF-8文字を扱えます。<？BR>
 ・単体風テストとして<？VRkeyboard>で<？reversi>を操作するデモを作成。あくまでもデモなのでアルゴリズムは簡易。「entry」との比較用に<？VRcalc>のテストも。<？BR><？/P>

<！LTsv_glyph.py>
|<＃contents09-0>]

[LTsv_glyph.py|
LTsv_glyph_kbdinit(LTsv_tsvpath="LTsv/LTsv_glyph.tsv",LTsv_glyph_GUI="",LTsv_glyph_kbddefsize=None)	設定ファイル「LTsv/LTsv_glyph.tsv」の読込、<？DICchar>の読込、グリフ座標パイクル「LTsv/kanpickle.bin」の読込など初期化関連。	「LTsv_glyph_GUIにはLTsv_guiinit()」で取得する「Tkinter」か「GTK2」。	「LTsv/LTsv_glyph.tsv」の設定を無視してLTsv_glyph_kbddefsizeに<？VRkeyboard>の倍率が指定できるが後述の<？VRcalc>と連携が不十分。
LTsv_global_kandic(new_kandic=None)	<？DICchar>を取得できます。	「LTsv_glyph_kbdinit()」実行時に読み込んだメモリ上の辞書を読み込むのでファイルアクセスするわけではない点に留意。
LTsv_global_kanmap()	<？DICmap>を取得できます。	「LTsv_glyph_kbdinit()」実行時に読み込んだメモリ上の辞書を読み込むのでファイルアクセスするわけではない点に留意。
LTsv_global_kanmapN()	<？DICmap>のNFER鍵盤の配列を取得。
LTsv_global_kanmapX()	<？DICmap>のXFER鍵盤の配列を取得。
LTsv_global_kanpickle()	グリフの座標データを取得。
LTsv_global_irohatype()	<？DICmap>項目名としてのイロハ鍵盤名リスト。	通常は「ぬ,ふ,あ,う,え,お,や,ゆ,よ,わ,ほ,へ,た,て,い,す,か,ん,な,に,ら,せ,゛,゜,ち,と,し,は,き,く,ま,の,り,れ,け,む,つ,さ,そ,ひ,こ,み,も,ね,る,め,ろ,￥」
LTsv_global_irohatypeN()	NFER鍵盤で表示するイロハ鍵盤名のリスト。	通常は「ぬ,ふ,あ,う,え,お,や,ゆ,よ,わ,ほ,へ,た,て,い,す,か,ん,な,に,ら,せ,＠,ぷ,ち,と,し,は,き,く,ま,の,り,れ,け,む,つ,さ,そ,ひ,こ,み,も,ね,る,め,ろ,￥」
LTsv_global_irohatypeX()	XFER鍵盤で表示するイロハ鍵盤名のリスト。	通常は「ヌ,フ,ア,ウ,エ,オ,ヤ,ユ,ヨ,ワ,ホ,ヘ,タ,テ,イ,ス,カ,ン,ナ,ニ,ラ,セ,｀,プ,チ,ト,シ,ハ,キ,ク,マ,ノ,リ,レ,ケ,ム,ツ,サ,ソ,ヒ,コ,ミ,モ,ネ,ル,メ,ロ,｜」
LTsv_global_alphatype()	<？DICmap>項目名としてのα鍵盤名のリスト。	通常は「α,β,γ,δ,ε,ζ,η,θ,ι,κ,λ,μ,ν,ξ,ο,π,ρ,σ,τ,υ,φ,χ,ψ,ω,○,△,□」
LTsv_global_alphatypeN()	NFER鍵盤で表示するα鍵盤名のリスト。	通常は「α,β,γ,δ,ε,ζ,η,θ,ι,κ,λ,μ,ν,ξ,ο,π,ρ,σ,τ,υ,φ,χ,ψ,ω,○,△,□」
LTsv_global_alphatypeX()	XFER鍵盤で表示するα鍵盤名のリスト。	通常は「Α,Β,Γ,Δ,Ε,Ζ,Η,Θ,Ι,Κ,Λ,Μ,Ν,Ξ,Ο,Π,Ρ,Σ,Τ,Υ,Φ,Χ,Ψ,Ω,●,▲,■」
LTsv_global_dictype()	辞書名のリスト。通常は「英,名,音,訓,送,異,俗,熙,簡,繁,越,地,顔,鍵,代,逆,非,難,活,漫,筆,幅」
LTsv_global_glyphtype()	グリフ名のリスト。通常は「活,漫,筆」
LTsv_global_choice()	辞書変更鍵盤のリスト。通常は「名,音,訓,送,異,俗,簡,繁,越,地,逆,非,英,顔,ε,ρ,τ,υ,θ,ι,ο,π,＠,ぷ,α,σ,δ,φ,γ,η,ξ,κ,λ,代,鍵,ぬ,ζ,χ,ψ,ω,β,ν,μ,熙,○,△,□,￥,σ」
LTsv_global_choiceN()	NFER鍵盤で表示する辞書変更鍵盤。通常は「名,音,訓,送,異,俗,簡,繁,越,地,逆,非,英,顔,ε,ρ,τ,υ,θ,ι,ο,π,＠,ぷ,α,σ,δ,φ,γ,η,ξ,κ,λ,代,鍵,ぬ,ζ,χ,ψ,ω,β,ν,μ,熙,○,△,□,￥,σ」
LTsv_global_choiceX()	XFER鍵盤で表示する辞書変更鍵盤。通常は「名,音,訓,送,異,俗,簡,繁,越,地,逆,非,英,顔,Ε,Ρ,Τ,Υ,Θ,Ι,Ο,Π,｀,プ,Α,Σ,Δ,Φ,Γ,Η,Ξ,Κ,Λ,代,鍵,ぬ,Ζ,Χ,Ψ,Ω,Β,Ν,Μ,熙,●,▲,■,￥,Σ」
LTsv_global_evaltype()	電卓コマンドのリスト。通常は「平,片,大,小,半,全,＼,￥,清,Ｈ,Ｍ,濁,Ｂ,Ｐ,今,⑩,⑯,⑧,⓪,照,探,〒,汎,算」
LTsv_global_irohaalpha()	LTsv_global_irohatype()+LTsv_global_alphatype()。<？DICmap>項目名全部。
LTsv_global_irohaalphaN()	NFER鍵盤で表示する全鍵盤名のリスト。
LTsv_global_irohaalphaX()	XFER鍵盤で表示する全鍵盤名のリスト。
LTsv_global_kbdchars()	<？VRkeyboard>で表示する文字。	NFER,XFER,KANAの操作で鍵盤を交換して、表示されてる文字を入力する。
LTsv_global_glyphkbdH()	<？VRkeyboard>の縦サイズ。	LTsv_glyph_kbddefsizeが1の時24。
LTsv_global_glyphkbdW()	<？VRkeyboard>の縦サイズ。	LTsv_glyph_kbddefsizeが1の時96。
LTsv_global_glyphkbdF()	<？VRkeyboard>の文字スペースサイズ。	LTsv_glyph_kbddefsizeが1の時、グリフサイズが5になるので時余白1ドット込みで6。
LTsv_global_kbdcursorNone()	52。	文字入力48鍵+鍵盤制御4鍵(IME想定では4鍵だったが漢直専用エディタでは3鍵に減らせた)の合計。
LTsv_glyphSVG5x10x(LTsv_glyph_path)	グリフの圧縮された座標データをSVGパスに(伸張)。	「[0176]」→「M 0,1000 200,1000 200,800 0,800 z」	「[AOBOBQAQ]」→「M 0,1000 100,1000 100,900 0,900 z」
LTsv_glyphSVG(LTsv_glyph_path)	グリフの座標データをSVGからリストに変換。
LTsv_glyphpath(glyphcode)	グリフの「活」「漫」「筆」および「幅」データを<？DICchar>から抽出。同時にポリゴンの回転方向を事前に計算。
LTsv_glyphfont_5x5(glyphcode)	グリフ「活」の座標データと計算済みのポリゴン回転方向を用意。
LTsv_glyphfont_comic(glyphcode)	グリフ「漫」の座標データと計算済みのポリゴン回転方向を用意。
LTsv_glyphfont_brush(glyphcode)	グリフ「筆」の座標データと計算済みのポリゴン回転方向を用意。
LTsv_glyphfont_shell(draw_g="活")	グリフの「活」「漫」「筆」に応じて専用関数を呼び出す。
LTsv_draw_glyphs(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)	「canvas」にグリフ描画(ワイヤフレーム)。draw_tにテキスト文字列、draw_x,draw_yに表示座標。	draw_fにフォントサイズ。draw_gでフォントの種類。draw_w,draw_hは文字間の隙間。
LTsv_draw_glyphsfill(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)	「canvas」にグリフ描画(塗り潰し)。draw_tにテキスト文字列、draw_x,draw_yに表示座標。	draw_fにフォントサイズ。draw_gでフォントの種類。draw_w,draw_hは文字間の隙間。
LTsv_draw_glyphskbd(draw_t,draw_x=0,draw_y=0,draw_f=5,draw_g="活")	「canvas」にグリフ描画１文字分。改行処理などを省いた高速描画用。<？VRkeyboard>など等幅表示想定。
LTsv_draw_glyphclock(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	ほぼ「kanfont」用。1文字のグリフの右回転をcolor_R、左回転をcolor_L、判別困難または不能な図形はcolor_Xで色分けする(ワイヤフレーム)。
LTsv_draw_glyphclockfill(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	ほぼ「kanfont」用。1文字のグリフの右回転をcolor_R、左回転をcolor_L、判別困難または不能な図形はcolor_Xで色分けする(塗り潰し)。
LTsv_draw_glyphcursor(draw_t="",draw_x=0,draw_y=0,path_z=0,draw_s=0,grid_p=-1,grid_q=-1,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	ほぼ「kanfont」用。グリフのポリゴン頂点や線分がマウスカーソルで選択状態にあるか表示する。
LTsv_draw_glypwide(draw_t="",draw_x=0,draw_y=0,draw_s=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_W="#9F6C00")	ほぼ「kanfont」用。フォントグリフの「幅」を表示。
LTsv_draw_glyphmouse(draw_t="",draw_x=0,draw_y=0,path_z=0,grid_x=LTsv_PSchar_ZW//2,grid_y=LTsv_PSchar_ZW//2,mouse_x=LTsv_PSchar_ZW//2,mouse_y=LTsv_PSchar_ZW//2,draw_f=LTsv_PSchar_ZW//2,draw_g="活")	ほぼ「kanfont」用。mouse_x,mouse_yにマウス座標を入れて「LTsv_draw_glyphcursor()」で使用する「grid_p」「grid_q」の値を取得。
LTsv_glyph_getnote(draw_t="",draw_g="活")	グリフの座標をリストで取得。draw_tにテキスト1文字分、draw_gでグリフの種類。
LTsv_glyph_pointsrotation(glyphnote=[])	グリフ座標のポリゴンの座標の順番を回転ソートしてリスト先頭座標を左上に配置。
LTsv_glyph_points2path(draw_t="",glyphnote=[],draw_g="活")	ほぼ「kanfont」用。<？DICchar>のグリフを座標データで更新する。	draw_tに1文字、draw_gでフォントの種類。glyphnoteはグリフ座標リストを直接。
LTsv_glyph_text2path(draw_t="",kanpath="",draw_g="俗")	<？DICchar>のグリフをkanpathのテキストデータで更新する。	グリフ以外のデータの更新にも使える。
LTsv_glyph_kbdcursor(kbd_canvas,kbd_x,kbd_y)	<？VRkeyboard>のどのキーの上にマウスカーソルがあるか調べる。kbd_canvasでキャンバス、kbd_x,kbd_yで<？VRkeyboard>の表示位置。	<？VRkeyboard>の上にマウスが無い場合「LTsv_global_kbdcursorNone()」を返す。
LTsv_glyph_kbdselect(choice)	<？VRkeyboard>を鍵盤名(LTsv_glyph_irohaalphaN,LTsv_glyph_irohaalphaX)で変更する。	鍵盤名は「LTsv_global_irohaalphaN()」「LTsv_global_irohaalphaX()」で取得。
LTsv_glyph_choiceNX(choice)	鍵盤名がLTsv_glyph_irohaalphaNもしくはLTsv_glyph_irohaalphaXの何番目か数値で取得。
LTsv_glyph_kbdfind(find_t)	find_tが<？DICmap>にあるか検索して<？VRkeyboard>の鍵盤を変更する。	find_tは複数の文字が使用できるので、先頭文字から順に見つからない場合は次の文字を探す。	<？DICchar>も動員して異体字なども調べる場合は「LTsv_evaltext()」を使う。
LTsv_glyph_tapcallback_shell(kbd_canvas,callback)	<？VRkeyboard>の文字入力を受け取るコールバック関数の指定。	文字入力判定はマウス押下ではなくマウス押上、タップ動作。
LTsv_glyph_mousepress(kbd_canvas,kbd_x,kbd_y)	「canvas」のマウス押下動作に対応する<？VRkeyboard>を描画。	「canvas」の「event_p=*_mousepress」系コールバック関数内に設置。	カーソルが<？VRkeyboard>の外にある場合「LTsv_global_kbdcursorNone()」が返り値。
LTsv_glyph_mousemotion(kbd_canvas,kbd_x,kbd_y)	「canvas」のマウス移動動作に対応する<？VRkeyboard>を描画。	「canvas」の「event_m=*_mousemotion」系コールバック関数内に設置。	カーソルが<？VRkeyboard>の外にある場合「LTsv_global_kbdcursorNone()」が返り値。
LTsv_glyph_mouserelease(kbd_canvas,kbd_x,kbd_y)	「canvas」のマウス押上動作に対応する<？VRkeyboard>を描画。	「canvas」の「event_r=*_mouserelease」系コールバック関数内に設置。	カーソルが<？VRkeyboard>の外にある場合LTsv_global_kbdcursorNone()」が返り値。
LTsv_glyph_kbddelete(kbd_canvas)	<？VRkeyboard>の消去。特に「Tkinter」では描画した図形は消す必要がある(消さないとオブジェクトが無限増殖の危険性)ので注意。
LTsv_glyph_kbddraw(kbd_canvas,kbd_x,kbd_y,kbd_c=LTsv_glyph_None)	<？VRkeyboard>の描画。	「LTsv_glyph_mousepress()」「LTsv_glyph_mousemotion()」「LTsv_glyph_mouserelease()」でも消去アンド描画されるはず。
LTsv_glyph_picklesave()	グリフの座標データpickleをセーブします。初期設定的には「LTsv/kanpickle.bin」のはず。
LTsv_evaltext(calc_value="")	calc_valueに数式などを入れると「Q⇔A」形式で答えを返す関数です。「LTsv_glyph_kbdfind()」のように漢字探索もします。主に「<？VRcalc>」で使用します。	詳細は「<？index09-4>」を参考。
LTsv_glyph_calcsetup(calc_canvas,calculatorX=0,calculatorY=0,calculatorW=LTsv_global_glyphkbdW(),calculatorH=LTsv_global_glyphkbdH(),calculatorC=None,calculatorB=None,calculatorT="")	「<？VRcalc>(<？VRkeyboard>含む)」の初期設定。calculatorTは初期テキスト。	calculatorX,calculatorYは表示位置座標、calculatorW,calculatorHは入力欄のサイズ(<？VRkeyboard>より大きくする必要)、	calculatorCには「clipboard」オブジェクト、calculatorBには<？VRkeyboard>の文字入力を受けとるコールバック関数。
LTsv_glyph_calcresize(calc_canvas,calculatorX=None,calculatorY=None,calculatorW=None,calculatorH=None,calculatorT=None,calculatorTX=None,calculatorTC=None)	「<？VRcalc>(<？VRkeyboard>含む)」の設定変更もしくはテキストの取得(返り値)。	calculatorTXは文字表示位置を移動。calculatorTCはカーソル移動。
LTsv_glyph_calcdelete(calc_canvas)	<？VRcalc>の消去。特に「Tkinter」では描画した図形は消す必要がある(消さないとオブジェクトが無限増殖の危険性)ので注意。
LTsv_glyph_calcdraw(calc_canvas)	<？VRcalc>の描画。	「LTsv_glyph_calcpress()」「LTsv_glyph_calcmotion()」「LTsv_glyph_calcrelease()」でも消去アンド描画されるはず。
LTsv_glyph_calcdrawplane(calc_canvas,calc_canvasfgcolor=None,calc_canvasbgcolor=None)	<？VRcalc>の描画。	ただし<？VRkeyboard>を非表示、入力欄のカーソルも表示しない。マウスフォーカスが外れてる事を示す用途。	calc_canvasfgcolorで描画色、calc_canvasbgcolorで背景色の変更。
LTsv_glyph_widecache(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_g="漫")	<？VRcalc>のテキストの文字一個一個の座標を記録。
LTsv_glyph_calcglyphs(calc_canvas)	<？VRcalc>内でテキスト表示。選択テキスト(カーソル)のワイヤーフレーム表示や、入力欄からはみ出る文字を非表示にしたりする。	入力欄操作の詳細は「<？index09-3>」を参考。
LTsv_glyph_calcpress(calc_canvas)	「canvas」のマウス押下動作に対応する<？VRcalc>を描画。	「canvas」の「event_p=*_mousepress」系コールバック関数内に設置。	カーソルが<？VRcalc>の中にある場合True、外にある場合Falseが返り値。
LTsv_glyph_calcmotion(calc_canvas)	「canvas」のマウス移動動作に対応する<？VRcalc>を描画。	「canvas」の「event_m=*_mousemotion」系コールバック関数内に設置。	カーソルが<？VRcalc>の中にある場合True、外にある場合Falseが返り値。
LTsv_glyph_calcrelease(calc_canvas)	「canvas」のマウス押上動作に対応する<？VRcalc>を描画。	「canvas」の「event_r=*_mouserelease」系コールバック関数内に設置。	カーソルが<？VRcalc>の中にある場合True、外にある場合Falseが返り値。
LTsv_glyph_calcenter(calc_canvas)	「canvas」にマウスカーソルが入った時の<？VRcalc>を描画。	「canvas」の「event_e=*_mouserelease」系コールバック関数内に設置。	返り値は入力欄のテキスト。
LTsv_glyph_calcleave(calc_canvas)	「canvas」からマウスカーソルが出た時の<？VRcalc>を描画。	「canvas」の「event_l=*_mouserelease」系コールバック関数内に設置。	返り値は入力欄のテキスト。
LTsv_glyph_calcinput(calc_canvas,glyph_calcinput)	glyph_calcinputが文字なら<？VRcalc>に文字入力、カーソル移動など編集指示ならテキスト処理。
LTsv_glyph_typeNXK(glyphtype_getkbdnames)	「LTsv_glyph_calctype()」「LTsv_glyph_calctypelimited()」から呼び出される関数。glyphtype_getkbdnamesにはキーボードの押下情報。	NFERキーが押されてる場合はLTsv_glyph_NFER(49)、XFERキーが押されてる場合はLTsv_glyph_XFER(50)、KANAキーが押されてる場合はLTsv_glyph_KANA(51)。	NFERキーとXFERキー両方を押してる場合にはLTsv_glyph_SandS(48)。SandSはSpaceキーを使ってた時期の名残り。	NFERキーとKANAキーの時は「σ」に鍵盤変更、XFERキーとKANAキーの時は「Σ」に鍵盤変更。
LTsv_glyph_calctype(calc_canvas)	「canvas」にマウスカーソルがある状態で<？PCkeyboard>押下に対応する<？VRkeyboard>を描画。	「window」の「event_k=*_keypress」系「event_y=*_keyrelease」系両方のコールバック関数内に設置。
LTsv_glyph_calctypelimited(calc_canvas,kbd_x,kbd_y)	「canvas」にマウスカーソルがある状態で<？PCkeyboard>押下に対応する<？VRkeyboard>を描画。	「window」の「event_k=*_keypress」系「event_y=*_keyrelease」系両方のコールバック関数内に設置。	「LTsv_glyph_calctypelimited()」は<？VRcalc>を用いず<？VRkeyboard>のみを直接操作する用途。
debug_calculatormousepress(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？VRcalc>用「canvas」マウス押下のコールバック。
debug_calculatormousemotion(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？VRcalc>用「canvas」マウス移動のコールバック。
debug_calculatormouserelease(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？VRcalc>用「canvas」マウス押上のコールバック。
debug_calculatormouseleave(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？VRcalc>用「canvas」にマウスカーソルが入った時のコールバック。
debug_calculatormouseenter(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？VRcalc>用「canvas」からマウスカーソルが出た時のコールバック。
debug_calculatormouseinput(calculatormouseinput)	単体風テスト専用。<？VRcalc>の文字入力を受け取るコールバック関数の指定。
debug_calculatorcommand(glyph_calcinput)	単体風テスト専用。Enter機ーを押した時に電卓機能を発動。	電卓機能の詳細は「<？index09-4>」を参考。
debug_reversi_mousepress(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi><？VRkeyboard>用「canvas」マウス押下のコールバック。
debug_reversi_mousemotion(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi><？VRkeyboard>用「canvas」マウス移動のコールバック。
debug_reversi_mouserelease(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi><？VRkeyboard>用「canvas」マウス押上のコールバック。
debug_reversi_keypress(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi><？VRkeyboard>用「canvas」にマウスカーソルが入った時のコールバック。
debug_reversi_keyrelease(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi><？VRkeyboard>用「canvas」からマウスカーソルが出た時のコールバック。
debug_milklid_check(xy,bw)	単体風テスト専用。<？reversi>でxy升にbw石が置けるか(裏返せる石があるか)チェック。
debug_milklid_turn(xy,bw)	単体風テスト専用。<？reversi>でxy升にbw石を置いて挟んだ石を裏返す。
debug_milkAI_BS(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi>で一手前に戻す(棋譜を1文字削る)。
debug_milkAI_reset()	単体風テスト専用。棋譜初期化。<？reversi>AIのアルゴリズム初期化(戦略変更)。
debug_milkAI_entry(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi>の棋譜更新。
debug_milkAI_Auto(window_objvoid=None,window_objptr=None)	単体風テスト専用。<？reversi>AIが自動で石を置く。「Auto」ボタンは手動で押す。
debug_milkAI_add(addentry)	単体風テスト専用。<？reversi>の升に何らかの方法で石を置く時の動作。試合が決着してる場合は盤面初期化。
debug_configload()	単体風テスト専用。「LTsv/kanglyph.tsv」から棋譜を読み込む。	「LTsv/kanglyph.tsv」の詳細は「<？index09-1>」を参考。
debug_configsave_exit(window_objvoid=None,window_objptr=None)	単体風テスト専用。「LTsv/kanglyph.tsv」に<？reversi>の棋譜を保存。グリフの座標データpickleも「LTsv_glyph_picklesave()」で保存。
|LTsv_glyph.py]

[<＃contents09-1>|
<？P> 「<？https09:LTsv_glyph.tsv>」は「<？https09:LTsv_glyph.py>」の設定ファイルです。<？BR><？/P>
<！LTsv_glyph.tsv>
|<＃contents09-1>]

[LTsv_glyph.tsv|
[kanglyph|	「<？https09:LTsv_glyph.py>」の設定。
dicname	単漢字辞書を指定。初期値は「kanchar.tsv」。
mapname	<？VRkeyboard>の漢字配列を指定。初期値は「kanmap.tsv」。
picklename	グリフ座標データのパイクルを指定。初期値は「kanpickle.bin」。
irohatype	<？DICmap>項目名としてのイロハ鍵盤名リスト。	初期値は「ぬ\tふ\tあ\tう\tえ\tお\tや\tゆ\tよ\tわ\tほ\tへ\tた\tて\tい\tす\tか\tん\tな\tに\tら\tせ\t゛\t゜\tち\tと\tし\tは\tき\tく\tま\tの\tり\tれ\tけ\tむ\tつ\tさ\tそ\tひ\tこ\tみ\tも\tね\tる\tめ\tろ\t￥」
irohatypeN	NFER鍵盤におけるイロハ鍵盤名のリスト。	初期値は「ぬ\tふ\tあ\tう\tえ\tお\tや\tゆ\tよ\tわ\tほ\tへ\tた\tて\tい\tす\tか\tん\tな\tに\tら\tせ\t＠\tぷ\tち\tと\tし\tは\tき\tく\tま\tの\tり\tれ\tけ\tむ\tつ\tさ\tそ\tひ\tこ\tみ\tも\tね\tる\tめ\tろ\t￥」
irohatypeX	XFER鍵盤におけるイロハ鍵盤名のリスト。	初期値は「ヌ\tフ\tア\tウ\tエ\tオ\tヤ\tユ\tヨ\tワ\tホ\tヘ\tタ\tテ\tイ\tス\tカ\tン\tナ\tニ\tラ\tセ\t｀\tプ\tチ\tト\tシ\tハ\tキ\tク\tマ\tノ\tリ\tレ\tケ\tム\tツ\tサ\tソ\tヒ\tコ\tミ\tモ\tネ\tル\tメ\tロ\t｜」
alphatype	α鍵盤名のリスト。	初期値は「α\tβ\tγ\tδ\tε\tζ\tη\tθ\tι\tκ\tλ\tμ\tν\tξ\tο\tπ\tρ\tσ\tτ\tυ\tφ\tχ\tψ\tω\t○\t△\t□」
alphatypeN	NFER鍵盤におけるα鍵盤名のリスト。	初期値は「α\tβ\tγ\tδ\tε\tζ\tη\tθ\tι\tκ\tλ\tμ\tν\tξ\tο\tπ\tρ\tσ\tτ\tυ\tφ\tχ\tψ\tω\t○\t△\t□」
alphatypeX	XFER鍵盤におけるα鍵盤名のリスト。	初期値は「Α\tΒ\tΓ\tΔ\tΕ\tΖ\tΗ\tΘ\tΙ\tΚ\tΛ\tΜ\tΝ\tΞ\tΟ\tΠ\tΡ\tΣ\tΤ\tΥ\tΦ\tΧ\tΨ\tΩ\t●\t▲\t■」
dictype	辞書名のリスト。	初期値は「英\t名\t音\t訓\t送\t異\t俗\t熙\t簡\t繁\t越\t地\t顔\t鍵\t代\t逆\t非\t難\t活\t漫\t筆\t幅」
glyphtype	グリフ名のリスト。	初期値は「活\t漫\t筆」
choice	辞書変更鍵盤のリスト。	初期値は「名\t音\t訓\t送\t異\t俗\t簡\t繁\t越\t地\t逆\t非\t英\t顔\tε\tρ\tτ\tυ\tθ\tι\tο\tπ\t＠\tぷ\tα\tσ\tδ\tφ\tγ\tη\tξ\tκ\tλ\t代\t鍵\tぬ\tζ\tχ\tψ\tω\tβ\tν\tμ\t熙\t○\t△\t□\t￥\tσ」
choiceN	NFER鍵盤における辞書変更鍵盤。	初期値は「名\t音\t訓\t送\t異\t俗\t簡\t繁\t越\t地\t逆\t非\t英\t顔\tε\tρ\tτ\tυ\tθ\tι\tο\tπ\t＠\tぷ\tα\tσ\tδ\tφ\tγ\tη\tξ\tκ\tλ\t代\t鍵\tぬ\tζ\tχ\tψ\tω\tβ\tν\tμ\t熙\t○\t△\t□\t￥\tσ」
choiceX	XFER鍵盤における辞書変更鍵盤。	初期値は「名\t音\t訓\t送\t異\t俗\t簡\t繁\t越\t地\t逆\t非\t英\t顔\tΕ\tΡ\tΤ\tΥ\tΘ\tΙ\tΟ\tΠ\t｀\tプ\tΑ\tΣ\tΔ\tΦ\tΓ\tΗ\tΞ\tΚ\tΛ\t代\t鍵\tぬ\tΖ\tΧ\tΨ\tΩ\tΒ\tΝ\tΜ\t熙\t●\t▲\t■\t￥\tΣ」
evaltype	初期値は「平\t片\t大\t小\t半\t全\t＼\t￥\t清\tＨ\tＭ\t濁\tＢ\tＰ\t今\t⑩\t⑯\t⑧\t⓪\t照\t探\t〒\t汎\t算」
eval_slash	半角スラッシュ「/」を全角に変換(「全」だと曖昧な指示)する時、全角スラッシュ「／」と全角円記号「￥」のどっちに変換するか指定。	初期値は「￥」。
eval_dakuon	清音を濁音に(「濁」だと曖昧な指示)する時、ハ行は"ばびぶべぼ"のみを扱う「Ｂ」か"まみむめも"から"ぱぴぷぺぽ"に変換する「Ｐ」を指定。	初期値は「Ｐ」。
eval_seion	濁音を清音に(「清」だと曖昧な指示)する時、"ばびぶべぼ"も"ぱぴぷぺぽ"も"はひふへほ"に変換する「Ｈ」か"ぱぴぷぺぽ"は"まみむめも"に変換する「Ｍ」を指定。	初期値は「Ｈ」。
eval_now	入力欄で「今今」と入力した時に表示する現在時刻。	初期値は「年-月-日(週曜)時:分:秒」。
eval_branch	入力欄で「今枝」と入力した時に表示する現在時刻。	初期値は「@000y@0m@0dm@wdec@0h@0n@0s」。
eval_overhour	日時フォーマットの徹夜時刻の指定。24〜48のいずれか。
eval_worddicname	<？DICword>ファイルの指定(無くても動作)。	初期値は「../kanword.tsv」。
eval_zipdicname	郵便番号辞書ファイルの指定(無くても動作)。	初期値は「../kanzip.tsv」。
last_alpha	<？VRkeyboard>が最後に表示したα鍵盤を記録。
last_dic	<？VRkeyboard>が最後に表示した単漢字辞書の項目を記録。
kbdTAG	「Tkinter」で<？VRkeyboard>を再描画するため「LTsv_draw_tkTAG」とは別のタグが必要。	初期値は「kanglyphkbd」。
fontcolor	<？VRkeyboard>のグリフ描画色。	初期値は「black」。
bgcolor	<？VRkeyboard>の鍵盤背景色。	初期値は「#E1FFFA」。
leavecolor	<？VRcalc>がフォーカス外の時の入力欄背景色。	初期値は「white」。
kbddefsize	<？VRkeyboard>の拡大倍率。	初期値は「1」。変更非推奨。
[reversi|	「LTsv_glyph.py」単体風テストの<？reversi>設定。
entry	<？reversi>の棋譜。
|LTsv_glyph.tsv]

[<＃contents09-2>|
<？P><？index09:kbdimage><？/P>
<？index09:mouse>
<？DLDT>   小さい文字をタップ(押上)<？/DTDD>    文字入力。「σ」鍵盤ではHJKLでカーソル移動などにもなります。<？BR><？/DD/DL>
<？DLDT>   左上(Ｎ)からフリック<？/DTDD>        NFER鍵盤(ひらがな)の選択。Ｎの下にフリックでα鍵盤の「σ」(HJKL)。<？BR><？/DD/DL>
<？DLDT>   右上(Ｘ)からフリック<？/DTDD>        XFER鍵盤(カタカナ)の選択。Ｘの下にフリックでα鍵盤の「Σ」(電卓)。<？BR><？/DD/DL>
<？DLDT>   左下(Ｎの下)からフリック<？/DTDD>    α鍵盤の選択。もしくは辞書の変更。<？BR><？/DD/DL>
<？DLDT>   右下(Ｘの下)からフリック<？/DTDD>    字引入力。単漢字辞書の項目が代入。<？BR><？/DD/DL>

<？index09:keyboard>
<？DLDT>  [NFER]+[ぬ〜ろ￥]<？/DTDD>                   NFER鍵盤切替。ひらがなや小文字など。[NFER]キーを押すだけでも鍵盤は切り替わる。<？BR><？/DD/DL>
<？DLDT>  [XFER]+[ヌ〜ロ｜]<？/DTDD>                   XFER鍵盤切替。カタカナや大文字など。[XFER]キーを押すだけでも鍵盤は切り替わる。<？BR><？/DD/DL>
<？DLDT>  [NFER]+[XFER]or[XFER]+[NFER]<？/DTDD>       α鍵盤の「αβγδεζηθικλμνξοπρστυφχψω」＆単漢字辞書の「名音訓送異俗熙簡繁越地顔鍵代逆非」の変更。<？BR>
                                     α鍵盤＆辞書項目の表示中は[NFER]と[XFER]どちらか片方だけ押したままでも表示継続。<？BR><？/DD/DL>
<？DLDT>  [KANA]+[NFER]or[NFER]+[KANA]<？/DTDD>       「σ」鍵盤表示。HJKLカーソル移動などに使います。<？BR><？/DD/DL>
<？DLDT>  [KANA]+[XFER]or[XFER]+[KANA]<？/DTDD>       「Σ」鍵盤表示。電卓用途。<？BR><？/DD/DL>
<？DLDT>  [KANA]+[ぬ〜ろ￥ヌ〜ロ｜]<？/DTDD>           単漢字辞書による字引入力。<？BR><？/DD/DL>
|<＃contents09-2>]
[<＃contents09-3>|
<？index09:calcimage>
<？index09:mouse>
<？DLDT>  テキスト選択<？/DTDD>                      文字選択とカーソルの区別は厳密ではないので、1文字選択がカーソル移動。<？BR><？/DD/DL>
<？DLDT>  選択テキストドラッグ<？/DTDD>              選択した文字は移動できる。選択テキストはドラッグで持ち上げるタイミングでクリップボードにもコピー。<？BR><？/DD/DL>
<？DLDT>  選択文字を欄外にドラッグ<？/DTDD>          選択した文字を削除もできる。<？BR><？/DD/DL>
<？DLDT>  １秒入力欄を押し続ける<？/DTDD>            ドラッグじゃない状態でホールドするとクリップボードから貼り付けた文字がドラッグ状態になる。<？BR><？/DD/DL>
<？DLDT>  入力欄の上端をスライド<？/DTDD>            文字の表示位置を移動。<？BR><？/DD/DL>
<？DLDT>  表示位置スライド状態で押し続け<？/DTDD>    文字の表示位置をリセット。<？BR><？/DD/DL>

<？index09:keyboard>
<？DLDT>  HJKL<？/DTDD>        カーソル移動。H←,J↓,K↑,L→(上下移動は「kanedit」用途)。<？BR><？/DD/DL>
<？DLDT>  YUBN<？/DTDD>        範囲選択調整。YUで左側、BNで右側。<？BR><？/DD/DL>
<？DLDT>  ;(+)<？/DTDD>       バックスペース。σ鍵盤じゃない状態の時も[BS]キーで左側1文字削除。<？BR><？/DD/DL>
<？DLDT>  :(*)<？/DTDD>       カーソルから右の文字デリート。σ鍵盤じゃない状態の時も[DEL]キーで右側1文字削除。<？BR><？/DD/DL>
<？DLDT>  ]<？/DTDD>          エンターキー。σ鍵盤じゃない状態の時も[Enter]キーで入力決定。<？BR><？/DD/DL>
<？DLDT>  A<？/DTDD>          テキスト全選択。σ鍵盤じゃない状態の時も[Ctrl]+[A]で全選択。<？BR><？/DD/DL>
<？DLDT>  C<？/DTDD>          テキストをクリップボードにコピー。σ鍵盤じゃない状態の時も[Ctrl]+[C]で選択範囲コピー。<？BR><？/DD/DL>
<？DLDT>  X<？/DTDD>          テキスト切り取り(クリップボードにコピー)。σ鍵盤じゃない状態の時も[Ctrl]+[X]で選択範囲切り取り。<？BR><？/DD/DL>
<？DLDT>  V<？/DTDD>          クリップボードからテキスト貼り付け。σ鍵盤じゃない状態の時も[Ctrl]+[V]でペースト。<？BR><？/DD/DL>
|<＃contents09-3>]
[<？index09:keyboard>|
.+\.html?	<h4><？title09:keyboard></h4>
.*	 <？title09:keyboard>
|<？index09:keyboard>]
[<？title09:keyboard>|
.*	<？PCkeyboard>操作
|<？title09:keyboard>]
[<？index09:mouse>|
.+\.html?	<h4><？title09:mouse></h4>
.*	 <？title09:mouse>
|<？index09:mouse>]
[<？title09:mouse>|
.*	マウス操作
|<？title09:mouse>]
[<？index09:kbdimage>|
.+\.html?	<img src="data:image/png;base64,<？64base09:kbdimage>" width="96" height="24" alt="漢直鍵盤"><br />
.*	<？textAA09:kbdimage>
|<？index09:kbdimage>]
[<？index09:calcimage>|
.+\.html?	<p><img src="data:image/png;base64,<？64base09:calcmage>" width="200" height="24" alt="漢直鍵盤"><br /></p>
.*	<？textAA09:calcmage>
|<？index09:calcimage>]
[<？64base09:kbdimage>|
iVBORw0KGgoAAAANSUhEUgAAAGAAAAAYCAMAAAAyNwimAAAABlBMVEXh//oAAABbwECnAAABf0lEQVR42r2W25LDMAhD0f//9LYTg45Iui97cWdax8GAQZJbxaHX5/Ut
XQ8znxW1zfVVYfg2ugzTqfx7HL3nZ0MYHhfvt2ebjmW/VZ0U4Tuc1rV5MuXmmhRV7ezycBmrvd8DqAPYec96A1b6BGN/QrZbV2Lqqz6WUKjOVJOTM6ypEFujKCfC1Kf2
/GDIPexYXcJsl8t6B47Pir7YrWo1QqtaXSK3lOHPGmq8MROdnmL7HGxXd9foKncoT8CoIg+cUQYouijiZ4x1YykYE5hVYWmycpTiIZVwJHATpv86bjhRPhkIix9Jkic1
Iue0EaLhW1mL3B5qUe8MZvkBjOvaW07Q1hAJqItPsAJAORXFafmrkGUolYxeKsoM+0+uTNFCEHt961IZuNA30xaY/UUtIsNIDcBo0rU4Lva6XmjyNwGW/ogqDEKb93mh
LhnkTfZ0XZjOlGAojhMinJ4CSET+ViTotCgXwu22aLn6Kt/cBXVSzk2ihBcQjb8cfwKc5/EFqnMDX8CYUlsAAAAASUVORK5CYII=
|<？64base09:kbdimage>]
[<？textAA09:kbdimage>|
 ※漢直鍵盤の四隅ＮＸ等は実際には縦横２倍の大きさです。
  Ｎ　ぬふあうえおやゆよわほへ　Ｘ
  　　たていすかんなにらせ沼濡　　
  　　ちとしはきくまのりれけむ　　
  ぬ　つさそひこみもねるめろﾇ 　英
|<？textAA09:kbdimage>]
[<？64base09:calcmage>|
iVBORw0KGgoAAAANSUhEUgAAAMgAAAAYCAMAAACIuEKDAAAADFBMVEXg/vnh/vnh//oAAACCfcr1AAACHUlEQVR42sWXi5aDMAhElfn/f94qryEPa6t1c/a4RqNyAwN0
WXUsNtYfzVfhAWA7tH/7rcEaPfcrfo7yyp8D+FU3dLdtN7gckdf1InZTR8cAFX7nkyAYghgCAkG9MgUR99w/giBAQB6BZGghbQzHeFBJesz/xSufBoEUabS73etIhJTT
LUnZPKwRcFzfM+Bb8KzYUbOQZNiUoxzdlaHjns5atn/VPMq6FEIkfIYqGqE8vKhvXh+2k9fQuZmwTfQWxobrQ9v5tkQf99V9+gXrtnhBhoro1pSsxaFlX/Xvk0Fq8DaB
DwMwYAXSh2gDaDUXxMi+uCiKUkfiOADBO5Cw0u5/BCKXQaiyc/plD6TRFUQNdRAyM+mHITltUX4w3oGgAykb/i0I0jnoFUFSib6F2rCip5MgoVo9tVBKkikIDkG42HlG
kjblSpPTSulEiN3WtEFdxU6qsQUBFuvPaqQ6hH3Bu4wJDqpHkPI4A0JpLD0QCTVDbQjSt/H+mXsqutAbU+xDkIgr9CRZP6YeaUFwJwg3KJx+WwUvozS8WczrJwUxksCo
jb+30+LQOgQpldzmhWMGEmm7r+zSSFt6aZdGhXuXPltdAKktyHcgpRURmQsc1me2P7vo1w11v9FrdbG+rlT2Ys5xM++1jkHQeKRvF7mCSNtAlp7xa5CFjPwE5LLUuU5K
aVTwGUh0vzjR/aLpfuXWlMW9NJ79qfvj8Qdebx+1xSfmjQAAAABJRU5ErkJggg==
|<？64base09:calcmage>]
[<？textAA09:calcmage>|
 ※σ鍵盤の←→↑↓は実際には[Home][End][PgUp][PgDn]です。
  Ｎ　🎮☐☑☒✓✖♠♥♦♣↖↗　Ｘ
  　　Q W E R T Y U I O P ↙↘　　
  　　A S D F G H J K L bsdelenter
  ぬ　Z X C V B N M ←→↑↓σ　英
|<？textAA09:calcmage>]

[<＃contents09-4>|
<？P> 「kanedit」では省略して「電卓」と呼ぶテキスト入力欄の内容、「LTsv_kbdentry_evaltext()」の引数内容の状態により、<？BR>
 コマンドなのか単語なのか数式なのかで「漢字逆引き」「分数電卓」「文字参照」「簡易辞書」など分岐します。<？BR><？/P>

<？DLDT>  １文字のみ入力<？/DTDD>                     漢字逆引き。入力した文字が存在する鍵盤に切替。同時に単漢字辞書[kanchar.tsv]の項目表示、単漢字辞書に無い文字は「照」数値文字参照。<？BR>
                                     「走⇔」→「英走⇔run」「名走⇔はしる」「照走⇔&#36208;」<？BR><？/DD/DL>
<？DLDT>  先頭文字列が「&#」<？/DTDD>                 数値文字参照を文字列にデコード。<？BR>
                                     「&#21654;&#21937;&#40634;&#40621;」→「照&#21654;&#21937;&#40634;&#40621;⇔咖喱麺麭」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「照」<？/DTDD>                   文字列を数値文字参照にエンコード。数値文字参照を文字列へのデコードも可能。<？BR>
                                     「照咖喱麺麭&#21654;&#21937;&#40634;&#40621;」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「〒」<？/DTDD>                   郵便番号辞書「kantzip.tsv」から住所を表示。<？BR>
                                     「〒1638001⇔東京都新宿区西新宿２丁目８－１東京都庁」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「平」<？/DTDD>                   カタカナをひらがな(平仮名)に変換。<？BR>
                                     「平ヴァイオリン⇔ヴぁいおりん」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「片」<？/DTDD>                   ひらがなをカタカナ(片仮名)に変換。<？BR>
                                     「片ヴぁいおりん⇔ヴァイオリン」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「半」<？/DTDD>                   全角アルファベットとカタカナをに半角に変換。<？BR>
                                     「半ヴァイオリン⇔ｳﾞｧｲｵﾘﾝ」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「全」<？/DTDD>                   半角アルファベットとカタカナをに全角に変換(曖昧な指示)。初期設定では「￥」。<？BR>
                                     「全ｳﾞｧｲｵﾘﾝ⇔ヴァイオリン」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「￥」<？/DTDD>                   半角アルファベットとカタカナをに全角に変換(バックスラッシュを全角円記号に)。<？BR>
                                     「￥バックスラッシュ\円記号⇔バックスラッシュ￥円記号」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「＼」<？/DTDD>                   半角アルファベットとカタカナをに全角に変換(バックスラッシュを全角バックスラッシュに)。<？BR>
                                     「＼バックスラッシュ\円記号⇔バックスラッシュ＼円記号」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「清」<？/DTDD>                   濁音を清音に変換(曖昧な指示)。初期設定では「Ｈ」。<？BR>
                                     「清ヴァイオリン⇔ウァイオリン」。<？/DD/DL>
<？DLDT>  先頭文字が「Ｈ」<？/DTDD>                   濁音を清音に変換("ばびぶべぼ"も"ぱぴぷぺぽ"も"はひふへほ"に)。<？BR>
                                     「Ｈカエルぴょこぴょこみぴょこぴょこ、ぼうずがびょうぶにえをかいた⇔カエルひょこひょこみひょこひょこ、ほうすかひょうふにえをかいた」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「Ｍ」<？/DTDD>                   濁音を清音に変換("ぱぴぷぺぽ"は"まみむめも"に)。<？BR>
                                     「Ｍカエルぴょこぴょこみぴょこぴょこ、ぼうずがびょうぶにえをかいた⇔カエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「濁」<？/DTDD>                   清音を濁音に変換(曖昧な指示)。初期設定では「Ｐ」。<？BR>
                                     「濁ウァイオリン⇔ヴァイオリン」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「Ｂ」<？/DTDD>                   清音を濁音に変換("はひふへほ"は"ばびぶべぼ"に)。<？BR>
                                     「Ｂカエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた⇔ガエルみょごみょごみみょごみょご、ぼゔずがびょゔぶにえをがいだ」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「Ｐ」<？/DTDD>                   清音を濁音に変換("まみむめも"も"ぱぴぷぺぽ"に)。<？BR>
                                     「Ｐカエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた⇔ガエルぴょごぴょごぴぴょごぴょご、ぼゔずがびょゔぶにえをがいだ」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「大」<？/DTDD>                   アルファベット(全角ギリシャ文字全角キリル文字を含む)を大文字に変換。<？BR>
                                     「大αAndΩ⇔ΑANDΩ」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「小」<？/DTDD>                   アルファベット(全角ギリシャ文字全角キリル文字を含む)を小文字に変換。<？BR>
                                     「小ΑAndΩ⇔αandω」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「今」<？/DTDD>                   日時などを取得。「平,干,年,月,日,週,曜,時,分,秒,今,版,印」の他に「日時フォーマット」で詳細な指定も可能。<？BR>
                                     「今年-月-日(週曜)時:分:秒」→「今@000y-@0m-@0dm(@0wnyi@wdj)@0h:@0n:@0s⇔2016-03-01(09火)02:15:15」<？BR>
                                     「今今」→「今@000y-@0m-@0dm(@0wnyi@wdj)@0h:@0n:@0s⇔2016-03-01(09火)02:15:48」。「eval_now」を返す。<？BR>
                                     「今版」→「今20160716S001619⇔20160716S001619」。[LTsv_time.py]の「LTsv_time_ver()」を返す。<？BR>
                                     「今枝」→「今@000y@0m@0dm@wdec@0h@0n@0s⇔20160716S001619」。「eval_branch」を返す。<？BR>
                                     日時の詳しい使い方は「<？index04-1>」を参考。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「⑧」<？/DTDD>                   UTF-8文字列を256進数としての8点点字(UTF-8点字)に変換。一般的な点字ではないので注意。<？BR>
                                     「⑧点字に類似したもの⇔⣧⢂⢹⣥⢭⢗⣣⢁⢫⣩⢡⢞⣤⢼⢼⣣⢁⢗⣣⢁⢟⣣⢂⢂⣣⢁⢮」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「⓪」<？/DTDD>                    UTF-8文字列を256進数としての8点点字(UTF-8点字)をUTF-8の文字列に復号。<？BR>
                                     「⓪⣧⢂⢹⣥⢭⢗⣣⢁⢫⣩⢡⢞⣤⢼⢼⣣⢁⢗⣣⢁⢟⣣⢂⢂⣣⢁⢮⇔点字に類似したもの」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「⑯」<？/DTDD>                   10進数を16進数に変換。<？BR>
                                     「⑯65535⇔0xffff」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「⑩」<？/DTDD>                   16進数を10進数に変換。<？BR>
                                     「⑩FFFF⇔65535」「⑩0xFFFF⇔65535」。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「英」「名」「音」「訓」「送」「異」「俗」「熙」「簡」「繁」「越」「地」「顔」「鍵」「代」「逆」「非」<？BR><？/DTDD>
                                     <？DICchar>から該当する文字あるいは単語等を字引。字引入力の単漢字項目も変更。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「難」<？/DTDD>                   漢字の難読レベル(小学校N学年・常用漢字・人名・地名・幽霊文字など)を設定予定。難読の定義が不明瞭なので放置中。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「活」「漫」「筆」<？/DTDD>       「kant5x5comic」のグリフデータ。「kanfont」で編集可能。「活」では独自形式で圧縮される。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「幅」<？/DTDD>                   <？DICchar>上のデータの「kan5x5comic」のフォントの幅を表示。全角(1024)の場合省略できる。半角(624)と麻雀牌(824)しか種類はないはず。<？BR><？/DD/DL>
<？DLDT>  先頭文字が「探」<？/DTDD>                   文字列から<？DICmap>に含まれる漢字の探索。漢字逆引きの一種。文字が見つかり次第鍵盤切替。「探袮穃粫𡚴岾軅垉椦蟐靹駲閠墸壥⇔𡚴」<？BR>
                                     <？DICmap>に見つからない文字の場合は<？DICchar>の「異」「簡」「繁」「代」項目からも探索を試みる。「探檪⇔櫟」「探⇔東」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「汎」その他数式以外<？/DTDD>      <？DICword>から単語を取得。単語にヒットしなければ数式扱い。２文字以上の単語は「汎」を省略できるが数式と区別するため「汎」は付加される。<？BR>
                                     「汎ヴァイオリン⇔提琴」「汎フカセツフカセツテン⇔不可説不可説転」<？BR><？/DD/DL>
<？DLDT>  先頭文字が「算」その他数式<？/DTDD>         数式とみなして分数計算。電卓の詳しい使い方は[LTsv.txt]の「<？index05-1>」を参考。<？BR><？/DD/DL>
<？DLDT>  「3927/1250」といった割り算<？/DTDD>        割り算に限らず計算結果は分数表示。「3927/1250⇔3927|1250」<？BR><？/DD/DL>
<？DLDT>  「3927|1250」といった分数のみ<？/DTDD>       約分できない分数に限り少数で表示。「3927|1250⇔3.1416」<？BR><？/DD/DL>
|<＃contents09-4>]

[<？section10-0>*<？section10-1>*<？section10-2>|
.+\.html?	<section>@E <h3><a name="index10-@c"><？title10-@c></a></h3>@E<＃contents10-@c>@E</section>@E
.*	@E<？title10-@c>@E@E<＃contents10-@c>@E
|<？section10-0>*<？section10-1>*<？section10-2>]

[<＃contents10-0>|
<？P> 「<？https10:LTsv_doc.py>」はモジュールそのものというよりは、モジュールのドキュメントを作成(関数一覧を作成)するソフトです。<？BR>
  ・ファイル名と同名のタグを作成すると項目一覧ページを作成します(現在Pythonと「L:Tsv」ファイルのみ)。<？BR>
  ・項目一覧ページの、例えばPythonのdef一覧とかは、ランチャーで更新する度に項目を入れ替えるので、目視で関数増減チェックする手間が軽減されます。<？BR>
  ・<？yakuyon>のサイトもLTsv_docドキュメントによる生成で置き換える予定。<？BR><？/P>

<！LTsv_doc.py>
|<＃contents10-0>]

[LTsv_doc.py|
LTsvDOClaunch_kernel_regularexpression(LTsvDOC_outname,LTsvDOC_tagnames)	「<？https10:LTsv_doc.py>」専用。置換処理のコア部分。ファイル名分岐やタグセパレート繰り返しのカウンター処理など。
LTsvDOCdef_python(LTsvDOClaunch_deffile)	Pythonのソースから「def 」で始まる行を抜き出して関数一覧を取得。
LTsvDOCdef_LTSV(LTsvDOClaunch_deffile)	「L:Tsv」のソースからページ名一覧とfirst一覧を抜き出す。firstにラベル「:」が含まれてるページはLTSVとみなしてページ名のみ取得。
LTsvDOClaunch_kernel_listfile(LTsvDOC_outname,LTsvDOC_tagname)	Pythonの関数一覧などに装飾処理。
LTsvDOClaunch_kernel_listdir(LTsvDOC_outname,LTsvDOC_tagname)	未実装。フォルダ指定の場合でファイル一覧を作成する予定。
LTsvDOClaunch_kernel_count(window_objvoid=None,window_objptr=None)	LTsv_docドキュメント1枚作成毎にwaitを入れる。ドキュメントの設定読込処理も。
LTsvDOClaunch_shell(LTsvDOClaunch_tsvcount)	ランチャーのボタンを押したら「LTsvDOClaunch_kernel_count()」を呼び出す。
|LTsv_doc.py]

[<＃contents10-1>|
<？P> 「<？https10:LTsv_doc.tsv>」は「<？https09:LTsv_glyph.py>」の設定ファイルと同時にドキュメント作成例サンプルです。<？BR>
<？/PP>
 メタタグ「L:Tsv」のfirst縦軸ラベルの解説。<？BR>
<？/P>
<？DLDT>  [L:Tsv|<？/DTDD>                     「L:Tsv」ファイルの宣言です。「L:Tsv」ファイルの詳細は「<？index01-1>」を参考。<？/DD/DL>
<？DLDT>   1st<？/DTDD>                        「<？https10:LTsv_doc.tsv>」の設定を書き込む。通常「LTsv_doc」で構わないが今回は「LTsv_doc_this」を指定。「LTsv_doc.py」と衝突するので。<？/DD/DL>
<？DLDT>  [LTsv_doc|<？/DTDD>                  「<？https10:LTsv_doc.py>」の設定です。ドキュメントの設定ではなくアプリの設定です。<？/DD/DL>
<？DLDT>   window_size<？/DTDD>                ランチャーのウィンドウサイズなどの初期設定「width:600\theight:480\twait:100\tfontsize:24」。waitの感覚が狭すぎるとフリーズするので注意。<？/DD/DL>
<？DLDT>   tsvlist<？/DTDD>                    ランチャーに管理させるLTsvファイルのリストを指定。<？/DD/DL>
<？DLDT>   modify<？/DTDD>                     ランチャーのボタンを押した時刻を表示することで変換処理を一応行った事を通知。ボタンの時刻が変化してから正しく置換されたか確認。<？/DD/DL>
<？DLDT>  [LTsv_doc_this|<？/DTDD>             「<？https10:LTsv_doc.tsv>」の設定です。アプリの設定とドキュメント混在は後述の「skplist」機能のテストや解説役を兼ねてるのでご理解。<？/DD/DL>
<？DLDT>   main<？/DTDD>                       置換される前の元文書。今回は「<＃LTsv_doc_main>」。置換タグが無ければページの内容がファイルに保存される。<？/DD/DL>
<？DLDT>   tagseparate<？/DTDD>                ループタグ作成用のタグ区切りを指定。「<？https10:LTsv_doc.tsv>」では「*」を使用。<？/DD/DL>
<？DLDT>   skplist<？/DTDD>                    使用しないタグの追加。初期状態で「L:Tsv」とmainで指定したメインタグ例えば「<＃LTsv_doc_main>」は置換対象にならない。今回「<？https10:LTsv_doc.py>」の設定ページ「LTsv_doc」を混ぜてるのでリストに追加してる。<？/DD/DL>
<？DLDT>   outdir<？/DTDD>                     置換されたテキストの出力先フォルダ。<？/DD/DL>
<？DLDT>   outlist<？/DTDD>                    置換されたテキストの出力ファイル名一覧。<？/DD/DL>
<？DLDT>   defdir<？/DTDD>                     Pythonのモジュール等が置いてあるフォルダ。<？/DD/DL>
<？DLDT>   deftag<？/DTDD>                     モジュールファイル名をタグ化するため左右に付けるソルト。例えば「foo.py」を「L:<！\tR:>」で囲って「<！foo.py>」のようにする。<？/DD/DL>
<？DLDT>   defindent<？/DTDD>                  モジュール関数一覧と説明文に装飾するテキスト。「firstL」「firstR」は項目名の左右に。「restL:」「restR」は説明文の左右。「restC」は説明文の「/t」を改行などに置換用。「restRLast」は説明文末尾の「restR」。改行調整用。<？/DD/DL>
|<＃contents10-1>]

[<＃contents10-2>|
<？P> 前提は「L:Tsv」なので「<？index01-1>」も確認。<？BR>
 「main」で指定したページの内容をタグ名で置換していくことで目的の文章を作成します。<？BR>
 タグ名自体はかなり自由に変更できますが、命名規則に規則性があると説明がしやすいので便宜上のルールを用いた解説になります。<？BR><？/P> 

<？index10:skplist>
<？DLDT>  <？&lt;>L:Tsv<？&gt;><？/DTDD>                       「L:Tsv」は「L:Tsv」ファイルのメタタグなのでskplist対象なので置換されません。<？/DD/DL>
<？DLDT>  <？&lt;>LTsv_doc_this<？&gt;>(L:Tsv 1st)<？/DTDD>    「1st」で指定するLTsv_docドキュメント設定ページのタグもskplist対象なので置換されません。<？/DD/DL>
<？DLDT>  <？&lt;>＃LTsv_doc_main(main)<？&gt;><？/DTDD>       「main」指定のページタグ自身もskplist対象なので置換されません。「LTsv_doc」に再帰は存在せず、上から順に置換するのみです。<？/DD/DL>
<？DLDT>  <？&lt;>LTsv_doc<？&gt;>(skplist)<？/DTDD>           「<？https10:LTsv_doc.tsv>」では「<？https10:LTsv_doc.py>」設定ページをskplistに登録してるので置換されません。<？/DD/DL>

<？index10:re.search>
<？DLDT>  <？&lt;>「＃」tag<？&gt;><？/DTDD>                   コメントタグと便宜上命名。タブ文字「\t」を含まないページはタグをページ内容に置換。複数行を想定なので末尾に改行が入る。<？/DD/DL>
<？DLDT>  <？&lt;>「！」tag<？&gt;><？/DTDD>                   ファイルタグと便宜上命名。ファイル名を「deftag」ソルトで囲んだタグはモジュール関数一覧管理用途。<？BR>
                                置換用タグは「<？&lt;>！tag<？&gt;>」形式でもドキュメントのページタグは「[tag<？&#x7C;>」「<？&#x7C;>tag]」形式な事に注意。<？BR>
                                ページ内容は「*.py」「*.tsv」「*.ltsv」の場合「defindent」で装飾して置換。<？BR>
                                「*.png」「*.gif」「*.jpg」「*.jpeg」の場合base64に変換。htmlへの画像埋め込みを想定。画像を再度読み込む場合はページを空にする。<？BR><？/DD/DL>
<？DLDT>  <？&lt;>「？」tag<？&gt;><？/DTDD>                   分岐タグと便宜上命名。タブ文字「\t」を含むページは正規表現による分岐が発生。1行を想定なので末尾に改行は入らない。<？BR>
                                firstの正規表現にoutlistのファイル名が該当する場合にrest1行に置き換えられます。restには日時フォーマットが使えます。<？BR>
                                restを日時フォーマット(カウンター)で置換した結果ページタグ名になった場合、当然の様にページタグの置換対象に(コメントタグなどの末尾改行が付与される可能性)。<？BR>
                                日時フォーマットの詳細は「<？index04-1>」を参考。Pythonで使える正規表現はPythonのドキュメントを参考。<？BR><？/DD/DL>

<？https10:Python_re>
<？index10:separate>
<？P> [<？&lt;>tagA<？&gt;>*<？&lt;>tagB<？&gt;>*<？&lt;>tagC<？&gt;>]のようにタグの中でtagseparate「*」で区切ると、<？&lt;>tagA<？&gt;><？&lt;>tagB<？&gt;><？&lt;>tagC<？&gt;>それぞれのタグを同じページの内容で置換します。<？BR>
tagseparateを使った時は日時フォーマットの「@c(カウンター)」が使えます。カウンターは0から開始します。<？BR>
<？&lt;>tagA<？&gt;>*<？&lt;>tagB<？&gt;>*<？&lt;>tagC<？&gt;>タグの条件文内で<？&lt;>text@c<？&gt;>を呼ぶと<？&lt;>text0<？&gt;><？&lt;>text1<？&gt;><？&lt;>text2<？&gt;>を呼ぶことができます。<？BR>
<？/PP>
[<？&lt;>tagA<？&gt;>*<？&lt;>tagB<？&gt;>*<？&lt;>tagC<？&gt;><？&#x7C;><？BR>
.+\.html?<？@T><？&lt;>a href="#text@c" title="<？&lt;>？text@c<？&gt;>"<？&gt;><？&lt;>？text@c<？&gt;><？&lt;>/a<？&gt;><？BR>
.*<？@T><？&lt;>？text@c<？&gt;><？BR>
<？&#x7C;><？&lt;>tagA<？&gt;>*<？&lt;>tagB<？&gt;>*<？&lt;>tagC<？&gt;>]<？BR>
[<？&lt;>text0<？&gt;><？&#x7C;><？BR>
.*<？@T>text0<？BR>
<？&#x7C;><？&lt;>text0<？&gt;>]<？BR>
[<？&lt;>text1<？&gt;><？&#x7C;><？BR>
.*<？@T>text1<？BR>
<？&#x7C;><？&lt;>text1<？&gt;>]<？BR>
[<？&lt;>text2<？&gt;><？&#x7C;><？BR>
.*<？@T>text2<？BR>
<？&#x7C;><？&lt;>text2<？&gt;>]<？BR>
例えば上記の様に1つのページで複数のタグに同じ装飾指示が出せるという寸法です。<？BR><？/P>
|<＃contents10-2>]
[<？index10:skplist>|
.+\.html?	<h4><？title10:skplist></h4>
.*	 <？title10:skplist>
|<？index10:skplist>]
[<？title10:skplist>|
.*	置換タグ説明の前にskplistに登録され置換対象にならないタグがあります。
|<？title10:skplist>]
[<？index10:re.search>|
.+\.html?	<h4><？title10:re.search></h4>
.*	 <？title10:re.search>
|<？index10:re.search>]
[<？title10:re.search>|
.*	大きく分けて3種類の置換タグがあります。
|<？title10:re.search>]
[<？index10:separate>|
.+\.html?	<h4><？title10:separate></h4>
.*	 <？title10:separate>
|<？index10:separate>]
[<？title10:separate>|
.*	tagseparateによる繰り返し記述でタグの過剰生産を抑制します。
|<？title10:separate>]

[<？section11-0>|
.+\.html?	<section>@E <h3><a name="index11-@c"><？title11-@c></a></h3>@E<＃contents11-@c>@E</section>@E
.*	@E<？title11-@c>@E@E<＃contents11-@c>@E
|<？section11-0>]

[<＃contents11-0>|
<？DLDT> Ｑ．「<？https09:LTsv_glyph.py>」などをダブルクリックしても起動しない。<？/DTDD>
 Ａ．Linuxの場合パーミッションで実行許可されてないのかも。もしWindowsの話でPythonをインストールしてなければ動くはずがないのでPythonをインストール。<？BR>
     Wineで「python-3.4.4.msi」が動かないって話なら「<？https11:python3install.sh>」を参考。「msiexec /i python-3.4.4.msi」の様なコマンドが必要。<？BR>
<？/DD/DL>
<？https11:python.org>
<？https11:python344>
<？DLDT> Ｑ．Pythonはもう3.5系出てますよね？<？/DTDD>
 Ａ．「python-3.5.1.exe」を「wine-portable-1.7.18-1-p4.tar.gz」で試した時エラーになったので放置。<？BR>
     「Visual C++ 2015」のランタイムをインストールすれば動くかもだけどランタイム自体をwineにインストール方法とか未確認。<？BR>
<？/DD/DL>
<？https11:python352>
<？https11:pythonMSVCRTQiita>
<？https11:PortableWine>
<？DLDT> Ｑ．文字表示が複数あるというか、「LTsv_draw_font(<？https08:LTsv_gui.py>)」系と「LTsv_draw_glyphs(<？https09:LTsv_glyph.py>)」系の違いはなんですか。<？/DTDD>
 Ａ．フォント表示とグリフ描画の違いです。<？BR>
    「Tkinter」が<？CP932>を越える3バイト以上のUTF-8文字を扱えないので独自にグリフ描画モジュール用意しました。<？BR>
    「用意しました」と言いましたが一部の文字しか用意できてないので注意。<？BR><？/DD/DL>

<？DLDT> Ｑ．ボタンなどのGUIにグリフ「kan5x5comic」を用いるにはどうすればいいですか。<？/DTDD>
 Ａ．GUIのボタン等に直接グリフは使えません。「kanfont_drawGTK_glyph」「kanfont_drawTkinter_glyph」などは「canvas」に描画する命令です。<？BR>
     GUIでフォントを表示する場合はグリフ「kan5x5.svg」かwebフォント「kan5x5comic.woff」をOSフォント「kan5x5comic.ttf」に変換してフォントをインストール。<？BR><？/DD/DL>

<？DLDT> Ｑ．<？VRkeyboard>ですけど、なんでマウスボタンを押下(クリック)ではなく押上のタイミングで文字入力なんですか？<？/DTDD>
 Ａ．将来的に入力デバイスはタッチパネルに収束すると判断しました。タッチパネルではマウスカーソルの概念自体が希薄になると思います。<？BR>
     ペンタブレットだとペン先を少し浮かした状態でカーソル移動とかあるけど、タッチパネルには指先を少し浮かした状態とか存在しないはず。<？BR>
     文字入力タップ操作はＮＸ等にカーソルをそらすことで入力キャンセルが可能です。<？BR><？/DD/DL>

<？DLDT> Ｑ．なんで中途半端にVimっぽいHJKL移動なんですか？<？/DTDD>
 Ａ．[Up][Down][Left][Right]キーや[Tab]キーはフォーカス移動、[Space]キーは「button」押下など他のGUI操作を巻き込むからです。<？BR><？/DD/DL>

<？DLDT> Ｑ．起動できたたソフトがいつの間にか起動しなくなった。<？/DTDD>
 Ａ．ソフトの強制終了の時などに「LTsv/kanpickle.bin」が破損する場合があります。<？BR>
     「LTsv/kanpickle.bin」を削除してから「<？https11:kanmap.py>」を起動することで初期化できます。<？BR>
    「kanedit」「kanfont」「kanmap」「kanzip」についてはモジュールのドキュメントではなくソフトのドキュメントで扱います。<？BR> <？/DD/DL>
|<＃contents11-0>]

[<？section12-0>|
.+\.html?	<section>@E <h3><a name="index12-@c"><？title12-@c></a></h3>@E<＃contents12-@c>@E</section>@E
.*	@E<？title12-@c>@E@E<＃contents12-@c>@E
|<？section12-0>]

[<＃contents12-0>|
<？P> 更新情報はGitHubやブログを確認してください。<？BR><？/P>

<？https12:github_ooblog>
<？https12:hatena_ooblog>
|<＃contents12-0>]

[<？DICmap>|
.*	漢字配列「<？https00:kanmap.tsv>」
|<？DICmap>]
[<？DICchar>|
.*	単漢字辞書「<？https00:kanchar.tsv>」
|<？DICchar>]
[<？DICword>|
.*	汎用辞書「<？https00:kanword.tsv>」
|<？DICword>]

[<？list00-0>*<？list00-1>*<？list00-2>|
.+\.html?	 <li><？index00-@c></li>@E
.*	 <？index00-@c>@E
|<？list00-0>*<？list00-1>*<？list00-2>]
[<？index00-0>*<？index00-1>*<？index00-2>|
.+\.html?	<a href="#index00-@c" title="<？title00-@c>"><？title00-@c></a>
.*	<？title00-@c>
|<？index00-0>*<？index00-1>*<？index00-2>]
[<？title00-0>|
.*	⓪-0．ライセンス及びソフト使用の補足ガイドライン
|<？title00-0>]
[<？title00-1>|
.*	⓪-1．インストール(ダウンロード・アンインストール)＆セットアップ
|<？title00-1>]
[<？title00-2>|
.*	⓪-2．その他現在わかっている不具合や今後の課題
|<？title00-2>]
[<？https00:LICENSE>*<？https00:kanmap.tsv>*<？https00:kanchar.tsv>*<？https00:kanword.tsv>*<？https00:kanfont.txt>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path00-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path00-F@0c>"><？path00-F@0c></a>
.*	<？path00-F@0c>
|<？https00:LICENSE>*<？https00:kanmap.tsv>*<？https00:kanchar.tsv>*<？https00:kanword.tsv>*<？https00:kanfont.txt>]
[<？path00-F00>|
.*	LICENSE
|<？path00-F00>]
[<？path00-F01>|
.*	LTsv/kanmap.tsv
|<？path00-F01>]
[<？path00-F02>|
.*	LTsv/kanchar.tsv
|<？path00-F02>]
[<？path00-F03>|
.*	LTsv/kanword.tsv
|<？path00-F03>]
[<？path00-F04>|
.*	kanfont.txt
|<？path00-F04>]
[<？https00:kan5x5comic.woff>*<？https00:yakuyon>|
.+\.html?	<a href="<？link00-@c>" title="<？word00-@c>"><？word00-@c></a>
.+\.css	<？link00-@c>
.*	<？word00-@c>
|<？https00:kan5x5comic.woff>*<？https00:yakuyon>]
[<？link00-0>|
.*	https://ooblog.github.io/kan5x5comic.woff
|<？link00-0>]
[<？word00-0>|
.*	kan5x5comic.woff
|<？word00-0>]
[<？link00-1>|
.*	https://ooblog.github.io/
|<？link00-1>]
[<？word00-1>|
.*	約四文字
|<？word00-1>]

[<？list01-0>*<？list01-1>|
.+\.html?	 <li><？index01-@c></li>@E
.*	 <？index01-@c>@E
|<？list01-0>*<？list01-1>]
[<？index01-0>*<？index01-1>|
.+\.html?	<a href="#index01-@c" title="<？title01-@c>"><？title01-@c></a>
.*	<？title01-@c>
|<？index01-0>*<？index01-1>]
[<？title01-0>|
.*	①-0．「L:Tsv」とは(「L:Tsv」と「LTSV」の違い)
|<？title01-0>]
[<？title01-1>|
.*	①-1．「L:Tsv」ファイルの構造
|<？title01-1>]

[<？list02-0>*<？list02-1>|
.+\.html?	 <li><？index02-@c></li>@E
.*	 <？index02-@c>@E
|<？list02-0>*<？list02-1>]
[<？index02-0>*<？index02-1>|
.+\.html?	<a href="#index02-@c" title="<？title02-@c>"><？title02-@c></a>
.*	<？title02-@c>
|<？index02-0>*<？index02-1>]
[<？title02-0>|
.*	②-0．「LTsv_printf.py」の関数一覧
|<？title02-0>]
[<？title02-1>|
.*	②-1．ひらカナの変換「LTsv_kanare()」のLTsv_recaseの変換辞書一覧
|<？title02-1>]
[<？https02:LTsv_printf.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path02-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path02-F@0c>"><？path02-F@0c></a>
.*	<？path02-F@0c>
|<？https02:LTsv_printf.py>]
[<？path02-F00>|
.*	LTsv/LTsv_file.py
|<？path02-F00>]

[<？list03-0>|
.+\.html?	 <li><？index03-@c></li>@E
.*	 <？index03-@c>@E
|<？list03-0>]
[<？index03-0>|
.+\.html?	<a href="#index03-@c" title="<？title03-@c>"><？title03-@c></a>
.*	<？title03-@c>
|<？index03-0>]
[<？title03-0>|
.*	③-0．「LTsv_file.py」の関数一覧
|<？title03-0>]
[<？https03:LTsv_file.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path03-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path03-F@0c>"><？path03-F@0c></a>
.*	<？path03-F@0c>
|<？https03:LTsv_file.py>]
[<？path03-F00>|
.*	LTsv/LTsv_file.py
|<？path03-F00>]

[<？list04-0>*<？list04-1>|
.+\.html?	 <li><？index04-@c></li>@E
.*	 <？index04-@c>@E
|<？list04-0>*<？list04-1>]
[<？index04-0>*<？index04-1>|
.+\.html?	<a href="#index04-@c" title="<？title04-@c>"><？title04-@c></a>
.*	<？title04-@c>
|<？index04-0>*<？index04-1>]
[<？title04-0>|
.*	④-0．「LTsv_time.py」の関数一覧
|<？title04-0>]
[<？title04-1>|
.*	④-1．日時フォーマットの概要
|<？title04-1>]
[<？https04:LTsv_time.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path04-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path04-F@0c>"><？path04-F@0c></a>
.*	<？path04-F@0c>
|<？https04:LTsv_time.py>]
[<？path04-F00>|
.*	LTsv/LTsv_time.py
|<？path04-F00>]

[<？list05-0>*<？list05-1>|
.+\.html?	 <li><？index05-@c></li>@E
.*	 <？index05-@c>@E
|<？list05-0>*<？list05-1>]
[<？index05-0>*<？index05-1>|
.+\.html?	<a href="#index05-@c" title="<？title05-@c>"><？title05-@c></a>
.*	<？title05-@c>
|<？index05-0>*<？index05-1>]
[<？title05-0>|
.*	⑤-0．「LTsv_calc.py」の関数一覧
|<？title05-0>]
[<？title05-1>|
.*	⑤-1．電卓フォーマットの概要
|<？title05-1>]
[<？https05:LTsv_calc.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path05-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path05-F@0c>"><？path05-F@0c></a>
.*	<？path05-F@0c>
|<？https05:LTsv_calc.py>]
[<？path05-F00>|
.*	LTsv/LTsv_calc.py
|<？path05-F00>]

[<？list06-0>*<？list06-1>*<？list06-2>|
.+\.html?	 <li><？index06-@c></li>@E
.*	 <？index06-@c>@E
|<？list06-0>*<？list06-1>*<？list06-2>]
[<？index06-0>*<？index06-1>*<？index06-2>|
.+\.html?	<a href="#index06-@c" title="<？title06-@c>"><？title06-@c></a>
.*	<？title06-@c>
|<？index06-0>*<？index06-1>*<？index06-2>]
[<？title06-0>|
.*	⑥-0．「LTsv_joy.py」の関数一覧
|<？title06-0>]
[<？title06-1>|
.*	⑥-1．「LTsv_joy.tsv」のタグ解説
|<？title06-1>]
[<？title06-2>|
.*	⑥-2．「LTsv_getjoystr()」の<？joyformat_label>一覧
|<？title06-2>]
[<？https06:LTsv_joy.py>*<？https06:LTsv_joy.tsv>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path06-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path06-F@0c>"><？path06-F@0c></a>
.*	<？path06-F@0c>
|<？https06:LTsv_joy.py>*<？https06:LTsv_joy.tsv>]
[<？path06-F00>|
.*	LTsv/LTsv_joy.py
|<？path06-F00>]
[<？path06-F01>|
.*	LTsv/LTsv_joy.tsv
|<？path06-F01>]
[<？joyformat_label>|
.*	joyformat縦軸ラベル(first)
|<？joyformat_label>]

[<？list07-0>*<？list07-1>|
.+\.html?	 <li><？index07-@c></li>@E
.*	 <？index07-@c>@E
|<？list07-0>*<？list07-1>]
[<？index07-0>*<？index07-1>|
.+\.html?	<a href="#index07-@c" title="<？title07-@c>"><？title07-@c></a>
.*	<？title07-@c>
|<？index07-0>*<？index07-1>]
[<？title07-0>|
.*	⑦-0．「LTsv_kbd.py」の関数一覧
|<？title07-0>]
[<？title07-1>|
.*	⑦-1．「LTsv_kbd.tsv」のタグ解説
|<？title07-1>]
[<？https07:LTsv_kbd.py>*<？https07:LTsv_kbd.tsv>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path07-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path07-F@0c>"><？path07-F@0c></a>
.*	<？path07-F@0c>
|<？https07:LTsv_kbd.py>*<？https07:LTsv_kbd.tsv>]
[<？path07-F00>|
.*	LTsv/LTsv_kbd.py
|<？path07-F00>]
[<？path07-F01>|
.*	LTsv/LTsv_kbd.tsv
|<？path07-F01>]

[<？list08-0>*<？list08-1>|
.+\.html?	 <li><？index08-@c></li>@E
.*	 <？index08-@c>@E
|<？list08-0>*<？list08-1>]
[<？index08-0>*<？index08-1>|
.+\.html?	<a href="#index08-@c" title="<？title08-@c>"><？title08-@c></a>
.*	<？title08-@c>
|<？index08-0>*<？index08-1>]
[<？title08-0>|
.*	⑧-0．「LTsv_gui.py」の関数一覧
|<？title08-0>]
[<？title08-1>|
.*	⑧-1．「LTsv_widgetPAGEXYWH()」のオプション一覧
|<？title08-1>]
[<？https08:LTsv_gui.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path08-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path08-F@0c>"><？path08-F@0c></a>
.*	<？path08-F@0c>
|<？https08:LTsv_gui.py>]
[<？path08-F00>|
.*	LTsv/LTsv_gui.py
|<？path08-F00>]

[<？list09-0>*<？list09-1>*<？list09-2>*<？list09-3>*<？list09-4>|
.+\.html?	 <li><？index09-@c></li>@E
.*	 <？index09-@c>@E
|<？list09-0>*<？list09-1>*<？list09-2>*<？list09-3>*<？list09-4>]
[<？index09-0>*<？index09-1>*<？index09-2>*<？index09-3>*<？index09-4>|
.+\.html?	<a href="#index09-@c" title="<？title09-@c>"><？title09-@c></a>
.*	<？title09-@c>
|<？index09-0>*<？index09-1>*<？index09-2>*<？index09-3>*<？index09-4>]
[<？title09-0>|
.*	⑨-0．「LTsv_glyph.py」の関数一覧
|<？title09-0>]
[<？title09-1>|
.*	⑨-1．「LTsv_glyph.tsv」のタグ解説
|<？title09-1>]
[<？title09-2>|
.*	⑨-2．<？VRkeyboard>の操作方法
|<？title09-2>]
[<？title09-3>|
.*	⑨-3．<？VRcalc>の操作方法
|<？title09-3>]
[<？title09-4>|
.*	⑨-4．「漢字逆引きと分数電卓＆数値文字参照＆日時取得＆簡易辞書(LTsv_kbdentry_evaltext())」の詳細
|<？title09-4>]
[<？https09:LTsv_glyph.py>*<？https09:LTsv_glyph.tsv>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path09-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path09-F@0c>"><？path09-F@0c></a>
.*	<？path09-F@0c>
|<？https09:LTsv_glyph.py>*<？https09:LTsv_glyph.tsv>]
[<？path09-F00>|
.*	LTsv/LTsv_glyph.py
|<？path09-F00>]
[<？path09-F01>|
.*	LTsv/LTsv_glyph.tsv
|<？path09-F01>]

[<？list10-0>*<？list10-1>*<？list10-2>|
.+\.html?	 <li><？index10-@c></li>@E
.*	 <？index10-@c>@E
|<？list10-0>*<？list10-1>*<？list10-2>]
[<？index10-0>*<？index10-1>*<？index10-2>|
.+\.html?	<a href="#index10-@c" title="<？title10-@c>"><？title10-@c></a>
.*	<？title10-@c>
|<？index10-0>*<？index10-1>*<？index10-2>]
[<？title10-0>|
.*	⑩-0．「LTsv_doc.py」の関数一覧
|<？title10-0>]
[<？title10-1>|
.*	⑩-1．「LTsv_doc.tsv」のタグ解説
|<？title10-1>]
[<？title10-2>|
.*	⑩-2．LTsv_docドキュメントの書き方
|<？title10-2>]
[<？https10:Python_re>|
.+\.html?	<dl><dt><？web10-@c></dt><dd><a href="<？url10-@c>" title="<？web10-@c>"><？url10-@c></a></dd></dl>
.*	   <？web10-@c><？BR>@E   <？url10-@c><？BR>@E
|<？https10:Python_re>]
[<？url10-0>|
.*	http://docs.python.jp/3/library/re.html
|<？url10-0>]
[<？web10-0>|
.*	6.2. re — 正規表現操作 — Python 3.5.2 ドキュメント
|<？web10-0>]
[<？https10:LTsv_doc.py>*<？https10:LTsv_doc.tsv>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path10-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path10-F@0c>"><？path10-F@0c></a>
.*	<？path10-F@0c>
|<？https10:LTsv_doc.py>*<？https10:LTsv_doc.tsv>]
[<？path10-F00>|
.*	LTsv/LTsv_doc.py
|<？path10-F00>]
[<？path10-F01>|
.*	LTsv/LTsv_doc.tsv
|<？path10-F01>]

[<？list11-0>|
.+\.html?	 <li><？index11-@c></li>@E
.*	 <？index11-@c>@E
|<？list11-0>]
[<？index11-0>*<？index11-1>|
.+\.html?	<a href="#index11-@c" title="<？title11-@c>"><？title11-@c></a>
.*	<？title11-@c>
|<？index11-0>*<？index11-1>]
[<？title11-0>|
.*	⑪-0．「L:Tsv」のＦＡＱ
|<？title11-0>]
[<？https11:python.org>*<？https11:python344>*<？https11:python352>*<？https11:pythonMSVCRTQiita>*<？https11:PortableWine>|
.+\.html?	<dl><dt><？web11-@c></dt><dd><a href="<？url11-@c>" title="<？web11-@c>"><？url11-@c></a></dd></dl>
.*	   <？web11-@c><？BR>@E   <？url11-@c><？BR>@E
|<？https11:python.org>*<？https11:python344>*<？https11:python352>*<？https11:pythonMSVCRTQiita>*<？https11:PortableWine>]
[<？url11-0>|
.*	https://www.python.org/
|<？url11-0>]
[<？web11-0>|
.*	Welcome to Python.org
|<？web11-0>]
[<？url11-1>|
.*	https://www.python.org/downloads/release/python-344/
|<？url11-1>]
[<？web11-1>|
.*	Python Release Python 3.4.4 | Python.org
|<？web11-1>]
[<？url11-2>|
.*	https://www.python.org/downloads/release/python-352/
|<？url11-2>]
[<？web11-2>|
.*	Python Release Python 3.5.2 | Python.org
|<？web11-2>]
[<？url11-3>|
.*	http://qiita.com/methane/items/2210712763b91e75fdf0
|<？url11-3>]
[<？web11-3>|
.*	Windows での Python 2.7, 3.4, 3.5 の拡張モジュールビルド環境 - Qiita
|<？web11-3>]
[<？url11-4>|
.*	http://shinobar.server-on.net/puppy/opt/
|<？url11-4>]
[<？web11-4>|
.*	Index of /puppy/opt (Portable Wine:wine-portable-HELP_ja.html)
|<？web11-4>]
[<？https11:python3install.sh>*<？https11:kanmap.py>|
.+\.html?	<a href="<？url99-9:LTsv10repository>/blob/master/<？path11-F@0c>" title="<？url99-9:LTsv10repository>/blob/master/<？path11-F@0c>"><？path11-F@0c></a>
.*	<？path11-F@0c>
|<？https11:python3install.sh>*<？https11:kanmap.py>]
[<？path11-F00>|
.*	wine_sh/python3install.sh
|<？path11-F00>]
[<？path11-F01>|
.*	kanmap.py
|<？path11-F01>]

[<？list12-0>|
.+\.html?	 <li><？index12-@c></li>@E
.*	 <？index12-@c>@E
|<？list12-0>]
[<？index12-0>*<？index12-1>|
.+\.html?	<a href="#index12-@c" title="<？title12-@c>"><？title12-@c></a>
.*	<？title12-@c>
|<？index12-0>*<？index12-1>]
[<？title12-0>|
.*	⑫-0．作者について、例えば連絡先。
|<？title12-0>]
[<？https12:github_ooblog>*<？https12:hatena_ooblog>|
.+\.html?	<dl><dt><？web12-@c></dt><dd><a href="<？url12-@c>" title="<？web12-@c>"><？url12-@c></a></dd></dl>
.*	   <？web12-@c><？BR>@E   <？url12-@c><？BR>@E
|<？https12:github_ooblog>*<？https12:hatena_ooblog>]
[<？url12-0>|
.*	<？url99-9:LTsv10repository>
|<？url12-0>]
[<？web12-0>|
.*	ooblog/LTsv10kanedit(GitHub)
|<？web12-0>]
[<？url12-1>|
.*	http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]
|<？url12-1>]
[<？web12-1>|
.*	[kanedit] - 大風呂ダ敷
|<？web12-1>]

[<？ooblog>|
.+\.html?	# <？Copyright><br />@E# <？LicenseMIT><br />@E# <？https99-9:LTsv10LICENSE><br />@E
.*	# <？Copyright>@E# <？LicenseMIT>@E# <？https99-9:LTsv10LICENSE>@E
|<？ooblog>]
[<？https99-9:LTsv10LICENSE>|
.+\.html?	<a href="<？url99-9:LTsv10LICENSE>" title="<？title99-9:LTsv10LICENSE>"><？url99-9:LTsv10LICENSE></a>
.*	<？url99-9:LTsv10LICENSE>
|<？https99-9:LTsv10LICENSE>]
[<？url99-9:LTsv10LICENSE>|
.*	<？url99-9:LTsv10repository>/blob/master/LICENSE
|<？url99-9:LTsv10LICENSE>]
[<？title99-9:LTsv10LICENSE>|
.*	LTsv10kanedit/LICENSE at master · ooblog/LTsv10kanedit
|<？title99-9:LTsv10LICENSE>]
[<？https99-9:LTsv10repository>|
.+\.html?	<a href="<？url99-9:LTsv10repository>" title="<？title99-9:LTsv10repository>"><？url99-9:LTsv10repository></a>
.*	<？url99-9:LTsv10repository>
|<？https99-9:LTsv10repository>]
[<？url99-9:LTsv10repository>|
.*	https://github.com/ooblog/LTsv10kanedit
|<？url99-9:LTsv10repository>]
[<？title99-9:LTsv10repository>|
.*	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
|<？title99-9:LTsv10repository>]
[<？https99-9:LTsv_doc.py>|
.+\.html?	<a href="https://github.com/ooblog/LTsv10kanedit/blob/master/LTsv/<？url99-9:LTsv_doc.py>" title="<？title99-9:LTsv_doc.py>"><？url99-9:LTsv_doc.py></a>
.*	<？url99-9:LTsv_doc.py>
|<？https99-9:LTsv_doc.py>]
[<？url99-9:LTsv_doc.py>|
.*	LTsv_doc.py
|<？url99-9:LTsv_doc.py>]
[<？title99-9:LTsv_doc.py>|
.*	LTsv10kanedit/LTsv_doc.py at master · ooblog/LTsv10kanedit
|<？title99-9:LTsv_doc.py>]

[<？yakuyon>|
.*	「約四文字」(http://ooblog.github.io/)
|<？yakuyon>]
[<？Copyright>|
.*	Copyright (c) 2016 ooblog
|<？Copyright>]
[<？LicenseMIT>|
.*	License: MIT
|<？LicenseMIT>]
[<？LTsv>|
.*	LTsv10kanedit(tsvtool10)
|<？LTsv>]
[<？modify_style>|
.*	<！L:TsvLTsvver>形式(@@000y@@0m@@0dm@@wdec@@0h@@0n@@0s)
|<？modify_style>]
[<？modify>|
.*	@000y@0m@0dm@wdec@0h@0n@0s
|<？modify>]
[<？CP932>|
.*	CP932(いわゆるシフトJIS、BMP基本多言語面0xffff範囲内)
|<？CP932>]
[<？gamepad>|
.*	ジョイスティック(ゲームPAD)
|<？gamepad>]
[<？PCkeyboard>|
.*	PCキーボード
|<？PCkeyboard>]
[<？keycode00FF>|
.*	キーコード($00〜$FF)
|<？keycode00FF>]
[<？tasktrayNotify>|
.*	通知タスクトレイ(Notify)
|<？tasktrayNotify>]
[<？GUIwidget>|
.*	GUIオブジェクト(widget)
|<？GUIwidget>]
[<？reversi>|
.*	リバーシー
|<？reversi>]
[<？VRkeyboard>|
.*	漢直鍵盤
|<？VRkeyboard>]
[<？VRcalc>|
.*	テキスト入力欄(電卓)
|<？VRcalc>]

[<？outlist>|
.+\.html?	LTsv_doc.html
.+\.css	LTsv_doc.css
.*	LTsv_doc.txt
|<？outlist>]

[<？P>|
.+\.html?	<p>@E
.*	
|<？P>]
[<？/PP>|
.+\.html?	</p><p>
.*	
|<？/PP>]
[<？/P>|
.+\.html?	@E</p>
.*	
|<？/P>]
[<？DLDT>|
.+\.html?	<dl><dt>@E
.*	
|<？DLDT>]
[<？/DTDD>|
.+\.html?	</dt>@E<dd>@E
.*	
|<？/DTDD>]
[<？/DD/DL>|
.+\.html?	@E</dd></dl>
.*	
|<？/DD/DL>]
[<？BR>|
.+\.html?	<br />
.*	
|<？BR>]

[<？firstL>|
.+\.html?	<dl><dt>
.*	 【
|<？firstL>]
[<？firstR>|
.+\.html?	</dt>
.*	】@E
|<？firstR>]
[<？restL>|
.+\.html?	<dd>@E
.*	  
|<？restL>]
[<？restC>|
.+\.html?	<br />@E
.*	@E  
|<？restC>]
[<？restR>|
.+\.html?	</dd></dl>@E
.*	@E@E
|<？restR>]
[<？restRLast>|
.+\.html?	</dd></dl>
.*	
|<？restRLast>]

[<？&lt;>|
.+\.html?	&lt;
.*	<
|<？&lt;>]
[<？&gt;>|
.+\.html?	&gt;
.*	>
|<？&gt;>]
[<？&#x7C;>|
.+\.html?	&#x7C;
.*	|
|<？&#x7C;>]
[<？@T>|
.*	@T
|<？@T>]


# Copyright (c) 2016 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
