[L:Tsv|
code	UTF-8
enter	LF
tab	4
program	LTsv_doc.py
1st		LTsv_doc
LTsvver	20161023U011852
modify	20161108T043144
|L:Tsv]

[LTsv_doc|
window_size	width:600	height:480	wait:10	fontsize:24
tsvlist	LTsv_doc.tsv	../../ooblog.github.io/yakuyon.tsv
modify	@000y@0m@0dm@wdec@0h@0n@0s
main	<＃LTsv_doc_main>
outdir	./
outlist	LTsv_doc.txt	../docs/LTsv_doc.html	../docs/LTsv_doc.css
defdir	./
deftag	L:<！	R:>
defindent	firstL:<？firstL>	firstR:<？firstR>	restL:<？restL>	restC:<？restC>	restR:<？restR>	restRLast:<？restRLast>
|LTsv_doc]

[<＃LTsv_doc_main>|
<？LTsv_doc_ext>
|<＃LTsv_doc_main>]

[<？LTsv_doc_ext>|
.+\.html?	<＃LTsv_doc_html>
.+\.css	<＃LTsv_doc_css>
.*	<＃LTsv_doc_txt>
|<？LTsv_doc_ext>]

[<＃LTsv_doc_txt>|
<＃summary>

目次

 <？index0-0>
 <？index0-1>
 <？index0-2>
 <？index1-0a>
 <？index1-0b>
 <？index1-1a>
 <？index1-1b>
 <？index1-2>
 <？index1-3a>


<？index0-0>

<＃contents0-0>

<？index0-1>

<＃contents0-1>

<？index0-2>

<＃contents0-2>

<？index1-0a>

<＃contents1-0a>

<？index1-0b>

<＃contents1-0b>

<？index1-1a>

<＃contents1-1a>

<？index1-1b>

<＃contents1-1b>

<？index1-2>

<＃contents1-2>

<？index1-3a>

<＃contents1-3a>

<？ooblog>
|<＃LTsv_doc_txt>]

[<＃LTsv_doc_html>|
<？DOCTYPE html>
<html lang="ja"><head>
 <meta charset="UTF-8" />
 <meta name="description" content="">
 <title><？title></title>
 <link rel="stylesheet" type="text/css" href="LTsv_doc.css" />
 <link rel="icon" type="image/png" href="" />
</head><body>

<header>
<h1><？title></h1>
<＃summary>
<h2>目次</h2>
<ul>
 <li><？index0-0></li>
 <li><？index0-1></li>
 <li><？index0-2></li>
 <li><？index1-0a></li>
 <li><？index1-0b></li>
 <li><？index1-1a></li>
 <li><？index1-1b></li>
 <li><？index1-2></li>
 <li><？index1-3a></li>
</ul>
</header>

<section>
<h3><a name="index0-0"><？title:index0-0></a></h3>
<＃contents0-0>
</section>

<section>
<h3><a name="index0-1"><？title:index0-1></a></h3>
<＃contents0-1>
</section>

<section>
<h3><a name="index0-2"><？title:index0-2></a></h3>
<＃contents0-2>
</section>

<section>
<h3><a name="index1-0a"><？title:index1-0a></a></h3>
<＃contents1-0a>
</section>

<section>
<h3><a name="index1-0b"><？title:index1-0b></a></h3>
<＃contents1-0b>
</section>

<section>
<h3><a name="index1-1a"><？title:index1-1a></a></h3>
<＃contents1-1a>
</section>

<section>
<h3><a name="index1-1b"><？title:index1-1b></a></h3>
<＃contents1-1b>
</section>

<section>
<h3><a name="index1-2"><？title:index1-2></a></h3>
<＃contents1-2>
</section>

<section>
<h3><a name="index1-3a"><？title:index1-3a></a></h3>
<＃contents1-3a>
</section>

<footer>
 <p>site generator repository：<？https://github.com/ooblog/LTsv10kanedit></p>
 <p><？ooblog></p>
</footer>
</body></html>
|<＃LTsv_doc_html>]

[<＃LTsv_doc_css>|
@charset "utf-8";
@font-face{
  font-family: "kan5x5comic";
  src: url("kan5x5comic.woff") format('woff');
}
header{
  border: 1px gray dotted;
  padding: 1rem;
}
section{
  margin-top: 1rem;
  border: 2px black solid;
  padding: 1rem;
}
article{
  margin-top: 0.5rem;
  border: 1px gray solid;
  padding: 1rem;
}
dt{
  font-weight: bold;
  word-wrap: break-word; word-break: break-all;
}
dd{
  word-wrap: break-word; word-break: break-all;
}
h1{ font-size: 2.0rem; margin: 1rem 0.5rem 0.5rem; }
h2{ font-size: 1.8rem; margin: 1rem 0.5rem 0.5rem; }
h3{ font-size: 1.6rem; margin: 1rem 0.5rem 0.5rem; }
h4{ font-size: 1.4rem; margin: 1rem 0.5rem 0.5rem; }
h5{ font-size: 1.2rem; margin: 1rem 0.5rem 0.5rem; }
h6{ font-size: 1.0rem; margin: 1rem 0.5rem 0.5rem; }

/*
<？ooblog>
*/

|<＃LTsv_doc_css>]

[<？title>|
.*	<？LTsv>モジュール解説(「LTsv/LTsv_doc.tsv」を「LTsv/LTsv_doc.py」で「docs/LTsv.html」に変換)
|<？title>]

[<＃summary>|
<？P>「LTsv_doc」は「<？LTsv>」を用いたドキュメント生成ツールです。<？BR>
このモジュール解説文書「<？outlist>」も「LTsv_doc」を使って「<？github:ooblog/LTsv10kanedit/LTsv/LTsv_doc.tsv>」から錬成されてます。<？BR>
version(branch) <！L:TsvLTsvver><？BR>
modify <？modify><？BR><？/P>
|<＃summary>]

[<？index0-0>|
.+\.html?	<a href="<？url:index0-0>" title="<？title:index0-0>"><？title:index0-0></a>
.*	<？title:index0-0>\0
|<？index0-0>]
[<？url:index0-0>|
.*	#index0-0
|<？url:index0-0>]
[<？title:index0-0>|
.*	０-0． ライセンス及びソフトの使用の補足ガイドライン
|<？title:index0-0>]
[<＃contents0-0>|
<？P> ※「MIT License」準拠。<？BR><？/P>
<？http://choosealicense.com/licenses/mit/>
<？P> ※「MIT License」の日本語訳。<？BR><？/P>
<？https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>
<？P> ※日本語による補足。<？BR>
   ・複製物にも「MIT License」の「<？github:ooblog/LTsv10kanedit/blob/master/LICENSE>」ファイルを添付る事(著作権表示を誤魔化さない事)。<？BR>
   ・いかなる場合においても作者または著作権所有者は一切責任を負わない事。<？BR>
   ・ソースコードの閲覧やコピーに制限を設けない事。<？BR>
<？/PP>
 ※「kanedit」固有の問題への言及。<？BR>
   ・単漢字辞書「LTsv/kanchar.tsv」汎用辞書「kanword.tsv」などで翻訳ミスもしくは言い回しが古くなるなど人間語不具合に対してもメンテナンス義務はありません。<？BR><？/P>
|<＃contents0-0>]
[<？http://choosealicense.com/licenses/mit/>|
.+\.html?	<dl><dt><？title:http://choosealicense.com/licenses/mit/></dt><dd><a href="<？url:http://choosealicense.com/licenses/mit/>" title="<？title:http://choosealicense.com/licenses/mit/>"><？url:http://choosealicense.com/licenses/mit/></a></dd></dl>
.*	   <？title:http://choosealicense.com/licenses/mit/><？BR>\n   <？url:http://choosealicense.com/licenses/mit/><？BR>\n
|<？http://choosealicense.com/licenses/mit/>]
[<？url:http://choosealicense.com/licenses/mit/>|
.*	http://choosealicense.com/licenses/mit/
|<？url:http://choosealicense.com/licenses/mit/>]
[<？title:http://choosealicense.com/licenses/mit/>|
.*	MIT License - Choose a License
|<？title:http://choosealicense.com/licenses/mit/>]
[<？https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>|
.+\.html?	<dl><dt><？title:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license></dt><dd><a href="<？url:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>" title="<？title:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>"><？url:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license></a></dd></dl>
.*	   <？title:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license><？BR>\n   <？url:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license><？BR>\n
|<？https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>]
[<？url:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>|
.*	https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license
|<？url:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>]
[<？title:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>|
.*	MIT License - Choose a License
|<？title:https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license>]

[<？index0-1>|
.+\.html?	<a href="<？url:index0-1>" title="<？title:index0-1>"><？title:index0-1></a>
.*	<？title:index0-1>\0
|<？index0-1>]
[<？url:index0-1>|
.*	#index0-1
|<？url:index0-1>]
[<？title:index0-1>|
.*	０-1． インストール(ダウンロード・アンインストール)＆セットアップ
|<？title:index0-1>]
[<＃contents0-1>|
<？P> ダウンロードは「<？https://github.com/ooblog/LTsv10kanedit>」にある「Clone or download」ボタンを押すと出る「Download ZIP」メニューをクリック。<？BR>
 インストールは任意(なるだけユーザーディレクトリ内)のフォルダに「LTsv10kanedit-master.zip」を解凍するだけです。<？BR>
 「kan5x5comic.ttf」を用意する場合は「kan5x5.svg」から「FontForge」で変換するか「kan5x5comic.woff」を「WOFFコンバーター」変換(「kanfont.txt」を参考)。<？BR>
 Wineを使う予定がある場合は「wine_sh」フォルダ内の[*.sh]のWineパスを適宜修正。<？BR>
 ※Pythonは別途インストールされているものとします(Pythonの導入分からない人は「<？index3-0>」も参考)。<？BR><？/P>
|<＃contents0-1>]

[<？index0-2>|
.+\.html?	<a href="<？url:index0-2>" title="<？title:index0-2>"><？title:index0-2></a>
.*	<？title:index0-2>\0
|<？index0-2>]
[<？url:index0-2>|
.*	#index0-2
|<？url:index0-2>]
[<？title:index0-2>|
.*	０-2． その他現在わかっている不具合や今後の課題
|<？title:index0-2>]
[<＃contents0-2>|
<？P> Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)で開発しています。Windows,cygwin,darwinなどでの動作は確認しておりません。<？BR>
 フォント「kan5x5comic」は半角と全角の幅の比率が約5:3(1024:624)なのでアスキーアートで問題になる場合があります。グリフ不足で表示できない文字などあります。<？BR>
 「kanpickle.bin」にグリフ座標データが蓄積されるまでは動作が重いです。「kanmap.py」で解決できます。<？BR>
 「kan5x5.svg」を「kan5x5comic.ttf」に変換する手段として「FontForge」が必要。直接フォント生成したいけど優先順位が低い。<？BR>
 現在人名に使える漢字の異体字を漢字配列「kanmap.tsv」から単漢字辞書「kanchar,tsv」に移管作業中。なので漢字鍵盤の漢字配列が大幅に変更するかも。<？BR>
 Windowsのエディタで[kanchar.tsv]を編集すると3バイト以上の文字が「?」に置き換えられる恐れがある。カレー()がよく巻き添え<？BR>
 マウスボタンの取得は保留。ホイールの取得は放置。tkk方面は手を出さない予定(コンボボックスなどはGTKのみサポート)。<？BR>
 GTKのコールバックからデータを受けとる方法が不明のため、GUIイベント経由のPCキーボード取得やファイルダイアログからのキャンセル取得などが不明。<？BR>
 ドキュメント全体でグリフとフォントの言葉の使い分けルールが曖昧な気がする。<？BR><？/P>
|<＃contents0-2>]

[<？index1-0a>|
.+\.html?	<a href="<？url:index1-0a>" title="<？title:index1-0a>"><？title:index1-0a></a>
.*	<？title:index1-0a>\0
|<？index1-0a>]
[<？url:index1-0a>|
.*	#index1-0a
|<？url:index1-0a>]
[<？title:index1-0a>|
.*	１-0a．「L:Tsv」「tsvtool」と「LTSV」の違い
|<？title:index1-0a>]
[<＃contents1-0a>|
<？P> データ間の区切りをタブ(\t)、「label:data」の様にコロン(:)でデータにラベルを付けたのが「LTSV」です。<？BR>
 素のLTSVファイル自体は単なるログのフォーマットです。<？BR>
<？/P>
<？http://ltsv.org/>
<？http://d.hatena.ne.jp/naoya/20130209/1360381374>
<？P> 「L:Tsv」は「*.tsv」「*.ltsv」ファイルの事を差す場合もありますがLTSVパーサ類を含めた「tsvtool」も含めて「L:Tsv」と呼ぶ場合があります。<？BR>
 複数のLTSVを１つのファイルで保存できるようタグで区切ったり、日時処理や分数電卓やGTK＆Tkinterなどを加えたり、Python2,3のprint関数バージョン違いを吸収させたりと、<？BR>
 LTSVパーサに雑多な拡張を重ねていった結果、漢直エディタ環境と化したモジュール群が今の「L:Tsv」です。<？BR><？/P>
|<＃contents1-0a>]
[<？http://ltsv.org/>|
.+\.html?	<dl><dt><？title:http://ltsv.org/></dt><dd><a href="<？url:http://ltsv.org/>" title="<？title:http://ltsv.org/>"><？url:http://ltsv.org/></a></dd></dl>
.*	   <？title:http://ltsv.org/><？BR>\n   <？url:http://ltsv.org/><？BR>\n
|<？http://ltsv.org/>]
[<？url:http://ltsv.org/>|
.*	http://ltsv.org/
|<？url:http://ltsv.org/>]
[<？title:http://ltsv.org/>|
.*	Labeled Tab-separated Values (LTSV)
|<？title:http://ltsv.org/>]
[<？http://d.hatena.ne.jp/naoya/20130209/1360381374>|
.+\.html?	<dl><dt><？title:http://d.hatena.ne.jp/naoya/20130209/1360381374></dt><dd><a href="<？url:http://d.hatena.ne.jp/naoya/20130209/1360381374>" title="<？title:http://d.hatena.ne.jp/naoya/20130209/1360381374>"><？url:http://d.hatena.ne.jp/naoya/20130209/1360381374></a></dd></dl>
.*	   <？title:http://d.hatena.ne.jp/naoya/20130209/1360381374><？BR>\n   <？url:http://d.hatena.ne.jp/naoya/20130209/1360381374><？BR>\n
|<？http://d.hatena.ne.jp/naoya/20130209/1360381374>]
[<？url:http://d.hatena.ne.jp/naoya/20130209/1360381374>|
.*	http://d.hatena.ne.jp/naoya/20130209/1360381374
|<？url:http://d.hatena.ne.jp/naoya/20130209/1360381374>]
[<？title:http://d.hatena.ne.jp/naoya/20130209/1360381374>|
.*	LTSV FAQ - LTSV って何? どういうところが良いの?
|<？title:http://d.hatena.ne.jp/naoya/20130209/1360381374>]

[<？index1-0b>|
.+\.html?	<a href="<？url:index1-0b>" title="<？title:index1-0b>"><？title:index1-0b></a>
.*	<？title:index1-0b>\0
|<？index1-0b>]
[<？url:index1-0b>|
.*	#index1-0b
|<？url:index1-0b>]
[<？title:index1-0b>|
.*	１-0b．「L:Tsv」ファイルの構造
|<？title:index1-0b>]
[<＃contents1-0b>|
<？P>  データ間の区切りはタブ(\t)です。一般的なCSVやLTSV等と事なり、複数のタブがあっても1つのタブとみなします(文字列長0のデータを扱う場合はラベル推奨)。<？BR>
 先頭データの事をfirst、先頭以降のデータの事をrestと呼びます。例えばLispでも、car関数の代わりにfirst関数、cdr関数の代わりにrest関数が使えたはず。<？BR>
 firstは縦軸ラベルとして使う場合があります。restでは「label:data」の様なラベルとデータをコロン(:)で区切る形の軸ラベルが付けられます。簡単に言うとrestでLTSVが使えます。<？BR>
 LTSVを「[tag|」と「|tag]」の様に<？contents1-0b:tagsplit><？BR>
 拡張子は「.ltsv」か「.tsv」。メモリ上など拡張子で区別できない場合でもメタタグで判定。メタタグが存在しない場合ファイル全体を１つのページとみなす。<？BR>
<？/PP>
 メタタグ「L:Tsv」のfirst縦軸ラベルの解説。<？BR>
<？DLDT>  [L:Tsv|<？/DTDD>                    「L:Tsv」ファイルの宣言です。マジックナンバー代わりなのでなるだけファイルの先頭に。<？/DD/DL>
<？DLDT>   code<？/DTDD>                       文字コードの宣言で「UTF-8」。Windowsだろうが半角は3バイトで保存するので注意。<？/DD/DL>
<？DLDT>   enter<？/DTDD>                      改行の宣言で「LF」。Windowsだろうが改行は1バイトで保存するので注意。<？/DD/DL>
<？DLDT>   tab<？/DTDD>                        タブインデントの宣言で半角スペース「4」。フォント「kan5x5comic」の半角と全角の幅の比率は約5:3(1024:624)なので注意。<？/DD/DL>
<？DLDT>   program<？/DTDD>                    「L:Tsv」ファイルをどの様に扱うかを表す規格名(プログラム名)を記述。例えば「LTsv_doc」では「LTsv_doc.py」。<？/DD/DL>
<？DLDT>   1st<？/DTDD>                        「L:Tsv」自体を何かのスクリプトとして実行する場合に最初に実行するページ指定を想定。例えば「LTsv_doc」では「LTsv_doc_tsv」など。<？/DD/DL>
<？DLDT>   LTsvver<？/DTDD>                    構文解析パーサのバージョン。「LTsv_file.py」の「LTsv_file_ver()」。<？/DD/DL>
<？DLDT>   modify <？/DTDD>                    「L:Tsv」ファイルの更新日時。「LTsv_time.py」の「LTsv_getdaytimestr(overhour=24,diffminute=0)」を想定。「LTsv_file.py」で「LTsv_savefile()」上書き時に更新。<？/DD/DL>
<？DLDT>  |L:Tsv]<？/DTDD>                    メタタグ「L:Tsv」を閉じます。<？contents1-0b:tagsplit><？/DD/DL>
<？P>
「L:Tsv」のメタタグは「LTsv_newfile()」関数でも作成可能。「<？index1-2>」も参考。<？BR><？/P>
|<＃contents1-0b>]
[<？contents1-0b:tagsplit>|
.*	タグで区切る事で１つのファイルに複数のCSVやLTSVやTXTといったページを格納できます。
|<？contents1-0b:tagsplit>]

[<？index1-1a>|
.+\.html?	<a href="<？url:index1-1a>" title="<？title:index1-1a>"><？title:index1-1a></a>
.*	<？title:index1-1a>\0
|<？index1-1a>]
[<？url:index1-1a>|
.*	#index1-1a
|<？url:index1-1a>]
[<？title:index1-1a>|
.*	１-1a．「LTsv_printf.py」の関数一覧
|<？title:index1-1a>]
[<＃contents1-1a>|
<？P> Pythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。<？BR>
 ・Wine上DOSのエラー要因だった<？CP932>などに変換させる事で漢字をある程度(BMP基本多言語面0xffff範囲内)扱えるようになります。<？BR>
 ・変換できない文字は数値文字参照に変換されます。<？BR>
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。<？BR>
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。<？BR><？/P>

<！LTsv_printf.py>
|<＃contents1-1a>]

[LTsv_printf.py|
LTsv_libc_printf(LTsv_text,LTsv_log=None)	LTsv_textの文字列をターミナル(stdout)に表示する。LTsv_logに変数名を指定する事で変数にも出力追記できる。	LTsv_textに渡す文字列は「"{0}".format(data)」みたいに事前に「str.format()」などで加工する。	扱えない文字は数値文字参照(「咖喱」が「&#21654;&#21937;」)に変換される。	「ctypes.cdll.msvcrt(MS-DOS)」は1024バイト(文字数ではなくバイト)を超える文字列を扱えない様子。
LTsv_libc_printcat(LTsv_text)	上記LTsv_libc_printfからログ保存やL:Tsvタグエスケープ処理などを取り除いたもの。
LTsv_libc_printf_type(LTsv_text)	Python2の「<type 'str'>」Python3の「「<class 'bytes'>」のようにprintfに渡すバイナリ文字列の変数の型を表示。
LTsv_utf2xml(LTsv_text)	LTsv_textの文字列を数値文字参照に変換。
LTsv_xml2utf(LTsv_text)	LTsv_textの文字参照(数値文字参照含む)を文字列に変換。
LTsv_kanare(LTsv_before,LTsv_recase)	全角半角大文字小文字ひらがなカタカナの変換を行います。LTsv_beforeに変換する文字列、LTsv_recaseで変換辞書指定。	変換辞書LTsv_recaseのパラメータは「<？index1-1b>」を参考。
LTsv_utf2ink(LTsv_text)	UTF-8をkantrayの「UTF-8点字」に変換(バイナリの点字表記)。	点字フォントが表示できる環境にないと動作確認は困難なので注意。
LTsv_ink2utf(LTsv_text)	上記「UTF-8点字」をUTF-8に戻す。	 データ破損を補完する機能はないので注意。
LTsv_subprocess(LTsv_subprocess_input="",LTsv_subprocess_shell=False)	ターミナルにコマンドを送る。実行結果も取得できる。	「LTsv_subprocess_shell=True」でより複雑な事もできるようになるが、インジェクション脆弱性の恐れが発生するので注意。
|LTsv_printf.py]

[<？index1-1b>|
.+\.html?	<a href="<？url:index1-1b>" title="<？title:index1-1b>"><？title:index1-1b></a>
.*	<？title:index1-1b>\0
|<？index1-1b>]
[<？url:index1-1b>|
.*	#index1-1b
|<？url:index1-1b>]
[<？title:index1-1b>|
.*	１-1b．「LTsv_kanare()」のLTsv_recaseの変換辞書一覧
|<？title:index1-1b>]
[<＃contents1-1b>|
<？DLDT>   "Hira2Kata"<？/DTDD>         ひらがなをカタカナに。<？/DD/DL>
<？DLDT>   "Kata2Hira"<？/DTDD>         カタカナをひらがなに。<？/DD/DL>
<？DLDT>   "HiraKana2SeiH"<？/DTDD>     濁音を清音に。「ぱぴぷぺぽ」と「ぱぴぷぺぽ」は「はひふへほ」に。<？/DD/DL>
<？DLDT>   "HiraKana2SeiM"<？/DTDD>     濁音を清音に。「ばびぶべぼ」は「はひふへほ」に、「ぱぴぷぺぽ」を「まみむめも」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakB"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakP"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に、「まみむめも」を「ぱぴぷぺぽ」に。<？/DD/DL>
<？DLDT>   "HiraKana2Han"<？/DTDD>      ひらがなもカタカナも半角に。<？/DD/DL>
<？DLDT>   "HiraKana2HanKaKe"<？/DTDD>  ひらがなもカタカナも「ヵヶ」も半角に。<？/DD/DL>
<？DLDT>   "Han2HiraEz"<？/DTDD>        半角をひらがなに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2KataEz"<？/DTDD>        半角をカタカナに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2Hira"<？/DTDD>          半角をひらがなに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Han2Kata"<？/DTDD>          半角をカタカナに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Alpha2BIG"<？/DTDD>         半角全角にかかわらずアルファベットを大文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2SML"<？/DTDD>         半角全角にかかわらずアルファベットを小文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2HAN"<？/DTDD>         大文字小文字にかかわらずアルファベットを半角に(キリル文字ギリシャ文字含まない)。<？/DD/DL>
<？DLDT>   "Alpha2ZENBS"<？/DTDD>       大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「＼」へ。<？/DD/DL>
<？DLDT>   "Alpha2ZENYen"<？/DTDD>      大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「￥」へ。<？/DD/DL>
|<＃contents1-1b>]

[<？index1-2>|
.+\.html?	<a href="<？url:index1-2>" title="<？title:index1-2>"><？title:index1-2></a>
.*	<？title:index1-2>\0
|<？index1-2>]
[<？url:index1-2>|
.*	#index1-2
|<？url:index1-2>]
[<？title:index1-2>|
.*	１-2． 「LTsv_file.py」の関数一覧
|<？title:index1-2>]
[<＃contents1-2>|
<？P> Pythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。<？BR>
 ・Wine上DOSのエラー要因だった<？CP932>に変換させる事で(変換できない文字は数値文字参照)漢字をある程度扱えるようになります。<？BR>
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。<？BR>
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。<？BR><？/P>

<！LTsv_file.py>
|<＃contents1-2>]

[LTsv_file.py|
LTsv_newfile(LTsv_program,LTsv_default=None)	「L:Tsv」ファイルを変数上に作成する。	 LTsv_programには「L:Tsv」ファイルを扱うプログラムまたは規格を記述。	LTsv_defaultには「L:Tsv」ファイル自体をスクリプトとして実行する場合の1stページの指定。	メタタグについては「<？index1-0b>」も参考。
LTsv_download(LTsv_url,LTsv_path,LTsv_reporthook=None)	ネット上のLTsv_urlにあるファイルをローカルのLTsv_pathに保存する。	ダウンロード中にLTsv_reporthook(count,blocksize,totalsize)をコールバックして状況報告させる事は可能(スレッド関係の扱いに注意)。
LTsv_zipload(LTsv_zip,LTsv_name,LTsv_path)	ローカル上のLTsv_zipにあるファイルをローカルのLTsv_pathに解凍する。
LTsv_loadfile(LTsv_path,LTsv_encoding="utf-8",LTsv_default=None)	ローカル上のLTsv_pathから「L:Tsv」ファイルを読み込む。	LTsv_encodingにテキストのコード指定。例えば<？CP932>を読み込むときは「LTsv_encoding="cp932"」が必要。	LTsv_defaultは読み込みできなかった場合の初期値を指定。
LTsv_readlinepages(LTsv_text)	LTsv_textテキスト内のタグ「[tag|」一覧を1行のLTSVとして取得する。
LTsv_getpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれた範囲のLTSVページを取得。	LTsv_default(LTsv_page)はページを取得できなかった場合の初期値を指定。
LTsv_readlinedeno(LTsv_text)	LTSVページの行数を数える。LTsv_textに改行が無くても1行とみなす。	LTsv_textの文字列長が0の場合0を返す。
LTsv_readlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	0から数えた行数でLTSVページから1行読み込む。	LTsv_default(LTsv_line)は読み込めなかった場合の初期値を指定。
LTsv_readlinefirsts(LTsv_text)	LTSVページのfirst(縦軸ラベル)一覧を1行のLTSVとして取得。
LTsv_readlinerest(LTsv_text,LTsv_first,LTsv_default=None)	LTSVページからfirst(縦軸ラベル)指定で先頭以下データrestを1行読み込む。first(縦軸ラベル)の取得にはタブ文字が必要。	LTsv_default(LTsv_rest)はrestが読み込めなかった場合の初期値を指定。
LTsv_pickdatadeno(LTsv_line)	1行のLTSVに含まれるデータ個数を取得(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_pickdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVから0から数えた項目数指定で1個読み込む(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_split_label_data(LTsv_labeldata,LTsv_seldata=True)	「label:data」からlabelかdataのどちらかを取得。LTsv_seldataがTrueならdata部分を、Falseならlabel部分を返す。
LTsv_pickdatas(LTsv_line,LTsv_dataL=0,LTsv_dataR=0)	1行のLTSVから0から数えた項目数指定で範囲内の複数データを読み込む(firstも0個目のデータとみなす)。いわゆるスライス操作。	LTsv_dataLとLTsv_dataRが逆(Tsv_dataRの方が小さい)の場合でも関数内で自動的に並び替える。	LTsv_dataLとLTsv_dataRが同じ場合差分が無いので読み込まない。
LTsv_pickdatafind(LTsv_line,LTsv_find)	LTsv_findが1行のLTSVの何項目にデータがあるか0から数える(firstも0個目のデータとみなす)。
LTsv_joindatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にLTsv_default(LTsv_data)を追加する。	LTsv_datanumが0以下の場合先頭firstに追加。項目数以上の場合末尾に追加。	省略もしくは文字列長0の場合は何もしない。
LTsv_setdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にデータLTsv_default(LTsv_data)を上書する。	負数の場合や項目数以上の場合は何もしない。	 LTsv_default(LTsv_data)を省略もしくは文字列長0のデータの場合は項目を削除。
LTsv_pickdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVから「label:data」形式の横軸ラベル(LTsv_label)指定で1個読み込む。	LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。
LTsv_pickdic(LTsv_text,LTsv_first,LTsv_label)	「LTsv_readlinerest()」と「LTsv_pickdatalabel()」をひとまとめに。単漢字辞書「LTsv/kanchar.tsv」読込用途。	first(縦軸ラベル)で指定行、restの横軸ラベル(LTsv_label)で指定列、データ1個を読み込む。
LTsv_setdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVの「label:data」形式横軸ベル(LTsv_label)項指定でデータLTsv_default(LTsv_data)を上書する。	元LTSVに存在しない横軸ラベル(LTsv_label)の場合末尾に追加。	LTsv_default(LTsv_data)を省略した場合に項目はラベルごと削除。	文字列長0のデータLTsv_default(LTsv_data)であっても省略しなかった場合は横軸ラベル項目を追加もしくは上書き。	上記LTsv_joindatanumやLTsv_setdatanumと事なりLTsv_setdatalabelでは「label:」が単独で存在(文字列0の「data」が存在できる)違いがあるので注意。
LTsv_sievelabels(LTsv_rest,LTsv_labels="")	データそのままにラベルを取り替える。	文字列0の「data」(データ数よりラベル数が多い場合を想定)は項目が消えるので注意。
LTsv_sievetuplelabels(LTsv_rest,*LTsv_labels)	「LTsv_sievelabels()」とほぼ同じだが、LTsv_labelがLTSVではなくタプル。
LTsv_pushlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を追加する。	1行追加想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は何もしない。
LTsv_overlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を上書する。	1行上書想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は1行削除。
LTsv_pushlinerest(LTsv_page,LTsv_first,LTsv_default=None)	LTSVページにfirst(縦軸ラベル)指定でFirstにrest(LTsv_default)を追加する。	LTsv_page内にLTsv_firstが存在しない場合LTsv_page末尾に追加。	LTsv_rest(LTsv_default)を省略した場合に項目を削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。	文字列長0のrestデータでも縦軸ラベルfirst(縦軸ラベル)の末尾にはタブ文字が付加(「first\t\n」)。
LTsv_putpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれたLTSVページとしてLTsv_default(LTsv_page)を上書き。	LTsv_text内にLTsv_tagタグが存在しない場合末尾に追加。タグ名が文字列長0の場合は何もしない。	LTsv_page(LTsv_default)を省略の場合はページ削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。
LTsv_putmodify(LTsv_text)	メタタグ「L:Tsv」の「modify」の更新のみを行う。「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールが必要。	「LTsv_newfile()」や「LTsv_savefile()」実行時と「LTsv_putmodify()」の時間はズレる場合がある事に注意。
LTsv_savedir(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が1個フォルダを必要とする場合、1個フォルダを作成する。	「os.mkdir()」を使うので、一気に深い階層のフォルダを作ろうとするとエラーになる。	「LTsv_savefile()」「LTsv_saveplain()」の内部で使用。
LTsv_savedirs(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が複数のフォルダを必要とする場合、複数のフォルダを作成する。	「os.makedirs()」を使って一気に深い階層のフォルダを作れてしまうので取扱い注意。
LTsv_savefile(LTsv_path,LTsv_default=None)	ローカルのLTsv_pathに「L:Tsv」ファイル、LTsv_default(LTsv_text)を書き込む。ファイル保存時にメタタグ「L:Tsv」の「modify」の更新。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成。	LTsv_default(LTsv_text)を省略の場合はファイル削除(フォルダはそのまま)。
LTsv_saveplain(LTsv_path,LTsv_plain)	ローカルのLTsv_pathにテキストファイルLTsv_plainを(LTsv_text)書き込む。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。
LTsv_labelzip(LTsv_labels,LTsv_datas)	LTsv_labelsを横軸ラベル、LTsv_datasをデータとして、	「label/tlabel/t…」と「data/tdata/t…」を1行のLTSV「label:data/tlabel:data/t…」に束ねる。
LTsv_unziplabel(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からラベルだけを取り出して「label/tlabel/t…」に。
LTsv_unzipdata(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からデータだけを取り出して「data/tdata/t…」に。
LTsv_unziplabelsdata(LTsv_line,LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはtsv形式。
LTsv_unziptuplelabelsdata(LTsv_line,*LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはPythonのタプル形式。
LTsv_tuple2tsv(LTsv_tuple)	Pythonのタプルやリストをtsvに。	forループよりjoin使った方が速い的なPythonあるある。
LTsv_tsv2list(LTsv_line,LTsv_len=None)	tsvをPythonのリストに。	左辺でunpackする場合受けとる変数の個数をLTsv_lenで指定。	LTsv_lenがデータ数より多い場合は0文字列が補完される。
LTsv_tsv2tuple(LTsv_line,LTsv_len=None)	「LTsv_tsv2list()」のタプルバージョン。
LTsv_intstr0x(LTsv_codestr)	"0xff","$80"のように16進数っぽいものは16進数で数値に、そうでないものは10進数と思ってint変換。		try節で囲む手間を省きたい場合に便利。
LTsv_label2dictint(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは数値化。
LTsv_label2dictstr(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは文字列化。
LTsv_dict2label(LTsv_dict)	Pythonの辞書「{"label":data,"label":data,…}」をLTSV「label:data/tlabel:data/t…」に。dataは文字列化。
LTsv_file_ver()	「LTsv_file.py」のバージョン表示(<！L:TsvLTsvver>)。
LTsv_issue()	「/etc/issue」を開いてLinuxのディストリビューションの種類を探る。バージョンの確認方法はディストリ毎に異なる予感。
|LTsv_file.py]

[<？index1-3a>|
.+\.html?	<a href="<？url:index1-3a>" title="<？title:index1-3a>"><？title:index1-3a></a>
.*	<？title:index1-3a>\0
|<？index1-3a>]
[<？url:index1-3a>|
.*	#index1-3a
|<？url:index1-3a>]
[<？title:index1-3a>|
.*	１-3a．「LTsv_time.py」の関数一覧
|<？title:index1-3a>]
[<＃contents1-3a>|
<？P> 日時フォーマットモジュールです。FPSも扱います。徹夜日時という概念があります。<？BR>
 ・とりあえず日時を取得する場合は「LTsv_getdaytimestr(overhour=24,diffminute=0)」で。<？BR>
 ・<？modify_style>だと困るのであればフォーマット指定。<？BR>
 ・徹夜日時とは正子(夜中の午前0時)を24時として日付を切り替えずに25時(夜中の1時)、26時(夜中の2時)…と時だけが過ぎる状態です。<？BR>
 ・ISOカレンダーの週はISO8601の1月4日を含む週(最初の木曜日を含む週)を第1週と数える方法。曜日は月曜から始まるので土日は週末。ISOカレンダーの曜は月曜が1で土曜が6、日曜が7。<？BR>
 ・単体風テストでは複数の日時フォーマットを用いて関数群の挙動確認ができます。<？BR><？/P>

<！LTsv_time.py>
|<＃contents1-3a>]


[LTsv_time.py|
LTsv_yearleap(LTsv_toyear)	閏年ならTrue。
LTsv_yearweeks(LTsv_toyear)	一年の間に週(ISOカレンダーの週)が何回あるか、年間の週数52〜53を返す。
LTsv_monthleap(LTsv_toyear,LTsv_tomonth)	一月の間に日が何回あるか、28〜31を返す。閏年なら2月は29日。
LTsv_beat864(LTsv_tohour,LTsv_tominute,LTsv_tosecond)	(LTsv_Beat,LTsv_BeatInteger,LTsv_BeatPoint)のタプルを返す。	LTsv_Beatは1日の秒数0?86399(86400)。@Beatはその秒数を86.4で割った一日を1000分割する数。	LTsv_BeatIntegerは@Beatの整数部分。LTsv_BeatPointは@Beatの小数部分。
LTsv_checkFPS()	LTsv_checkFPS()自身を1秒間に何回実行できるか計測。0〜999の範囲。
LTsv_setdaytimeshift()	日時フォーマット用の日時変数(LTsv_meridian_nowなど)を再計算する。	通常は「LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()」から呼び出される内部関数。
LTsv_setdaytimeoption(overhour=None,diffminute=None)	現在時刻をLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。
LTsv_putdaytimespecify(LTsv_toyear,LTsv_tomonth,LTsv_today,LTsv_tohour,LTsv_tominute,LTsv_tosecond,LTsv_tomicrosecond,overhour=None,diffminute=None)	LTsv_meridian_nowに格納された日時を元に日時フォーマット用の各種日時変数(徹夜日時など)を再計算する。	通常はLTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()から呼び出される内部関数。
LTsv_putdaytimenow(overhour=None,diffminute=None)	現在時刻を「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimeearlier(overhour=None,diffminute=None)	最後に実行された「LTsv_putdaytimenow()」の時刻「LTsv_earlier_now」を再度「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimemodify(LTsv_path,overhour=None,diffminute=None)	ファイルLTsv_pathの更新時刻タイムスタンプをLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。	OSやファイルシステム毎に秒や分の精度に違いがあると思う。
LTsv_putdaytimever(LTsv_verstr,overhour=None,diffminute=None)	「LTsv_time_ver()」などの<？modify_style>をLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_getdaytimestr(timeformat=None,overhour=None,diffminute=None)	日付フォーマットtimeformatを各種日時変数で置換する。	timeformatのデフォルト値は「@000y@0m@0dm@wdec@0h@0n@0s」。	日付フォーマットの概要は「<？index1-3b>」を参照。
LTsv_settimershift()	日時フォーマット用のタイマー変数(LTsv_lap_nowなど)を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_settimershiftoption()	LTsv_start_nowとLTsv_goal_nowの差分を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_puttimerstartgoal(microsecond=None,millisecond=None,seconds=None,minute=None,hour=None,day=None)	タイマーのLTsv_goal_nowを数秒後(seconds)・数分後(minute)・数時間後(hour)・数日後(day)などいずれかに設定する。	例えば三分後を指定する場合「LTsv_puttimerstartgoal(minute=3)」と入力。	複数のパラメータを同時指定した場合、例えば分と秒なら秒優先というように細かい方の単位が採用される(内部ではmicrosecondで計算)。
LTsv_puttimerspecify(LTsv_toyear,LTsv_tomonth,LTsv_today,LTsv_tohour,LTsv_tominute,LTsv_tosecond,LTsv_tomicrosecond)	タイマーのLTsv_goal_nowを設定する。	省略したパラメーターは現在日時が代入される(予定)。
LTsv_puttimerlap()	タイマーの経過時間をLTsv_passed_TotalSecondsに、残り時間をLTsv_timeleft_TotalSecondsに設定する。各種タイマー変数も計算。
LTsv_gettimerstr(timeformat=None)	日付フォーマットtimeformatを各種タイマー変数で置換する。	timeformatのデフォルト値は「@0h@0n@0s.0Rs」。時間フォーマットの概要は「<？index1-3b>」を参照。
|LTsv_time.py]
LTsv_puttimerspecify(LTsv_toyear,LTsv_tomonth,LTsv_today,LTsv_tohour,LTsv_tominute,LTsv_tosecond,LTsv_tomicrosecond)	タイマーのLTsv_goal_nowを設定する。	省略したパラメーターは現在日時が代入される(予定)。

[LTsv_calc.py|
LTsv_calc_GCM(LTsv_calcL,LTsv_calcR)	
LTsv_calc_LCM(LTsv_calcL,LTsv_calcR)	
LTsv_calc_bracketsbalance(LTsv_calcQbase)	
LTsv_calc_decimalize(LTsv_calcQbase)	
LTsv_calc_fractalize(LTsv_calcQbase)	
LTsv_calc(LTsv_calcQbase)	
LTsv_calc_function(LTsv_calcQbase)	
LTsv_calc_addition(LTsv_calcQbase,LTsv_Count)	
LTsv_calc_multiplication(LTsv_calcQbase)	
|LTsv_calc.py]

[LTsv_joy.py|
LTsv_joyreset(LTsv_tsvpath)	
LTsv_joyexit()	
LTsv_joyinit(LTsv_tsvpath="LTsv/LTsv_joy.tsv")	
LTsv_setjoydata(LTsv_joyid,LTsv_default=None)	
LTsv_getjoystr(LTsv_joyid,joyformat=None)	
LTsv_atanscalar(LTsv_atanX,LTsv_atanY)	
LTsv_atanclock(LTsv_atanX,LTsv_atanY,LTsv_labels)	
LTsv_joyaxis_label()	
|LTsv_joy.py]

[LTsv_kbd.py|
LTsv_kbdreset(LTsv_tsvpath)	
LTsv_kbdgettypename(LTsv_code)	
LTsv_kbdgettypekana(LTsv_code)	
LTsv_kbdgettypecode(LTsv_name)	
LTsv_kbdgettypegana(LTsv_gana)	
LTsv_kbdexit()	
LTsv_kbdinit(LTsv_tsvpath="LTsv/LTsv_kbd.tsv",LTsv_initmouse=False)	
LTsv_kbdEVIOCGRAB(LTsv_grabflag)	
LTsv_kbdwrite(LTsv_code,LTsv_press)	
LTsv_kbdwriteCtrl(LTsv_ganastsv)	
LTsv_setkbddata(LTsv_kbdstacks,LTsv_mousestacks)	
LTsv_getkbdlabels(kbdformat=LTsv_defkbdformat)	
LTsv_getkbdnames()	
LTsv_getkbdcodes()	
LTsv_getkbdkanas()	
|LTsv_kbd.py]

[LTsv_gui.py|
LTsv_guiCDLLver(LTsv_libname,LTsv_libvermin,LTsv_libvermax)	
LTsv_guiinit(LTsv_guistyle=LTsv_GUI_GTK2,LTsv_libvermin=0,LTsv_libvermax=0)	
LTsv_global_GUI()	
LTsv_global_Notify()	
LTsv_global_GTK2()	
LTsv_global_Tkinter()	
LTsv_global_WinAPI()	
LTsv_global_libgtk()	
LTsv_global_libgdk()	
LTsv_global_libobj()	
LTsv_global_canvasmotionZ()	
LTsv_global_canvasmotionX(motionZ=None)	
LTsv_global_canvasmotionY(motionZ=None)	
LTsv_global_canvascolor()	
LTsv_global_canvasbgcolor()	
LTsv_global_canvasTAG(TkinterTAG=None)	
LTsv_global_widgetltsv(new_LTSV=None)	
LTsv_global_widgetgetpage(LTsv_widgetPAGENAME)	
LTsv_global_widgetOBJ(LTsv_objid)	
LTsv_global_pictureOBJ(LTsv_objid)	
LTsv_global_pictureW(LTsv_objid)	
LTsv_global_pictureH(LTsv_objid)	
LTsv_global_iconOBJ(LTsv_objid)	
LTsv_global_popupmenuOBJ(LTsv_objid)	
LTsv_widget_newUUID(LTsv_widgetID=None)	
LTsv_widget_newobj(LTsv_widgetPAGE,LTsv_widgetoption,widget_obj)	
LTsv_widget_getobj(LTsv_widgetPAGE,LTsv_widgetoption)	
LTsv_widgetPAGEXYWH(LTsv_widgetPAGE,widget_o=None,widget_k=None,widget_t=None,widget_u=None,widget_s=None,widget_e=None,widget_a=None,widget_v=None,widget_b=None, \	
LTsv_fonttuple(LTsv_line)	
LTsv_GTKwidget_fixed(window_c,widget_o,widget_x,widget_y,widget_w,widget_h,widget_f=None,widget_d=False)	
LTsv_hideondelete_shell(LTsv_windowPAGENAME)	
LTsv_window_new(widget_n=None,event_b=None,widget_t="LTsv_window",widget_w=200,widget_h=120,event_z=None,event_k=None,event_y=None)	
LTsv_widget_settext(LTsv_widgetPAGENAME,widget_t="")	
LTsv_widget_gettext(LTsv_widgetPAGENAME)	
LTsv_widget_setnumber(LTsv_widgetPAGENAME,widget_s=0)	
LTsv_widget_getnumber(LTsv_widgetPAGENAME)	
LTsv_widget_seturi(LTsv_widgetPAGENAME,widget_u="")	
LTsv_widget_geturi(LTsv_widgetPAGENAME)	
LTsv_widget_showhide(LTsv_widgetPAGENAME,widget_i)	
LTsv_widget_disableenable(LTsv_widgetPAGENAME,widget_i)	
LTsv_widget_focus(LTsv_widgetPAGENAME)	
LTsv_window_main(LTsv_windowPAGENAME)	
LTsv_window_after(LTsv_windowPAGENAME,event_b=None,event_i="mousemotion",event_w=1000)	
LTsv_window_foreground()	
LTsv_window_title(LTsv_window_id)	
LTsv_window_exit(window_objvoid=None,window_objptr=None)	
LTsv_window_none(window_objvoid=None,window_objptr=None)	
LTsv_screen_w(LTsv_windowPAGENAME="")	
LTsv_screen_h(LTsv_windowPAGENAME="")	
LTsv_window_wh(LTsv_windowPAGENAME)	
LTsv_window_w(LTsv_windowPAGENAME)	
LTsv_window_h(LTsv_windowPAGENAME)	
LTsv_window_resize(LTsv_windowPAGENAME,widget_w=16,widget_h=16)	
LTsv_label_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_label",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_image_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_logo.png",widget_x=0,widget_y=0)	
LTsv_button_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_button",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_check_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_check",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_radio_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_radio",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_clipboard_new(LTsv_windowPAGENAME,widget_n=None)	
LTsv_clipmenu_new(widget_o)	
LTsv_edit_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_edit",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_entry_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_entry",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_spin_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_scale_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16)	
LTsv_scale_adjustment(LTsv_widgetPAGENAME,widget_s=0,widget_e=255,widget_a=1)	
LTsv_combobox_list(LTsv_widgetPAGENAME,widget_t="")	
LTsv_combobox_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)	
LTsv_canvas_new(LTsv_windowPAGENAME,widget_n=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,event_p=None,event_r=None,event_e=None,event_m=None,event_l=None,event_w=100)	
LTsv_drawGTK_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG")	
LTsv_drawTkinter_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG")	
LTsv_draw_selcanvas_shell(LTsv_GUI)	
LTsv_drawGTK_delete(draw_c="white")	
LTsv_drawTkinter_delete(draw_c="white")	
LTsv_draw_delete_shell(LTsv_GUI)	
LTsv_drawTkinter_deleteTAG(TkinterTAG=None)	
LTsv_draw_deleteTAG_shell(LTsv_GUI)	
LTsv_drawGTK_color(draw_c="")	
LTsv_drawTkinter_color(draw_c="")	
LTsv_draw_color_shell(LTsv_GUI)	
LTsv_drawGTK_bgcolor(draw_c="")	
LTsv_drawTkinter_bgcolor(draw_c="")	
LTsv_draw_bgcolor_shell(LTsv_GUI)	
LTsv_drawGTK_gcfcolor()	
LTsv_drawGTK_gcbcolor()	
LTsv_drawGTK_polygon(*draw_xy)	
LTsv_drawTkinter_polygon(*draw_xy)	
LTsv_draw_polygon_shell(LTsv_GUI)	
LTsv_drawGTK_polygonfill(*draw_xy)	
LTsv_drawTkinter_polygonfill(*draw_xy)	
LTsv_draw_polygonfill_shell(LTsv_GUI)	
LTsv_drawTkinter_fontfill(*draw_xy)	
LTsv_drawGTK_squares(draw_wh=16,*draw_xy)	
LTsv_drawTkinter_squares(draw_wh=16,*draw_xy)	
LTsv_draw_squares_shell(LTsv_GUI)	
LTsv_drawGTK_squaresfill(draw_wh=16,*draw_xy)	
LTsv_drawTkinter_squaresfill(draw_wh=16,*draw_xy)	
LTsv_draw_squaresfill_shell(LTsv_GUI)	
LTsv_drawGTK_circles(draw_wh=16,*draw_xy)	
LTsv_drawTkinter_circles(draw_wh=16,*draw_xy)	
LTsv_draw_circles_shell(LTsv_GUI)	
LTsv_drawGTK_circlesfill(draw_wh=16,*draw_xy)	
LTsv_drawTkinter_circlesfill(draw_wh=16,*draw_xy)	
LTsv_draw_circlesfill_shell(LTsv_GUI)	
LTsv_drawGTK_points(*draw_xy)	
LTsv_drawTkinter_points(*draw_xy)	
LTsv_draw_points_shell(LTsv_GUI)	
LTsv_drawGTK_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	
LTsv_drawTkinter_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	
LTsv_draw_arc_shell(LTsv_GUI)	
LTsv_drawGTK_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	
LTsv_drawTkinter_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi)	
LTsv_draw_arcfill_shell(LTsv_GUI)	
LTsv_drawGTK_font(draw_f="")	
LTsv_drawTkinter_font(draw_f=None)	
LTsv_draw_font_shell(LTsv_GUI)	
LTsv_drawGTK_text(draw_t="",draw_x=0,draw_y=0)	
LTsv_drawTkinter_text(draw_t="",draw_x=0,draw_y=0)	
LTsv_draw_text_shell(LTsv_GUI)	
LTsv_draw_picture_load(LTsv_picturepath)	
LTsv_draw_picture_celldiv(LTsv_picturepath,picture_divw,picture_divh)	
LTsv_draw_picture_save(LTsv_pictureoldpath,LTsv_picturenewpath)	
LTsv_draw_canvas_save(LTsv_canvasPAGENAME,LTsv_picturenewpath)	
LTsv_drawGTK_picture(draw_t="",draw_x=0,draw_y=0)	
LTsv_drawTkinter_picture(draw_t="",draw_x=0,draw_y=0)	
LTsv_draw_picture_shell(LTsv_GUI)	
LTsv_drawGTK_queue()	
LTsv_drawTkinter_queue()	
LTsv_draw_queue_shell(LTsv_GUI)	
LTsv_clockwise(*draw_xy)	
LTsv_icon_load(LTsv_picturepath)	
LTsv_notifyicon_new(LTsv_windowPAGENAME,notify_n=None,widget_t="",widget_u="",menu_b=None,menu_c=None)	
LTsv_filedialog_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_filedialog",dialog_t=0)	
debug_canvas(window_objvoid=None,window_objptr=None)	
debug_timebutton(callback_void=None,callback_ptr=None)	
debug_calc(callback_void=None,callback_ptr=None)	
debug_polygonpoints(callback_void=None,callback_ptr=None)	
debug_activewindow(callback_void=None,callback_ptr=None)	
debug_canvas_press(callback_void=None,callback_ptr=None)	
debug_polygonbutton(callback_void=None,callback_ptr=None)	
debug_color_scale(window_objvoid=None,window_objptr=None)	
debug_color_combo(window_objvoid=None,window_objptr=None)	
debug_edit_clip(window_objvoid=None,window_objptr=None)	
debug_checkbutton_shell(checkNumber)	
debug_radiobutton_shell(radioNumber)	
debug_keypress(window_objvoid=None,window_objptr=None)	
debug_keyrelease(window_objvoid=None,window_objptr=None)	
debug_filedialog(window_objvoid=None,window_objptr=None)	
debug_filedialog_response(window_objvoid=None,window_objptr=None)	
|LTsv_gui.py]

[LTsv_glyph.py|
LTsv_glyph_kbdinit(LTsv_tsvpath="LTsv/LTsv_glyph.tsv",LTsv_glyph_GUI="",LTsv_glyph_kbddefsize=None)	
LTsv_global_kandic(new_kandic=None)	
LTsv_global_kanmap()	
LTsv_global_kanmapN()	
LTsv_global_kanmapX()	
LTsv_global_kanpickle()	
LTsv_global_irohatype()	
LTsv_global_irohatypeN()	
LTsv_global_irohatypeX()	
LTsv_global_alphatype()	
LTsv_global_alphatypeN()	
LTsv_global_alphatypeX()	
LTsv_global_dictype()	
LTsv_global_glyphtype()	
LTsv_global_choice()	
LTsv_global_choiceN()	
LTsv_global_choiceX()	
LTsv_global_evaltype()	
LTsv_global_irohaalpha()	
LTsv_global_irohaalphaN()	
LTsv_global_irohaalphaX()	
LTsv_global_kbdchars()	
LTsv_global_glyphkbdH()	
LTsv_global_glyphkbdW()	
LTsv_global_glyphkbdF()	
LTsv_global_kbdcursorNone()	
LTsv_glyphSVG5x10x(LTsv_glyph_path)	
LTsv_glyphSVG(LTsv_glyph_path)	
LTsv_glyphpath(glyphcode)	
LTsv_glyphfont_5x5(glyphcode)	
LTsv_glyphfont_comic(glyphcode)	
LTsv_glyphfont_brush(glyphcode)	
LTsv_glyphfont_shell(draw_g="活")	
LTsv_draw_glyphs(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)	
LTsv_draw_glyphsfill(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)	
LTsv_draw_glyphskbd(draw_t,draw_x=0,draw_y=0,draw_f=5,draw_g="活")	
LTsv_draw_glyphsentry(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_cL=0,draw_cR=0,draw_g="漫",draw_LF=False,draw_HT=False)	
LTsv_draw_glyphclock(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	
LTsv_draw_glyphclockfill(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	
LTsv_draw_glyphcursor(draw_t="",draw_x=0,draw_y=0,path_z=0,draw_s=0,grid_p=-1,grid_q=-1,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")	
LTsv_draw_glypwide(draw_t="",draw_x=0,draw_y=0,draw_s=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_W="#9F6C00")	
LTsv_draw_glyphmouse(draw_t="",draw_x=0,draw_y=0,path_z=0,grid_x=LTsv_PSchar_ZW//2,grid_y=LTsv_PSchar_ZW//2,mouse_x=LTsv_PSchar_ZW//2,mouse_y=LTsv_PSchar_ZW//2,draw_f=LTsv_PSchar_ZW//2,draw_g="活")	
LTsv_glyph_getnote(draw_t="",draw_g="活")	
LTsv_glyph_pointsrotation(glyphnote=[])	
LTsv_glyph_points2path(draw_t="",glyphnote=[],draw_g="活")	
LTsv_glyph_text2path(draw_t="",kanpath="",draw_g="俗")	
LTsv_glyph_kbdcursor(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_kbdselect(choice)	
LTsv_glyph_choiceNX(choice)	
LTsv_glyph_kbdfind(find_t)	
LTsv_glyph_tapcallback_shell(kbd_canvas,callback)	
LTsv_glyph_mousepress(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_mousemotion(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_mouserelease(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_typeNXK(glyphtype_getkbdnames,kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_typepress(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_typerelease(kbd_canvas,kbd_x,kbd_y)	
LTsv_glyph_kbddelete(kbd_canvas)	
LTsv_glyph_kbddraw(kbd_canvas,kbd_x,kbd_y,kbd_c=LTsv_glyph_None)	
LTsv_glyph_picklesave()	
LTsv_evaltext(calc_value="")	
LTsv_glyph_calcsetup(calc_canvas,calculatorX=0,calculatorY=0,calculatorW=LTsv_global_glyphkbdW(),calculatorH=LTsv_global_glyphkbdH(),calculatorC=None,calculatorB=None,calculatorT="")	
LTsv_glyph_calcresize(calc_canvas,calculatorX=None,calculatorY=None,calculatorW=None,calculatorH=None,calculatorT=None,calculatorTX=None,calculatorTC=None)	
LTsv_glyph_calcdelete(calc_canvas)	
LTsv_glyph_calcdraw(calc_canvas)	
LTsv_glyph_calcdrawplane(calc_canvas,calc_canvascolor=None)	
LTsv_glyph_widecache(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_g="漫")	
LTsv_glyph_calcglyphs(calc_canvas)	
LTsv_glyph_calcpress(calc_canvas)	
LTsv_glyph_calcmotion(calc_canvas)	
LTsv_glyph_calcrelease(calc_canvas)	
LTsv_glyph_calcenter(calc_canvas)	
LTsv_glyph_calcleave(calc_canvas)	
LTsv_glyph_calcinput(calc_canvas,glyph_calcrinput)	
LTsv_glyph_calctype(calc_canvas)	
LTsv_glyph_calctypelimited(calc_canvas,kbd_x,kbd_y)	
debug_calculatormousepress(window_objvoid=None,window_objptr=None)	
debug_calculatormousemotion(window_objvoid=None,window_objptr=None)	
debug_calculatormouserelease(window_objvoid=None,window_objptr=None)	
debug_calculatormouseleave(window_objvoid=None,window_objptr=None)	
debug_calculatormouseenter(window_objvoid=None,window_objptr=None)	
debug_calculatormouseinput(calculatormouseinput)	
debug_reversi_mousepress(window_objvoid=None,window_objptr=None)	
debug_reversi_mousemotion(window_objvoid=None,window_objptr=None)	
debug_reversi_mouserelease(window_objvoid=None,window_objptr=None)	
debug_reversi_keypress(window_objvoid=None,window_objptr=None)	
debug_reversi_keyrelease(window_objvoid=None,window_objptr=None)	
debug_milklid_check(xy,bw)	
debug_milklid_turn(xy,bw)	
debug_milkAI_BS(window_objvoid=None,window_objptr=None)	
debug_milkAI_reset()	
debug_milkAI_entry(window_objvoid=None,window_objptr=None)	
debug_milkAI_Auto(window_objvoid=None,window_objptr=None)	
debug_milkAI_add(addentry)	
debug_configload()	
debug_configsave_exit(window_objvoid=None,window_objptr=None)	
|LTsv_glyph.py]

[<？github:ooblog/LTsv10kanedit/LTsv/LTsv_doc.tsv>|
.+\.html?	<a href="<？url:https://github.com/ooblog/LTsv10kanedit>/<？LTsv/LTsv_doc_tsv>" title="<？url:https://github.com/ooblog/LTsv10kanedit>/<？LTsv/LTsv_doc_tsv>"><？LTsv/LTsv_doc_tsv></a>
.*	LTsv/LTsv_doc.tsv
|<？github:ooblog/LTsv10kanedit/LTsv/LTsv_doc.tsv>]
[<？LTsv/LTsv_doc_tsv>|
.*	LTsv/LTsv_doc.tsv
|<？LTsv/LTsv_doc_tsv>]

[<？github:ooblog/LTsv10kanedit/blob/master/LICENSE>|
.+\.html?	<a href="<？url:https://github.com/ooblog/LTsv10kanedit>/<？blob/master/LICENSE>" title="<？url:https://github.com/ooblog/LTsv10kanedit>/<？blob/master/LICENSE>">LICENSE</a>
.*	LICENSE
|<？github:ooblog/LTsv10kanedit/blob/master/LICENSE>]
[<？blob/master/LICENSE>|
.*	blob/master/LICENSE
|<？blob/master/LICENSE>]

[<？ooblog>|
.+\.html?	# <？Copyright><？BR>\n# <？LicenseMIT><？BR>\n# <？https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE><？BR>\n
.*	# <？Copyright>\n# <？LicenseMIT>\n# <？https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>\n
|<？ooblog>]
[<？Copyright>|
.*	Copyright (c) 2016 ooblog
|<？Copyright>]
[<？LicenseMIT>|
.*	License: MIT
|<？LicenseMIT>]
[<？https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>|
.+\.html?	<a href="<？url:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>" title="<？title:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>"><？url:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE></a>
.*	<？url:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>\0
|<？https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>]
[<？url:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>|
.*	https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
|<？url:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>]
[<？title:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>|
.*	LTsv10kanedit/LICENSE at master · ooblog/LTsv10kanedit
|<？title:https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE>]

[<？https://github.com/ooblog/LTsv10kanedit>|
.+\.html?	<a href="<？url:https://github.com/ooblog/LTsv10kanedit>" title="<？title:https://github.com/ooblog/LTsv10kanedit>"><？url:https://github.com/ooblog/LTsv10kanedit></a>
.*	<？url:https://github.com/ooblog/LTsv10kanedit>\0
|<？https://github.com/ooblog/LTsv10kanedit>]
[<？url:https://github.com/ooblog/LTsv10kanedit>|
.*	https://github.com/ooblog/LTsv10kanedit
|<？url:https://github.com/ooblog/LTsv10kanedit>]
[<？title:https://github.com/ooblog/LTsv10kanedit>|
.*	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。:
|<？title:https://github.com/ooblog/LTsv10kanedit>]

[<？LTsv>|
.*	LTsv10kanedit(tsvtool10)
|<？LTsv>]
[<？modify_style>|
.*	<？modify>形式(@@000y@@0m@@0dm@@wdec@@0h@@0n@@0s)
|<？modify_style>]
[<？modify>|
.*	@000y@0m@0dm@wdec@0h@0n@0s
|<？modify>]
[<？CP932>|
.*	CP932(いわゆるシフトJIS、BMP基本多言語面0xffff範囲内)
|<？CP932>]
[<？outlist>|
.+\.html?	LTsv_doc.html
.+\.css	LTsv_doc.css
.*	LTsv_doc.txt
|<？outlist>]

[<？P>|
.+\.html?	<p>\n
.*	
|<？P>]
[<？/PP>|
.+\.html?	</p><p>
.*	
|<？/PP>]
[<？/P>|
.+\.html?	\n</p>
.*	
|<？/P>]
[<？DLDT>|
.+\.html?	<dl><dt>\n
.*	
|<？DLDT>]
[<？/DTDD>|
.+\.html?	</dt>\n<dd>\n
.*	
|<？/DTDD>]
[<？/DD/DL>|
.+\.html?	\n</dd></dl>
.*	
|<？/DD/DL>]
[<？BR>|
.+\.html?	<br />
.*	
|<？BR>]
[<？firstL>|
.+\.html?	<dl><dt>
.*	 【
|<？firstL>]
[<？firstR>|
.+\.html?	</dt>
.*	】\n
|<？firstR>]
[<？restL>|
.+\.html?	<dd>\n
.*	  
|<？restL>]
[<？restC>|
.+\.html?	<br />\n
.*	\n  
|<？restC>]
[<？restR>|
.+\.html?	</dd></dl>\n
.*	\n\n
|<？restR>]
[<？restRLast>|
.+\.html?	</dd></dl>
.*	
|<？restRLast>]

# Copyright (c) 2016 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
