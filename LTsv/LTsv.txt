「LTsv10kanedit(tsvtool10)」は「L:Tsv」の読み書きを中心としたモジュール群です。
version(branch) 20161023U011852

目次

 ０-0． ライセンス及びソフトの使用の補足ガイドライン
 ０-1． インストール＆アンインストール方法・その他セットアップ方法
 ０-2． バージョン「LTsv9kantray(tsvtool9)」から「「LTsv10kanedit(tsvtool10)」への変更予定など。
 ０-3． その他現在わかっている不具合や今後の課題。
 １-0a．「L:Tsv」の解説(このドキュメント「LTsv.txt」は「kantray」ではなく「L:Tsv」をメインに書いてます)。
 １-0b．「L:Tsv」ファイルの構造。
 １-1． [LTsv_printf.py]の関数一覧
 １-2． [LTsv_file.py]の関数一覧
 １-3a．[LTsv_time.py]の関数一覧
 １-3b．日時フォーマットの概要
 １-4． [LTsv_calc.py]の関数一覧
 １-4b．電卓フォーマットの概要
 １-5a．[LTsv_joy.py]の関数一覧
 １-5b．[LTsv_joy.tsv]のタグ解説
 １-6a．[LTsv_kbd.py]の関数一覧
 １-6b．[LTsv_kbd.tsv]のタグ解説
 １-7a．[LTsv_gui.py]の関数一覧
 １-8a．[LTsv_glyph.py]の関数一覧
 １-8b．漢直鍵盤の操作方法(マウス)
 １-8c．漢直鍵盤の操作方法(PCキーボード)
 １-8d．「漢字逆引きと分数電卓＆数値文字参照＆日時取得＆簡易辞書(LTsv_kbdentry_evaltext())」の詳細
 １-8e．[LTsv_glyph.tsv]のタグ解説
 ２-0． 「L:Tsv」を用いるアプリケーションの作り方
 ３-0． ＦＡＱ(そもそも起動しないなどの疑問はこちら)
 ３-1． 「L:Tsv」のＦＡＱ
 ３-2． 漢直鍵盤のＦＡＱ
 ４．   作者について、例えば連絡先。


０-0． ライセンス及びソフトの使用の補足ガイドライン

 ※「MIT License」準拠。
   MIT License - Choose a License
   http://choosealicense.com/licenses/mit/

 ※「MIT License」の日本語訳。
   licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN
   https://osdn.jp/projects/opensource/wiki/licenses%2FMIT_license

 ※日本語による補足。
   ・複製物にも「MIT License」の[LICENSE]ファイルを添付る事(著作権表示を誤魔化さない事)。
   ・いかなる場合においても作者または著作権所有者は一切責任を負わない事。
   ・ソースコードの閲覧やコピーに制限を設けない事。

 ※「kantray」固有の問題への言及。
   ・辞書などの翻訳ミスもしくは言い回しが古くなるなどの人間語の方の不具合に対してもメンテナンス義務はありません。


０-1． インストール＆アンインストール方法・その他セットアップ方法

 インストール自体は「https://github.com/ooblog/LTsv9kantray」から「Download ZIP」でダウンロードした[LTsv9kantray-master.zip]を解凍するだけです。
 [kan5x5comic.ttf]を用意する場合は[kan5x5.svg]または[kan5x5comic.woff]から変換。
 Wineを使う予定がある場合は「wine_sh」フォルダ内の[*.sh]のWineパスを適宜修正。
 ※Pythonは別途インストールされているものとします(Pythonの導入分からない人は「３-0． ＦＡＱ(そもそも起動しないなどの疑問はこちら)」も参考)。


０-2．バージョン「LTsv9kantray(tsvtool9)」から「LTsv10kanedit(tsvtool10)」への変更予定など。

 開発環が「Python2.7.3(PuppyLinux571JP)およびPython3.4.3(Wine1.7.18)」から「Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)」に移行。
 「kanedit」の新しい鍵盤に移行するため「kantray」用に書いたコードのほとんどを整理整頓の予定。


０-3． その他現在わかっている不具合や今後の課題。

 Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)で開発しています。Windows,cygwin,darwinなどでの動作は確認しておりません。
 フォント「kan5x5comic」は半角と全角の幅の比率が約5:3(1024:624)なのでアスキーアートで問題になる場合があります。グリフ不足で表示できない文字などあります。
 「kanpickle.bin」にグリフ座標データが蓄積されるまでは動作が重いです。
 [kan5x5.svg]を[kan5x5comic.ttf]に変換する手段として「FontForge」が必要。直接フォント生成とかできればベストだが優先順位は低い。
 [kanchar.tsv]に異体字を移管して[kanmap.tsv]を圧縮していく作業は当分続く。現在人名に使える漢字の異体字の字引入力中心に作業中。
 Windowsのエディタで[kanchar.tsv]を開くと3バイト以上の文字が「?」に置き換えられる恐れがある。
 マウスボタンの取得は保留。ホイールの取得は放置。tkk方面は手を出さない予定(コンボボックスなどはGTKのみサポート)。
 GTKのコールバックからデータを受けとる方法が不明のため、GUIイベント経由のPCキーボード取得やファイルダイアログからのキャンセル取得などが不明。
 「LTsv_editcanvas_new()」の「電卓」でスクロールが実装されてない。「メモ帳」の方もテキスト編集ができない。
 ドキュメント全体でグリフとフォントの言葉の使い分けルールが曖昧な気がする。


１-0a．「L:Tsv」の解説(このドキュメント「LTsv.txt」は「kantray」ではなく「L:Tsv」をメインに書いてます)。

 LTSV自体は単なるログのフォーマットです。

  Labeled Tab-separated Values
  http://ltsv.org/

  LTSV FAQ - LTSV って何? どういうところが良いの?
  http://d.hatena.ne.jp/naoya/20130209/1360381374

 複数のLTSVを１つのファイルで保存できるようタグで区切ったり、日時処理を加えたり、Python2,3のprint関数のバージョン違いを吸収させたりと、
 LTSVパーサに雑多な拡張を重ねていったモジュール群が今の「L:Tsv」です。
 「LTsv10kanedit(tsvtool10)」では漢直鍵盤をGUIの部品として扱えるようになりました。


１-0b．「L:Tsv」ファイルの構造。

 データ間の区切りはタブです。LTSV等と事なり、複数のタブがあっても1つのタブとみなします(文字列長0のデータを扱う場合はラベル推奨)。
 先頭データfirstは縦軸ラベルとして使う場合があります。first以降のデータrestの横軸ラベルは「label:data」の様にデータ前にラベル名とコロン。
 LTSVを「[tag|」と「|tag]」の様にタグで挟む事で１つのファイルに複数のLTSV等ページを格納しています。

 メタタグでLTSV等と区別(「L:Tsv」ファイルの拡張子も「.ltsv」か「.tsv」)。メタタグが存在しない場合ファイル全体を１つのページとみなす。
  [L:Tsv|                    「L:Tsv」ファイルの宣言です。マジックナンバー代わりなのでファイルの先頭に。
   code                       文字コードの宣言で「UTF-8」。
   enter                      改行の宣言で「LF」。Windowsだろうが改行は1バイトで保存するので注意。
   tab                        半角全角の横幅は形骸化してると思われるが(フォント「kan5x5comic」の半角と全角の幅の比率が約5:3(1024:624))、タブは半角スペース「4」の設定。
   program                    「L:Tsv」ファイルをどの様に扱うかを表す規格名(プログラム名)を記述。
   1st                        「L:Tsv」自体を何かのスクリプトとして実行する場合に最初に実行するページ指定を想定。
   LTsvver                    [LTsv_file.py]の「LTsv_file_ver()」。構文解析パーサのバージョン。
   modify                     tsv自身の更新日時。LTsv_getdaytimestr(overhour=24,diffminute=0)を記録。

 「L:Tsv」は「LTsv_newfile()」関数でも作成可能。「１-2． [LTsv_file.py]の関数一覧」も参考。


 １-1． [LTsv_printf.py]の関数一覧

 Pythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。
 ・Wine上DOSのエラー要因だったCP932(いわゆるシフトJIS)などに変換させる事で漢字をある程度(BMP基本多言語面0xffff範囲内)扱えるようになります。
 ・変換できない文字は数値文字参照に変換されます。
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。

 LTsv_libc_printf(LTsv_text,LTsv_log=None)
  LTsv_textの文字列をターミナル(stdout)に表示する。Pythonのprint関数との誤認に注意。
  LTsv_textに渡す文字列は「"{0}".format(data)」みたいに事前に「str.format()」などで加工する。
  LTsv_logに変数名を指定する事で表示文字列を変数上にも追記できる。要はprintfした内容をファイル保存する使い方を想定。[LTsv_file.py]の動作確認で使用。
  扱えない文字は数値文字参照(「??」が「&#21654;&#21937;」)に変換される。
  「ctypes.cdll.msvcrt(MS-DOS)」は1024バイト(文字数ではなくバイト)を超える文字列を扱えない様子。

 LTsv_libc_printcat(LTsv_text)
  上記LTsv_libc_printfからログ保存やL:Tsvタグエスケープ処理などを取り除いたもの。

 LTsv_libc_printf_type(LTsv_text)
  Python2では「<type 'str'>」Python3だと「「<class 'bytes'>」のようにprintfに渡すバイナリ文字列の変数の型を表示。

 LTsv_utf2xml(LTsv_text)
  LTsv_textの文字列を数値文字参照に変換。

 LTsv_xml2utf(LTsv_text)
  LTsv_textの文字参照(数値文字参照含む)を文字列に変換。

 LTsv_kanare(LTsv_before,LTsv_recase)
  全角半角大文字小文字ひらがなカタカナの変換を行います。LTsv_beforeに変換する文字列、LTsv_recaseで辞書指定。

   "Hira2Kata"         ひらがなをカタカナに。
   "Kata2Hira"         カタカナをひらがなに。
   "HiraKana2SeiH"     濁音を清音に。「ぱぴぷぺぽ」と「ぱぴぷぺぽ」は「はひふへほ」に。
   "HiraKana2SeiM"     濁音を清音に。「ばびぶべぼ」は「はひふへほ」に、「ぱぴぷぺぽ」を「まみむめも」に。
   "HiraKana2DakB"     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に。
   "HiraKana2DakP"     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に、「まみむめも」を「ぱぴぷぺぽ」に。
   "HiraKana2Han"      ひらがなもカタカナも半角に。
   "HiraKana2HanKaKe"  ひらがなもカタカナも「ヵヶ」も半角に。
   "Han2HiraEz"        半角をひらがなに(濁音は分離したまま)。
   "Han2KataEz"        半角をカタカナに(濁音は分離したまま)。
   "Han2Hira"          半角をひらがなに(濁音があっても１つの文字に統合)。
   "Han2Kata"          半角をカタカナに(濁音があっても１つの文字に統合)。
   "Alpha2BIG"         半角全角にかかわらずアルファベットを大文字に(キリル文字ギリシャ文字含む)。
   "Alpha2SML"         半角全角にかかわらずアルファベットを小文字に(キリル文字ギリシャ文字含む)。
   "Alpha2HAN"         大文字小文字にかかわらずアルファベットを半角に(キリル文字ギリシャ文字含まない)。
   "Alpha2ZENBS"       大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「＼」へ。
   "Alpha2ZENYen"      大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「￥」へ。

 LTsv_utf2ink(LTsv_text)
  UTF-8をkantrayの「UTF-8点字」に変換(バイナリの点字表記)。
  点字フォントが表示できる環境にないと動作確認は困難なので注意。

 LTsv_ink2utf(LTsv_text)
  上記の「UTF-8点字」をUTF-8に戻す。
  データ破損を補完する機能はないので注意。

 LTsv_subprocess(LTsv_subprocess_input="",LTsv_subprocess_shell=False)
  ターミナルにコマンドを送る。実行結果も取得できる。
  「LTsv_subprocess_shell=True」でgrepなどより複雑な事もできるようになるが、インジェクション脆弱性の恐れが発生するので注意。


１-2． [LTsv_file.py]の関数一覧

 「L;Tsv」ファイルの基本的な読み書きモジュールです。
 ・「LTsv10kanedit(tsvtool10)」の本編です。主に「L:Tsv」の読み書きです。
 ・Python2とPython3のテキストファイル読み込み方法の違いを吸収する手段にも使えます。
 ・単体風テストでは[testfile]フォルダに[testfile.tsv]と[testfile.txt]を作成して関数群の挙動確認ができます。
 ・modify項目で「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールも必要。

 LTsv_newfile(LTsv_program,LTsv_default=None):
  L:Tsvファイルを変数上に作成する(LTsv_savefileで保存しないとファイルは作成されません)。
  LTsv_programには「L:Tsv」ファイルを扱うプログラムまたは規格を記述。
  LTsv_default(LTsv_1st)にはスクリプトとして実行する場合の最初のページの指定(という想定)。

 LTsv_download(LTsv_url,LTsv_path,LTsv_reporthook=None)
  ネット上のLTsv_urlにあるファイルをローカルのLTsv_pathに保存する。
  ダウンロード中にLTsv_reporthook(count,blocksize,totalsize)を呼び出して状況報告させる事は可能。
  シングルスレッドな命令なのでダウンロード中はGUIなどの動作は固まるので注意。

 LTsv_zipload(LTsv_zip,LTsv_name,LTsv_path)
  ローカル上のLTsv_zipにあるファイルをローカルのLTsv_pathに解凍する。

 LTsv_loadfile(LTsv_path,LTsv_default=None)
  ローカル上のLTsv_pathから「L:Tsv」ファイルを読み込む。
  LTsv_default(LTsv_text)は読み込みできなかった場合の初期値を指定。
  初期値とファイル文字列長(UTF-8文字列換算)が一致する場合はファイルアクセス動作をしないという仕様ですが、内容のチェックをするわけではないので注意。
  つまりファイルの文字コードがUTF-8ではない場合、初期値があってもファイルアクセス動作が発生。
  ファイルのタイムスタンプを比較して読み込みを制御をする場合は[LTsv_time.py]の「LTsv_putdaytimemodify()」関数を使ってください。

 LTsv_loadcp932file(LTsv_path,LTsv_default="cp932")
  LTsv_pathから「UTF-8」以外のファイル(いわゆるシフトJIS)を読み込む。
  LTsv_default(encoding)を変える事で「euc_jp」なども読み込めるはず。

 LTsv_readlinepages(LTsv_text)
  タグ「[tag|」一覧を1行のLTSVとして取得する。

 LTsv_getpage(LTsv_text,LTsv_tag,LTsv_default=None)
  タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれた範囲のLTSVページを取得。
  LTsv_default(LTsv_page)はページを取得できなかった場合の初期値を指定。

 LTsv_readlinedeno(LTsv_text)
  LTSVページの行数を数える。
  LTsv_textに改行が無くても1行とみなす。
  LTsv_textの文字列長が0の場合0を返す。

 LTsv_readlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)
  0から数えた行数指定でLTSVページから1行読み込む。
  LTsv_default(LTsv_line)は読み込めなかった場合の初期値を指定。

 LTsv_readlinefirsts(LTsv_text)
  LTSVページのfirst(縦軸ラベル)一覧を1行のLTSVとして取得。

 LTsv_readlinerest(LTsv_text,LTsv_first,LTsv_default=None)
  LTSVページからfirst(縦軸ラベル)指定で先頭以下データrestを1行読み込む。first(縦軸ラベル)の取得にはタブ文字が必要。
  LTsv_default(LTsv_rest)はrestが読み込めなかった場合の初期値を指定。

 LTsv_pickdatadeno(LTsv_line)
  1行のLTSVに含まれるデータ個数を取得(firstも0個目のデータとみなす)。
  「label:data」のセットの場合は「LTsv_split_label_data()」などを使う。

 LTsv_pickdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)
  1行のLTSVから0から数えた項目数指定で1個読み込む(firstも0個目のデータとみなす)。
  LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。
  「label:data」のセットの場合は「LTsv_split_label_data()」などを使う。

 LTsv_split_label_data(LTsv_labeldata,LTsv_seldata=True)
  「label:data」からlabelかdataを取得。
   LTsv_seldataがTrueならデータ部分を、Falseならラベル部分を返す。

 LTsv_pickdatas(LTsv_line,LTsv_dataL=0,LTsv_dataR=0)
  1行のLTSVから0から数えた項目数指定で範囲内の複数データを読み込む(firstも0個目のデータとみなす)。いわゆるスライス操作。
  LTsv_dataLとLTsv_dataRが同じ場合読み込まない。つまり1個のデータを読む場合、LTsv_dataRはLTsv_dataLより1大きい数に(LTsv_dataR個目のデータは読み込まない)。
  LTsv_dataLとLTsv_dataRが逆(Tsv_dataRの方が小さい)の場合関数内で並び替える。

 LTsv_pickdatafind(LTsv_line,LTsv_find)
  LTsv_findが1行のLTSVの何項目にデータがあるか0から数える(firstも0個目のデータとみなす)。

 LTsv_joindatanum(LTsv_line,LTsv_datanum,LTsv_default=None)
  1行のLTSVのLTsv_datanum項目目にLTsv_default(LTsv_data)を追加する。
  LTsv_datanumが0以下の場合先頭firstに追加。項目数以上の場合末尾に追加。
  LTsv_default(LTsv_data)を省略もしくは文字列長0の場合は何もしない(「L:Tsv」では「複数のタブがあっても1つのタブとみなします」のため)。

 LTsv_setdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)
  1行のLTSVのLTsv_datanum項目目にデータLTsv_default(LTsv_data)を上書する。
  負数の場合や項目数以上の場合は何もしない。
  LTsv_default(LTsv_data)を省略もしくは文字列長0のデータの場合は項目を削除。項目数が減る(「L:Tsv」では「複数のタブがあっても1つのタブとみなします」のため)。

 LTsv_pickdatalabel(LTsv_line,LTsv_label,LTsv_default=None)
  1行のLTSVから「label:data」形式の横軸ラベル(LTsv_label)指定で1個読み込む。
  LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。

 LTsv_pickdic(LTsv_text,LTsv_first,LTsv_label)
  「LTsv_readlinerest()」と「LTsv_pickdatalabel()」をひとまとめに。単漢字辞書読込用途。
  LTSVページからfirst(縦軸ラベル)指定行の横軸ラベル(LTsv_label)指定で1個読み込む。

 LTsv_setdatalabel(LTsv_line,LTsv_label,LTsv_default=None)
  1行のLTSVの「label:data」形式横軸ベル(LTsv_label)項指定でデータLTsv_default(LTsv_data)を上書する。
  元LTSVに存在しない横軸ラベル(LTsv_label)の場合末尾に追加。
  LTsv_default(LTsv_data)を省略した場合に項目はラベルごと削除。
  文字列長0のデータLTsv_default(LTsv_data)であっても省略しなかった場合は横軸ラベル項目を追加もしくは上書き。
  上記のLTsv_joindatanumやLTsv_setdatanumと事なりLTsv_setdatalabelでは「label:」が単独で存在(文字列0の「data」が存在できる)違いがあるので注意。

 LTsv_sievelabels(LTsv_rest,LTsv_labels=""); LTsv_sievetuplelabels(LTsv_rest,*LTsv_labels);
  rest1行(first縦軸ラベルを含まない)の横軸ラベルの順番を入れ替える。ついでにデータを含まないラベルを除去。
  「LTsv_sievelabels()」にはtsvでラベル一覧LTsv_labelsを、「LTsv_sievetuplelabels()」はタプルでラベル一覧LTsv_labelsを渡す。

 LTsv_pushlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)
  LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を追加する。複数行挿入も可能。普通にテキストの行挿入。
  LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は何もしない。

 LTsv_overlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)
  LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を上書する。複数行あっても上書きされるのは1行のみで追記は複数行。
  LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は1行削除。

 LTsv_pushlinerest(LTsv_page,LTsv_first,LTsv_default=None)
  LTSVページにfirst(縦軸ラベル)指定でFirstにrest、LTsv_default(LTsv_rest)を追加する。
  元LTSVページにLTsv_default(LTsv_rest)と一致するfirst(縦軸ラベル)が存在しない場合末尾に追加。
  LTsv_default(LTsv_rest)を省略した場合に項目を削除。
  文字列長0のrestデータLTsv_default(LTsv_rest)であっても省略しなかった場合は縦軸ラベルの項目を追加もしくは上書き。
  first(縦軸ラベル)の取得にタブ文字が必要なので文字列長0のrestデータでも縦軸ラベルの末尾にはタブ文字が付加(「first\t\n」)。

 LTsv_putpage(LTsv_text,LTsv_tag,LTsv_default=None)
  タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれたLTSVページとしてLTsv_default(LTsv_page)を上書き。
  LTsv_tagが存在しないタグ名の場合末尾に追加。ただしタグ名が文字列長0の場合は何もしない。
  LTsv_default(LTsv_page)を省略の場合はページ削除。

 LTsv_putmodify(LTsv_text)
  メタタグ「L:Tsv」の「modify」の更新のみを行う。「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールが必要に。
  「LTsv_newfile()」や「LTsv_savefile()」と「modify」の時間がズレる場合がある事に注意。

 LTsv_savedir(LTsv_path):
  「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が1個フォルダを必要とする場合、1個フォルダを作成する。
  「os.mkdir()」を使うので、一気に深い階層のフォルダを作ろうとするとエラーになる。
  「LTsv_savefile()」「LTsv_saveplain()」の内部で使用するので通常は自動でフォルダを作成する。

 LTsv_savedirs(LTsv_path):
  「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が複数のフォルダを必要とする場合、複数のフォルダを作成する。
  「os.makedirs()」を使うので、一気に深い階層のフォルダを作れてしまうので取扱い注意。

 LTsv_savefile(LTsv_path,LTsv_default=None)
  ローカルのLTsv_pathに「L:Tsv」LTsv_default(LTsv_text)を書き込む。
  ファイル保存の時にメタタグ「L:Tsv」の「modify」の更新。メモリ上のファイルと保存されたファイルで「modify」の時間がズレる場合がある事に注意。
  LTsv_default(LTsv_text)を省略の場合はファイル削除。
  「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。

 LTsv_saveplain(LTsv_path,LTsv_plain)
  ローカルのLTsv_pathに「L:Tsv」LTsv_plainを(LTsv_text)書き込む。
  メタタグの修正や追加などは無い。タグの無いtsvの保存や普通のテキストファイルを作成する。
  「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。

 LTsv_labelzip(LTsv_labels,LTsv_datas)
  LTsv_labelsを横軸ラベル、LTsv_datasをデータとして1行のLTSV「label:data	label:data	…」に束ねる。

 LTsv_unziplabel(LTsv_line)
  1行のラベル有りLTSV「label:data	label:data	…」からラベルだけを取り出してtsv「label	label	…」に。

 LTsv_unzipdata(LTsv_line)
  1行のラベル有りLTSV「label:data	label:data	…」からデータだけを取り出してtsv「data	data	…」に。

 LTsv_unziplabelsdata(LTsv_line,LTsv_labels)
  1行のラベル有りLTSV「label:data	label:data	…」からラベル(tsv)が存在するデータだけを取り出してtsv「data	data	…」に。
  LTsv_labelsはtsv形式。

 LTsv_unziptuplelabelsdata(LTsv_line,*LTsv_labels)
  1行のラベル有りLTSV「label:data	label:data	…」からラベル(可変長引数)が存在するデータだけを取り出してtsv「data	data	…」に。
  LTsv_labelsはpythonのリスト形式。

 LTsv_tuple2tsv(LTsv_tuple)
  PythonのタプルやリストをLTSVに。

 LTsv_tsv2list(LTsv_line)
  LTSVをPythonのリストに。

 LTsv_tsv2tuple(LTsv_line)
  LTSVをPythonのタプルに。

 LTsv_intstr0x(LTsv_codestr)
  "0xff","$80"のように16進数っぽいものは16進数で数値に、そうでないものは10進数と思ってint変換。
  「try:」?「except ValueError:」で囲む手間を省きたい場合に便利。

 LTsv_label2dictint(LTsv_line)
  ラベル有りLTSV「label:data	label:data	…」をPythonの辞書に。dataは数値化。

 LTsv_label2dictstr(LTsv_line)
  ラベル有りLTSV「label:data	label:data	…」をPythonの辞書に。dataは文字列化。

 LTsv_dict2label(LTsv_dict)
  Pythonの辞書「{"label":data,"label":data,…}」をラベル有りLTSV「label:data	label:data	…」に。dataは文字列化。

 LTsv_file_ver()
  [LTsv_file.py]のバージョン表示(20161023U011852)。

 LTsv_issue():
  「/etc/issue」を開いてLinuxのディストリビューションを探る。詳細なバージョン確認方法はディストリ毎に異なる予感。


１-3a．[LTsv_time.py]の関数一覧

 日時フォーマットモジュールです。FPSも扱います。徹夜日時という概念があります。
 ・とりあえず日時を取得する場合は「LTsv_getdaytimestr(overhour=24,diffminute=0)」で。
 ・20161023U011852形式(@000y@0m@0dm@wdec@0h@0n@0s)だと困るのであればフォーマット指定。
 ・徹夜日時とは正子(夜中の午前0時)を24時として日付を切り替えずに25時(夜中の1時)、26時(夜中の2時)…と時だけが過ぎる状態です。
 ・ISOカレンダーの週はISO8601の1月4日を含む週(最初の木曜日を含む週)を第1週と数える方法。曜日は月曜から始まるので土日は週末。ISOカレンダーの曜は月曜が1で土曜が6、日曜が7。
 ・単体風テストでは複数の日時フォーマットを用いて関数群の挙動確認ができます。

 LTsv_yearleap(LTsv_toyear)
  閏年ならTrue。

 LTsv_yearweeks(LTsv_toyear)
  一年の間に週(ISOカレンダーの週)が何回あるか、年間の週数52?53を返す。

 LTsv_monthleap(LTsv_toyear,LTsv_tomonth)
  一月の間に日が何回あるか、28?31を返す。閏年なら2月は29日。

 LTsv_beat864(LTsv_tohour,LTsv_tominute,LTsv_tosecond)
  (LTsv_Beat,LTsv_BeatInteger,LTsv_BeatPoint)のタプルを返す。
  LTsv_Beatは1日の秒数0?86399(86400)。@Beatはその秒数を86.4で割った一日を1000分割する数。
  LTsv_BeatIntegerは@Beatの整数部分。LTsv_BeatPointは@Beatの小数部分。

 LTsv_checkFPS()
  LTsv_checkFPS()自身を1秒間に何回実行できるか計測。0?999の範囲。

 LTsv_setdaytimeshift()
  通常はLTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()から呼び出される内部関数。
  LTsv_meridian_nowに格納された日時を元に日時フォーマット用の各種日時変数(徹夜日時など)を再計算する。

 LTsv_setdaytimeoption(overhour=None,diffminute=None)
  LTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きする。
  徹夜日時と時差は上書きするまで変更されないので、例えば@Beatなど時差操作をした後に「diffminute=0」で戻す手順を明文化したい場合に使用。
  LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()にも同じ機能がある。

 LTsv_putdaytimespecify(LTsv_toyear,LTsv_tomonth,LTsv_today,LTsv_tohour,LTsv_tominute,LTsv_tosecond,LTsv_tomicrosecond,overhour=None,diffminute=None)
  任意の時刻をLTsv_meridian_nowに格納。各種日時変数も計算。
  ミリ秒LTsv_tomicrosecondまで項目があるので注意。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。

 LTsv_putdaytimever(LTsv_verstr,overhour=None,diffminute=None)
  「LTsv_time_ver()」などの「20161023U011852」形式(@000y@0m@0dm@wdec@0h@0n@0s)をLTsv_meridian_nowに格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。

 LTsv_putdaytimenow(overhour=None,diffminute=None)
  現在時刻をLTsv_meridian_nowに格納。各種日時変数も計算。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。

 LTsv_putdaytimeearlier(overhour=None,diffminute=None)
  LTsv_putdaytimenowが最後に実行された時の時刻がLTsv_earlier_nowに残ってるのでその値を再度LTsv_meridian_nowに格納。各種日時変数も計算。
  @Beatなどで一時的な時差の計算をした後時差を戻すために再計算といった用途を想定。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。

 LTsv_putdaytimemodify(LTsv_path,overhour=None,diffminute=None)
  ファイルLTsv_pathの更新時刻タイムスタンプをLTsv_meridian_nowに格納。各種日時変数も計算。
  たぶんOSやファイルシステム毎に精度に違い(秒の精度もしかしたら分レベルにも影響)がある。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定を上書きできる。

 LTsv_getdaytimestr(timeformat=None,overhour=None,diffminute=None)
  日付フォーマットtimeformatを事前に計算した各種日時変数で上書きする。
  timeformatを省略できるがデフォルト値は「@000y@0m@0dm@wdec@0h@0n@0s」。
  追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定も上書きできるが、LTsv_putdaytimenowで再計算される。
  日付フォーマットの概要は「１-3b．日時フォーマットの概要」を参照。

 LTsv_settimershift()
  通常はLTsv_puttimerlap,LTsv_puttimerstartgoal,LTsv_puttimerspecifyから呼び出される内部関数。
  LTsv_lap_nowなどに格納された日時を元に日時フォーマット用の各種タイマー変数を再計算する。

 LTsv_settimershiftoption()
  通常はLTsv_puttimerstartgoalから呼び出される内部関数。
  LTsv_start_nowとLTsv_goal_nowの差分を再計算する。

 LTsv_puttimerstartgoal(microsecond=None,millisecond=None,seconds=None,minute=None,hour=None,day=None)
  タイマーのLTsv_goal_nowを数秒後・数分後・数時間後などに設定する。各種タイマー変数も計算。
  例えばカップラーメン用途で三分後を指定する場合「LTsv_puttimerstartgoal(minute=3)」と入力。
  複数のパラメータを指定した場合、分と秒なら秒数というように細かい方の単位で上書される(内部ではmicrosecondで計算)。

 LTsv_puttimerspecify(LTsv_toyear,LTsv_tomonth,LTsv_today,LTsv_tohour,LTsv_tominute,LTsv_tosecond,LTsv_tomicrosecond)
  タイマーのLTsv_goal_nowを日時を指定して数日後などに設定する。各種タイマー変数も計算。
  一応ミリ秒LTsv_tomicrosecondまで要求するので項目ズレ注意。

 LTsv_puttimerlap()
  タイマーの経過時間をLTsv_passed_TotalSecondsに、残り時間をLTsv_timeleft_TotalSecondsに設定する。各種タイマー変数も計算。

 LTsv_gettimerstr(timeformat=None)
  時間フォーマットtimeformatを事前に計算した各種タイマー変数で上書きする。
  timeformatを省略できるがデフォルト値は「@0h@0n@0s.0Rs」。
  時間フォーマットの概要は「１-3b．日時フォーマットの概要」を参照。


１-3b．日時フォーマットの概要

 0.「@」で始まるキーワードが年月日等に置換される仕組み。「@」を表示する場合は「@@」と表記。
 1.日付フォーマット(daytime系)では、小文字が現在時刻(meridian)、大文字が徹夜日時(allnight)です。分以下・Beat・timer系に徹夜日時はありません。
 2.時間フォーマット(timer系)では、小文字が現在時刻(lap)、大文字が曲や動画などの長さ(limit)、「-」が先頭でタイマーの残り時間(timeleft)です。
 3.分(miNute)は「n」で代用して月(Month)との変数名衝突防止してます。ミリ秒は「L」(miLlisecond)。マイクロ秒は「R」(micRoSecond)。
 4.「_」(アンダースコア)を先頭に入れると0が空白に。0も空白も省くと数値は可変長。
 5.月で「JFCAMNLUSOND」表記が使えます。曜で「UMTWRFS」表記が使えます。末尾に「ec」で英語1文字。末尾「j」で日本語表記。
 5.日時の月,週,時,分,秒で2桁以下の数値項目の場合、末尾に「z」で１,２,３,４,５,６,７,８,９,10,11,12といった1桁の時全角数値の表現が可能。

 年=@yzj,@yzc,@0yz,@_yz,@yz,@0yd,@_yd,@yd,@0yw,@_yw,@yw,@000yi,@___yi,@4yi,@0yi,@_yi,@2yi,@yi,@000y,@___y,@4y,@0y,@_y,@2y,@y,@Yzj,@Yzc,@0Yz,@_Yz,@Yz,@0Yd,@_Yd,@Yd,@0Yw,@_Yw,@Yw,@000Yi,@___Yi,@4Yi,@0Yi,@_Yi,@2Yi,@Yi,@000Y,@___Y,@4Y,@0Y,@_Y,@2Y,@Y
  000y,___y,4y系は4桁の年(Year)。000y,___y,4y系は2桁の年(Yearlower)。
  yz系は干支(YearZodiac)。@yzjで鼠,牛,虎,兎,龍,蛇,馬,羊,猿,鶏,犬,猪。@yzcで子,丑,寅,卯,辰,巳,午,未,申,酉,戌,亥
  yi系はISOカレンダーの年(YearIso)。第1週に突入した時点で年が明けるので、年末年始の間は西暦カレンダーの年とズレる場合があります。
  ywi系は年間の週数(YearWeeksIso)。年間約52?53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。
  yd系は年間の日数(YearDays)。年間約365?366個。閏年の時に1日増える。

 月=@0md,@_md,@md,@mec,@mes,@mel,@_mel,@meh,@_meh,@mjiz,@_mjiz,@mj,@_mj,@0m,@_m,@mz,@m,@0Md,@_Md,@Md,@Mec,@Mes,@Mel,@_Mel,@Meh,@_Meh,@Mjiz,@_Mjiz,@Mj,@_Mj,@0M,@_M,@Mz,@M
  m系は月の数値(Month)。1?12。
  me系は月の英語表記。末尾「c」で一文字(JFCAMNLUSOND)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。
   (January,February,marCh,April,May,juNe,juLy,aUgust,September,October,November,December)
  mj系は神無月、mjiz系は神有月(睦月,如月,弥生,卯月,皐月,水無月,文月,葉月,長月,神有月,霜月,師走)表記の旧暦の月名。
  md系は月間の日数(MonthDays)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。

 週=@0wnyi,@_wnyi,@wnyiz,@wnyi,@0Wnyi,@_Wnyi,@Wnyiz,@Wnyi,@0wnm,@_wnm,@wnmz,@wnm,@0Wnm,@_Wnm,@Wnmz,@Wnm
  wnyi系はISOカレンダーの週番号(WeekNumberYearIso)。年間約52?53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。
  wnm系は月毎の曜番号(WeekNumberMonth)。月間約4?5回。単純に月内の日数を7で割った数。

 曜=@wdj,@wdec,@wdes,@wdel,@_wdel,@wdeh,@_wdeh,@wdi,@wd,@Wdj,@Wdec,@Wdes,@Wdel,@_Wdel,@Wdeh,@_Wdeh,@Wdi,@Wd
  wd系は曜の数値(WeekDay)。月曜が0で土曜が5、日曜が6。
  we系は曜の英語表記。末尾「c」で一文字(MTWRFSU)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。
   (Monday,Tuesday,Wednesday,thuRsday,Friday,Saturday,sUnday)
  wj系は月火水木金土日。
  wdi系はISOカレンダー曜日の数値(WeekDayIso)。月曜が1で土曜が6、日曜が7。

 日(日付)=@0dm,@_dm,@dmz,@dm,@0dy,@_dy,@dy,@0Dm,@_Dm,@Dmz,@Dm,@0Dy,@_Dy,@Dy
 日(時間)=@000d,@___d,@00d,@__d,@0d,@_d,@d,@-000d,@-___d,@-00d,@-__d,@-0d,@-_d,@-d,@000D,@___D,@00D,@__D,@0D,@_D,@D
  dm系は月換算の日数(DayMonth)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。
  dy系は年換算の日数(DayYear)。年間約365?366個。閏年の時に1日増える。
  時間フォーマット(timer系)では日は4桁まで使えます。

 時(日付)=@apj,@apel,@apeu,@ap,@Apj,@Apel,@Apeu,@Ap,@0hap,@_hap,@hapz,@hap,@0h,@_h,@hz,@h,@0H,@_H,@Hz,@H
 時(時間)=@0dh,@_dh,@dh,@-0dh,@-_dh,@-dh,@0Dh,@_Dh,@Dh,@0h,@_h,@h,@-0h,@-_h,@-h,@0H,@_H,@H
  h系は時の数値(Hour)。1?24。大文字の「H」を使うと徹夜日時を表示(overhour)。1?48。
  hap系は午前午後表記の数値(HourAP)。1?12。
  apj系は午前午後徹夜表記。大文字の「A」を使うと徹夜日時を表示(overhour)。36時を過ぎようが徹夜日時の時は「徹夜」と表示される。
  ape系はam,pm,al表記。大文字の「A」を使うと徹夜日時を表示(overhour)。末尾「l」で小文字、末尾「u」で大文字。
  ap系は午前午後を0,1で。大文字の「A」を使うと午前午後徹夜を0,1,2で。何を言ってるか分からないだろうがoverhourの設定次第では昼の12時だろうが徹夜と表示。
  午前午後徹夜は時間フォーマット(timer系)には存在しません。

 分(日付)=@0n,@_n,@nz,@n,@0N,@_N,@Nz,@N
 分(時間)=@0n,@_n,@n,@-0n,@-_n,@-n,@0N,@_N,@N
  n系は分(miNute)。0?59。

 秒(日付)=@0s,@_s,@sz,@s,@0S,@_S,@Sz,@S,@0ls,@_ls,@ls,@0rs,@_rs,@rs,@0Ls,@_Ls,@Ls,@0Rs,@_Rs,@Rs
 秒(時間)=@0s,@_s,@s,@-0s,@-_s,@-s,@0S,@_S,@S,@0ls,@_ls,@ls,@-0ls,@-_ls,@-ls,@0Ls,@_Ls,@Ls,@0rs,@_rs,@rs,@-0rs,@-_rs,@-rs,@0Rs,@_Rs,@Rs
  s系は秒(Second)。0?59。
  ls系はミリ秒(miLlisecond)。ミリ秒は3桁、0?999。
  rs系はマイクロ秒(micRoSecond)。マイクロ秒は6桁、0?999999。

 @Beat(日付)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@bt
 @Beat(時間)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@0bt,@_bt,@bt,@-0bti,@-_bti,@-bti,@-0btp,@-_btp,@-btp,@-0bt,@-_bt,@-bt,@0Bti,@_Bti,@Bti,@0Btp,@_Btp,@Btp,@0Bt,@_Bt,@Bt
  bt系はビート(Beat)の途中計算。1日の秒数0?86399(86400)をそのまま表示。本当のビートは86.4秒。
  bti系はビートの整数部分(BeatInteger)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。
  btp系はビートの小数部分(BeatPoint)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。
  時間フォーマット(timer系)としてビートを用いる場合時差は関係無し。

 正負符号(時間)=@+-,@_-,@--
  LTsv_lap_nowがLTsv_goal_nowを通りすぎた、いわゆるタイムオーバーの時はLTsv_lap_nowが負の数に。
  @+-はプラスマイナス両方表示。
  @_-はプラスの時は空白を表示。
  @--はマイナスのみ表示。プラスの時は一文字詰める。


１-4． [LTsv_calc.py]の関数一覧

 電卓フォーマットモジュールです。分数計算を扱います。電卓フォーマットの概要は「１-4b．電卓フォーマットの概要」を参照。
 ・「LTsv_calc()」に電卓フォーマットの計算式を渡すと分数が帰ってきます。通分できない分数の場合小数が帰ってきます。
 ・「LTsv_calc()」と「LTsv_calc_ver()」と「LTsv_calc_GCM()」と「LTsv_calc_LCM()」以外の関数は内部計算なので通常使わないはず。
 ・単体風テストでは複数の電卓フォーマットを用いて関数群の挙動確認ができます。

 LTsv_calc_GCM(LTsv_calcL,LTsv_calcR)
  最大公約数。

 LTsv_calc_LCM(LTsv_calcL,LTsv_calcR)
  最小公倍数。

 LTsv_calc_bracketsbalance(LTsv_calcQbase)
  左右の括弧の数を合わせる。ついでに演算子の整理整頓など。

 LTsv_calc_decimalize(LTsv_calcQbase)
  分数を小数に。

 LTsv_calc_fractalize(LTsv_calcQbase)
  小数を分数に。

 LTsv_calc(LTsv_calcQbase)
  電卓フォーマットを入力すると分数計算。「1/3⇔1|3」と分数に計算。
  通分できる場合「2|6⇔1|3」と分数に計算するが。通分できない場合「1|3⇔0.333333333333」と小数に変換する。
  0で割るなど計算でき無い場合「1/0⇔n|0」のように「n|0」が帰ってくる。
  LTsv_calc自体は主に括弧の英気表現による検索。括弧の内側を「LTsv_calc_function()」に渡す。
  電卓フォーマットの概要は「１-4b．電卓フォーマットの概要」を参照。

 LTsv_calc_function(LTsv_calcQbase)
  主に数列和・数列積などの計算。括弧内(関数)の左側を「LTsv_calc_addition()」に渡す。

 LTsv_calc_addition(LTsv_calcQbase,LTsv_Count)
  主に分数の加算減算。分数積処理で「LTsv_calc_addition()」を呼び出す。

 LTsv_calc_multiplication(LTsv_calcQbase)
  主に分数の積(割り算含む)。小数排除処理で「LTsv_calc_fractalize()」呼び出す。


１-4b．電卓フォーマットの概要

 分数「|」と割り算「/」を別物として扱います。分数の入れ子は「2|3|5|7⇔2|105」のように分母にまとめられます。
 通常は分数で計算するので「1/3⇔1|3」「1|3*3⇔1」になり一般的な電卓のように「0.999999999999」などにはならない。
 分数内で小数が使用可能です。「0.5|3.5⇔1|7」の様に小数が混在してても分数に変換します。
 加算「+」減算「-」と区別して表現できます。「1-(-2)」と括弧を使わなくても「1-m2⇔3|1」のようにマイナスで引くといった表現が可能。
 数列計算のカウント変数「c」は整数です。初期値は+1で増減は±1です。カウント変数に代入する過程で整数変換が発生するので注意。括弧の内外で別カウントになるので要注意。
 「(c+2)(c+1)」のように括弧間の演算子が省略された場合には(c+2)*(c+1)⇔6|1」のように掛け算を適用します。
 Pythonには整数有効計算範囲の概念は存在しないはずですが、小数計算ではPythonの実装・環境に応じた丸め誤差などが発生します。
 0で割るなどの計算できない場合は無限エラー扱いにして「n|0」と表示します。実際の無限には正負の概念が存在しますが電卓フォーマットの「n|0」は単に計算放棄です。

 使用できる数字
  012456789 １２３４５６７８９０    アラビア数字は全角でも使用できます。
  〇一二三四五六七八九              漢数字も使用できます。大字も「壱弐参肆伍陸漆捌玖零陌阡萬」が使用可能です。
  垓京兆億万千百十 銭               漢数字の万単位の繰り上がりも垓までとりあえず対応しています。銭は百分の一になります。

 使用できる演算子
  . ．      小円                    小数点は「3.1416⇔3927|1250」の様にドットを使います。「円」は「3円14銭」のような表現用途。
  | ｜      分                      分数を表します。分数中の小数は「0.5|3⇔1|6」のように通分されます。
  p PｐＰ   正                      正の数を表現。符号が付加されてなければ0以上の数です。
  m MｍＭ   負                      負の数を表現できます。「2-m1⇔3|1」のように負の数で引き算すると加算されます。
  + ＋      加足和                  足し算をします。計算結果は「1|6+1|3⇔1|2」のように通分されます。
  - －      減引差                  引き算をします。計算結果は「3|4-1|4⇔1|2」のように通分されます。
  * ×      乗掛積                  掛け算をします。計算結果は「2|3*3|4⇔1|2」のように通分されます。
  / ／÷    除割商                  割り算をします。計算結果は「2|5/4|5⇔1|2」のように通分されます。
  \ ＼                              整数未満を切り捨てる割り算をします。計算結果は「7\3⇔2」のように小数以下は切り捨てられます。
  # ＃      余                      割り算の余りを求めます。「3|2#1|3⇔1|6」のように分数も使えます。
  L lＬｌ   倍                      最小公倍数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。
  G gＧｇ   約                      最大公約数の計算。負数も絶対値で計算。同じ分母であれば分母を1と見なして無理やり計算。分母が異なる場合「n|0」エラー扱い。
  % ％      率                      消費税などの計算用。「10000+8%⇔10800|1」のように「10000×1.08⇔10800|1」と小数計算の手間簡略化。
  y π      周                       円周率。math.pi(約3.14159265359)が代入される。桁数はおそらくPython環境依存。
  e ｅ      底                      ネイピア数。math.e(約2.71828182846)が代入される。桁数はおそらくPython環境依存。
 括弧および関数用途の演算子
  ()（）                            括弧の中を先に計算する「3(c+1)→3×(c+1)→3×(1+1)→3×2」。もしくは数列の表現にも使用。
  c CＣｃ   数                      数列内で有効なカウント変数。括弧の内外で異なる数列を数えるので注意。初期値は「1」。
  S SｓＳΣ 列但※                   数列和。「(cΣ1～5)→1＋2＋3＋4＋5」といった等差数列の和を想定。
  ! ！      方                      数列積。「(2!1～4)→2×2×2×2」のような乗数や「(c!1～5)→1×2×3×4×5」のような階乗を想定。
  ~ ～      ?                       数列和(もしくは数列積)の範囲指定。「(cΣ1~4)→1＋2＋3＋4」「(c!4～1)→4×3×2×1」と増減±1の計算は自動。
 未実装等で使用できない演算子
  n NｎＮ∞ 無                      0で割った時など計算"できない"事「n|0」を表す。計算には使用できない。
  ,                                 「1,0800⇔10800|1」とコンマ無しの計算結果を帰します。使用でき無い他の演算子もだいたいコンマ扱いです。
  √                                平方根に使う予定の演算子。分数電卓なので無理数などの扱いに困ってる。


１-5a．[LTsv_joy.py]の関数一覧

 ジョイスティック(ゲームPAD)の入力をLTSVに変換するモジュールです。
 ・WindowsでもPOVをPxPyの2軸として扱います。極座標変換は「LTsv_atanscalar()」と「LTsv_atanclock()」。
 ・単体風テストで関数群の挙動確認というかジョイスティック(ゲームPAD)の挙動確認ができます。[LTsv_gui.py]でも挙動確認はできます。

 LTsv_joyreset(path="LTsv_joy.tsv")
  [LTsv_joy.tsv]からモジュールの初期設定を読み込む。詳細は「１-5b．[LTsv_joy.tsv]のタグ解説」。

 LTsv_joyexit()
  ジョイスティック(ゲームPAD)の変数初期化です。Linuxではデバイスをクローズします。

 LTsv_joyinit()
  ジョイスティック(ゲームPAD)の初期化です。Linuxではデバイスをオープンします。
  ジョイスティック(ゲームPAD)の個数はLTsv_joyinit()のタイミングで決めるので個数を受けとる事。
  0を受け取った場合ジョイスティック(ゲームPAD)を見つけれてない状態。

 LTsv_setjoydata(LTsv_joyid,LTsv_default=None)
  スティック(axisW/axisL)とボタン(button)の状態を読み込む。
  axisリストとbuttonリストのタプルでも受け取れる。

 LTsv_getjoystr(LTsv_joyid,joyformat=None)
  スティックとボタンの状態をjoyformatの項目に「LTsv_labelzip(LTsv_labels,LTsv_datas)」でマージする形で返す。
  LTsv_joyidにジョイスティック(ゲームPAD)の番号を指定。１Ｐの場合0を指定。
  status           axis最大値とボタン最大値。2項目。axis最大値はWindowsとLinuxでズレる場合があります。ループ内省略推奨。
  button           ボタンが押されてれば1。押されてなければ0。データ項目はボタンの個数分。WindowsとLinuxで共通。
  axisL            Linux版はPOVが2軸扱い。合計6項目の場合でも7項目を返すゲームPADが存在したりするので注意(PxPy軸がズレてる場合がある)。
  axisW            Windows版はPOVが1軸扱いですがスクリプト側で2軸に変換。通常6項目。
  LTsv_joykbdformatの初期値は[LTsv_joy.tsv]の「keydefault」タグの内容が入ります。

 LTsv_atanscalar(LTsv_atanX,LTsv_atanY)
  スティック(axisW/axisL)の直交座標を極座標に変換、スティックの傾きを取得します。

 LTsv_atanclock(LTsv_atanX,LTsv_atanY,LTsv_labels)
  math.atan2のラジアン角度2πをLTsv_labelsのラベルに置き換え。
  ジョイスティック(ゲームPAD)の方角、上下左右東西南北などの表現を想定。

 LTsv_joyaxis_label()
  Windowsなら「axisW」を返す。Windowsなら「axisL」を返す。
  「LTsv_getjoystr()」でどのaxisを取得するべきかをプログラムでも定義。


 １-5b．[LTsv_joy.tsv]のタグ解説

 ジョイスティック(ゲームPAD)毎にボタン配置(特にABXYとか○×△□とかの配置)は順番が異なります。
 なので[kbdmouseTkGTK.py]などを使って「keydefault」の初期値設定を調整する必要。

  [LTsv_deviceL|                      Linuxのデバイス指定。
   joy                                Linuxの場合デバイス名(から数字を省いた物)を指定。初期設定は「/dev/input/js」(「/dev/input/js0」の存在を想定)。
  [keydefault|                        「LTsv_getjoystr()」のLTsv_joykbdformatの初期値設定。項目の解説は「LTsv_getjoystr()」も参照。
   axisL                              初期値は「Lx	Ly	_	Rx	Ry	Px	Py」。
   axisW                              初期値は「Lx	Ly	Ry	Rx	Px	Py」。
   button                             初期値は「X	Y	A	B	C	Z	L	R	F	J	S	P」。若干セガサターン風
  [keyanother|                        「keydefault」の初期値案だがボタン配置解説用に温存。
   axisUV                             Windowsだと「dwXpos	dwYpos	dwZpos	dwRpos	dwUpos	dwVpos	dwPOV」で固定でも構わなかったがPOVもLinux同様に２軸にしたかった。
   axisLW                             本来こうしたかった例「Lx	Ly	Ry	Rx	Px	Py」。でもこれだとZ軸(UV)の扱いが謎に。
   axisL7                             Linuxドライバの解釈が謎7軸なのは多分こうなるはずだったから予想「Lx	Ly	Lz	Rx	Ry	Rz	Px	Py」。そのせいでWindowsとLinuxでズレが発生する。
   axisW8                             axisWが実際に6軸取得できる場合LTsv_getjoystrに渡す配置「Lx	Ly	Ry	Rx	Px	Py	Lz	Rz」。Z軸は後付け設計にしたので注意。
   buttonN                            WiiUと3DSでRスティックとCスティックみたいに名称が異なったりする任天堂風ラベル名「X	Y	A	B	L	R	ZL	ZR	Ls	RC	S	P	H」。
   buttonP                            海外で○×の配置が逆になったりする(海外で×が?チェック記号と誤解されてる説)ソニープレステ風ラベル名「△	□	×	○	L1	R1	L2	R2	L3	R3	S	O	P」。


１-6a．[LTsv_kbd.py]の関数一覧

 PCキーボードの入力(マウスのボタン含む)をLTSVに変換するモジュールの予定です。
 ・ウィンドウがアクティブでない時にもキー入力を取得するので取扱い注意。
 ・WindowsとLinuxではキーフックの手段が異なるので一部関数「LTsv_kbdEVIOCGRAB()」がOS依存になるので注意。
 ・仮想キーの番号はWindowsとLinuxで異なるので注意。[LTsv_kbd.tsv]で調整。
 ・[LTsv_kbd.py]では仮想キーに独自のキー名称を使ってます。特にかな入力用にひらがなキー名称が使えます。
 ・[LTsv_kbd.py]単独では「GetAsyncKeyState」が動かないのでWindows環境では「LTsv_gui.py」で動作確認。
 ・[LTsv_gui.py]で作成できる漢直鍵盤の初期設定なども[LTsv_kbd.py]の管轄。
 ・マウスのボタンを取得する手段は用意してますが、マウスデバイスを調べる方法が確立してないので「LTsv_kbdinit(LTsv_initmouse=False)」とマウスは不使用を推奨。
 ・単体風テストではPCキーボードの挙動確認は難しい(Windows環境ではターミナルの「GetAsyncKeyState」がWineの外なので拾えない)ので挙動確認は[LTsv_gui.py]を使います。

 LTsv_kbdreset(path="LTsv_kbd.tsv")
  [LTsv_kbd.tsv]からモジュールの初期設定や、キーコード($00?$FF)に名付けたキー名称を読み込む。詳細は「１-6b．[LTsv_kbd.tsv]のタグ解説」。

 LTsv_kbdgettypename(LTsv_code)
  キーコード($00?$FF)をキー名称に変換。ひらがなキー名称は用いない。

 LTsv_kbdgettypekana(LTsv_code)
  キーコード($00?$FF)をキー名称に変換。かな入力に用いるキーはひらがなキー名称を取得。

 LTsv_kbdgettypecode(LTsv_name)
  キー名称をキーコード($00?$FF)に変換。

 LTsv_kbdgettypegana(LTsv_gana)
  ひらがなキー名称をキーコード($00?$FF)に変換。ひらがな以外のキー名称も使用可能。

 LTsv_kbdexit()
  PCキーボードの変数初期化です。Linuxではデバイスをクローズします。

 LTsv_kbdinit(LTsv_initmouse=False)
  PCキーボードの初期化です。Linuxではデバイスをオープンします。
  LTsv_initmouseでマウスの仕様許可は出せますが、マウスデバイスを適切に指定する必要があります(適切な手段が今の所ありません)。

 LTsv_kbdEVIOCGRAB(LTsv_grabflag)
  ※Linux専用命令です。PCキーボードの入力をターミナルやテキストエリアなどに出力しないようにします。
  漢直とかでPCキーボードのアルファベット入力を漢字出力に置き換える用途です。
  Windowsのキーフックとすり合わせる過程で別の名前になる可能性があります。

 LTsv_kbdwrite(LTsv_code,LTsv_value)
  ※Linux専用命令です。PCキーボードを入力した事にします。

 LTsv_kbdwriteCtrl(LTsv_ganastsv)
  ※Linux専用命令です。「Ctrl」など複数のキーを押しながら入力みたいな動作を再現します。

 LTsv_setkbddata(LTsv_kbdstacks,LTsv_mousestacks)
  PCキーボードの状態を読み込む。
  LTsv_kbdstacksとLTsv_mousestacksはLinuxでそれぞれのデバイスから一度に読み込む量の指定です。
  LTsv_kbdkeepリストを直接受け取れる事は可能。

 LTsv_getkbdlabels(kbdformat=LTsv_defkbdformat)
  押されたPCキーボードから使う分だけのラベル一覧のtsvをLTsv_defkbdformatに渡すとdata部分に状態が書かれたLTSVが帰ってくる。
  例えば「LTsv_getkbdlabels("MouseL\tMouseR\tMouseC")」とすると「MouseL:0	MouseR:0	MouseC:0」とかが帰ってくる。

 LTsv_getkbdnames()
  押されたPCキーボードのキー名称を返す。キーコード($00?$FF)にキー名称が付けられる必要がある。

 LTsv_getkbdcodes()
  押されたPCキーボードのキーコード($00?$FF)を返す。

 LTsv_getkbdkanas()
  押されたPCキーボードのかな文字を返す。かな以外だと押されたPCキーボードのキーコード($00?$FF)を返す。

 LTsv_keyboard_iroha_guide()
  タプル(LTsv_keyboard_irohamax,LTsv_keyboard_alphapos,LTsv_keyboard_guidepos,LTsv_keyboard_dicinppos,LTsv_keyboard_dicselpos,LTsv_keyboard_iroha,LTsv_keyboard_guideN,LTsv_keyboard_guideX,LTsv_keyboard_guideK,LTsv_keyboard_guideKN,LTsv_keyboard_guideKX)を返す。
   LTsv_keyboard_irohamax             48。空白を含まない鍵盤の鍵数。
   LTsv_keyboard_alphapos             49。空白(α鍵盤)を含む鍵盤の鍵数。
   LTsv_keyboard_guidepos             50。実際の相席ガイドの番号は50-1。
   LTsv_keyboard_dicinppos            51。実際の辞書変更エリアの番号は51-1
   LTsv_keyboard_dicselpos            52。実際の字引入力エリアの番号は52-1
   LTsv_keyboard_iroha                空白を含む鍵盤の一覧。
   LTsv_keyboard_guideN               NEFR鍵盤用相席ガイド。
   LTsv_keyboard_guideX               XEFR鍵盤用相席ガイド。
   LTsv_keyboard_guideK               KANA鍵盤用配列。
   LTsv_keyboard_guideKN              KANA鍵盤用配列ガイド(NEFR鍵盤)。
   LTsv_keyboard_guideKX              KANA鍵盤用配列ガイド(XEFR鍵盤)。

 LTsv_keyboard_iroha_type()
  タプル(LTsv_keyboard_irohatype,LTsv_keyboard_alphatype,LTsv_keyboard_dictype,LTsv_keyboard_tofu)を返す。
   LTsv_keyboard_irohatype            かな鍵盤の空白を除いた項目。
   LTsv_keyboard_alphatype            α鍵盤の項目。
   LTsv_keyboard_dictype              単漢字辞書の項目。
   LTsv_keyboard_tofu                 BMP(基本多言語面0xffff)範囲外を代替する文字。

 LTsv_keyboard_map(kanmapN=None,kanmapX=None,dicinput=None)
  タプル(LTsv_keyboard_kanmapN,LTsv_keyboard_kanmapX,LTsv_keyboard_dicinput)を返す。もしくは変更を加える。
   LTsv_keyboard_kanmapN              NEFR鍵盤。
   LTsv_keyboard_kanmapX              XEFR鍵盤。
   LTsv_keyboard_dicinput             字引鍵盤。

 LTsv_keyboard_dic(kandic=None)
  LTsv_keyboard_kandicを返す。もしくは変更を加える。
   LTsv_keyboard_kandic               単漢字辞書。

 LTsv_keyboard_NXK(cursorMS=None,cursorIR=None,cursorAF=None,cursorOLD=None,cursorDIC=None,cursorNX=None,cursorK=None,cursorLCR=None)
  タプル(LTsv_keyboard_cursorMS,LTsv_keyboard_cursorIR,LTsv_keyboard_cursorAF,LTsv_keyboard_cursorOLD,LTsv_keyboard_cursorDIC,LTsv_keyboard_cursorNX,LTsv_keyboard_cursorK,LTsv_keyboard_cursorLCR)を返す。もしくは変更を加える。
   LTsv_keyboard_cursorMS             マウスカーソル。
   LTsv_keyboard_cursorIR             空白(α鍵盤)を含む鍵盤の位置。
   LTsv_keyboard_cursorAF             α鍵盤の位置。
   LTsv_keyboard_cursorOLD            直前に入力された鍵の位置。
   LTsv_keyboard_cursorDIC            単漢字辞書の項目。
   LTsv_keyboard_cursorNX             NEFR(True)かXEFR(False)かのフラグ。
   LTsv_keyboard_cursorK              辞書変更(+1)もしくは字引入力(-1)のフラグ。
   LTsv_keyboard_cursorLCR            マウスのボタン(000)、もしくはスワイプ(swipe)の状態。

 LTsv_keyboard_findNX()
  タプル(LTsv_keyboard_findN,LTsv_keyboard_findX,LTsv_keyboard_findNr,LTsv_keyboard_findXr)を返す。
   LTsv_keyboard_findN                鍵盤の名前。NEFR鍵盤用。
   LTsv_keyboard_findX                鍵盤の名前。XEFR鍵盤用。
   LTsv_keyboard_findNr               鍵盤の名前からの位置逆引き。NEFR鍵盤用。
   LTsv_keyboard_findXr               鍵盤の名前からの位置逆引き。XEFR鍵盤用。


 １-6b．[LTsv_kbd.tsv]のタグ解説

  [LTsv_deviceL|                      Linuxのデバイス指定。
   kbd                                初期設定は「/dev/input/event?」(dmesgコマンドで調べる)。PCキーボードデバイスの位置は環境毎の差異があるので「dmesg | grep keyboard | grep device」で確認。
   mouse                              初期想定は「/dev/input/event?」(/proc/bus/input/devicesで調べる)。マウスデバイスの位置は環境毎の差異があるかもなので「"cat /proc/bus/input/devices | grep mouse0」で確認。
  [LTsv_mouse_EV_KEY|                 マウスボタンなどの入力をWindowsのGetAsyncKeyStateの1,2,4みたいにキーコード($00?$FF)風に処理するための仮想キーコードの設定。
   BTN_LEFT:0x110	unused:250    マウスのボタン１(いわゆる左クリック「MouseL」)をキーコード250に設定する。
   BTN_RIGHT:0x111	unused:251    マウスのボタン２(いわゆる右クリック「MouseR」)をキーコード251に設定する。
   BTN_MIDDLE:0x112	unused:252    マウスのボタン３(いわゆる中クリック「MouseC」)をキーコード252に設定する。
   BTN_TOUCH:0x14a	unused:250    ペンタブレットのペン先(いわゆる左クリック「MouseL」)をキーコード250に設定する。
   BTN_STYLUS:0x14b	unused:251    ペンタブレットのボタン１(いわゆる右クリック「MouseR」)をキーコード251に設定する。
   BTN_STYLUS2:0x14c	unused:252    ペンタブレットのボタン２(いわゆる中クリック「MouseC」)をキーコード252に設定する。
   BTN_FORWARD:0x115	unused:253    マウスやペンタブの拡張ボタン１(いわゆるXButton1「MouseF」)をキーコード253に設定する。
   BTN_BACK:0x116	unused:254    マウスやペンタブの拡張ボタン２(いわゆるXButton2「MouseB」)をキーコード254に設定する。
  [LTsv_EV_REL|                       マウスホイールなどの入力を処理する予定のための設定枠(未実装)。
  [LTsv_EV_ABS|                       その他の入力を処理する予定のための設定枠(未定)。
  [LTsv_typenameW|                    Windowsの「キー名称:キーコード($00?$FF)」の組み合わせを記述。だがWineとWindowsでGetAsyncKeyStateの返り値が違う様子。
  [WineVK|                            Wineで得られる「キー名称:キーコード($00?$FF)」の組み合わせ解説用。PCキーボードの種類によって変化する怖れ。
  [WindowsVK|                         Windowsの「キー名称:キーコード($00?$FF)」の組み合わせ解説用。PCキーボードの種類によって変化する怖れ。
  [LTsv_typenameL|                    Linuxの「キー名称:キーコード($00?$FF)」の組み合わせを記述。PCキーボードの種類によって変化する怖れ。
  [LTsv_typegana|                     OS依存を軽減した「ひらがなキー名称:キー名称」の組み合わせを記述。
  [keydefault|                        「LTsv_getkbdstr()」のLTsv_defkbdformatの初期値設定。項目の解説は「LTsv_getkbdstr()」も参照。
  [keyboard_iroha|                     かな鍵盤の空白を含める項目。
  [keyboard_guideN|                   NEFR鍵盤用相席ガイド。やゆよがﾔﾕﾖとかになってる。
  [keyboard_guideX|                   XEFR鍵盤用相席ガイド。ヤユヨがｼｬｼｭｼｮとかになってる。
  [keyboard_guideK|                   α鍵盤や単漢字辞書などKANA鍵盤用配列。
  [keyboard_guideKN|                  KANA鍵盤配列ガイド(NEFR鍵盤)。ギリシャ文字を小文字に。
  [keyboard_guideKX|                  KANA鍵盤配列ガイド(XEFR鍵盤)。ギリシャ文字を大文字に。
  [keyboard_findN|                    鍵盤を名指しで開くため鍵盤に名前を付ける。NEFR鍵盤用。
  [keyboard_findX|                    鍵盤を名指しで開くため鍵盤に名前を付ける。XEFR鍵盤用。
  [keyboard_mapdic|                   その他の漢直鍵盤の挙動に関する設定です。
   tofu                               「Tkinter」で表示できないBMP(基本多言語面0xffff)範囲外を代替する文字を指定。初期設定は「?」
   irohatype                          かな鍵盤の空白を除いた項目。ぬふあうえおやゆよわほへたていすかんなにらせ゛゜ちとしはきくまのりれけむつさそひこみもねるめろ￥。
   alphatype                          α鍵盤の項目。αβγδεζηθικλμνξοπρστυφχψω○△□。
   dictype                            単漢字辞書の項目。英名音訓送異俗熙簡繁越地顔鍵代逆非難活幅。
   mapname                            漢字配列のファイル名を指定します。初期設定は[kanmap.tsv]
   dicname                            単漢字辞書のファイル名を指定します。初期設定は[kanchar.tsv]


１-7a．[LTsv_gui.py]の関数一覧

 ウィンドウなどGUIを設置するモジュールです。
 ・環境次第では「GTK2」と「Tkinter」が選べるはずですがPuppyLinuxでは「GTK2」Windows環境では「Tkinter」です。
 ・「canvas」の描画高速化のため「LTsv_draw_*_shell(LTsv_GUI)」で関数オブジェクトを用意する手続き推奨。
 ・「LTsv_window_main()」を呼び出した後はGUIのイベント(「LTsv_window_after()」の様なタイマー系含む)が発生するまでPythonスクリプトが停止するので注意。
 ・「LTsv_」を付加してないローカル変数が多々あるので変数名の衝突が心配。
 ・「LTsv_widgetPAGE」はほぼ「LTsv_widget_newUUID()」で生成するユニークIDっぽいIDの事。
 ・通知タスクトレイ(Notify)関連は「Tkinter」で使えないので注意。他にも「Tkinter」で動かない命令はいくつか。
 ・「LTsv_window_main()」実行前に「print()」「LTsv_libc_printf()」などターミナル(stdout)系命令が実行されるとGUIが表示されない場合があります。
 ・単体風テストではGUIはもちろん、PCキーボードやジョイスティック(ゲームPAD)、日時フォーマットや電卓フォーマットなどの挙動確認もできます。

 LTsv_guiCDLLver(LTsv_libname,LTsv_libvermin,LTsv_libvermax)
  「LTsv_guiinit()」で使う「libgtk-x11-2.0.so.?」などの「?」の部分を探索。

 LTsv_guiinit(LTsv_guistyle=LTsv_GUI_GTK2,LTsv_libvermin=0,LTsv_libvermax=0)
  「Tkinter」と「GTK2」のどのGUIを使うかを決定。
  LTsv_guistyleでUI指定できるがPuppyLinuxだと強制的に「GTK2」。Windowsだと今の所「Tkinter」。「WinAPI」は未実装。

  LTsv_global_GUI(); LTsv_global_Notify(); LTsv_global_GTK2(); LTsv_global_Tkinter(); LTsv_global_WinAPI();
  LTsv_global_libgtk(); LTsv_global_libgdk(); LTsv_global_libobj(); LTsv_global_widgetgetpage(LTsv_UUID): 
  LTsv_global_widgetOBJ(LTsv_objid); LTsv_global_iconOBJ(LTsv_objid); LTsv_global_notifyOBJ(LTsv_objid); LTsv_global_popupmenuOBJ(LTsv_objid);
  global系はモジュール内の変数に直接アクセスする場合に使用。

 LTsv_global_canvasmotionZ()
  マウスはそもそもどの「canvas」上に存在しているのかを取得。

 LTsv_global_canvasmotionX(motionZ=None); LTsv_global_canvasmotionY(motionZ=None);
  「canvas」上のマウスの座標を取得。「canvas」の解説は「LTsv_canvas_new()」を参照。
  motionZで「canvas」を指定しなくても座標は取得できるが、隣接してる「canvas」間を移動する際に正しくない値を拾う場合がある。

 LTsv_global_canvascolor(); LTsv_global_canvasbgcolor();
  「canvas」上の色を取得。

 LTsv_global_canvasTAG(TkinterTAG=None)
  「Tkinter」専用。描画図形に添付するタグを取得。または変更。

 LTsv_global_pictureOBJ(LTsv_objid): LTsv_global_pictureW(LTsv_objid): LTsv_global_pictureH(LTsv_objid):
  「canvas」用の画像を管理。解説は「LTsv_draw_picture_load()」を参照。
  LTsv_global_pictureOBJ()がNoneを返す場合、画像の読み込みに失敗してる。
  LTsv_global_pictureW()で画像の横幅。LTsv_global_pictureH()で画像の縦幅。

 LTsv_widget_newUUID(LTsv_widgetID=None)
  「uuid.uuid4().hex+'+'+str(time.time())」でユニークIDを発行する。
  １秒未満以内に122bitの乱数が重複する事はほぼないだろうたぶんという前提。だが理論上は重複する確率はゼロじゃないので神経質な方は注意。
  LTsv_widgetIDにFalseを指定することで前回作成したIDを再発行できる。コールバック関数を作成する関数で再発行テクニックを使う。
  GUIオブジェクト作成の関数で出てくる「LTsv_widgetPAGE」はほぼこのユニークIDの事。

 LTsv_widget_newobj(LTsv_widgetpagelocal,LTsv_widgetoption,widget_obj)
  「LTsv_widgetPAGEXYWH()」のオブジェクト管理で番号が被らないようにするカウンタ。

 LTsv_widgetPAGEXYWH(LTsv_widgetPAGE,widget_o=None,widget_k=None,widget_t=None,widget_u=None,widget_s=None,widget_e=None,widget_a=None,widget_v=None,widget_b=None,
  widget_p=None,widget_m=None,widget_g=None,widget_f=None,widget_x=None,widget_y=None,widget_w=None,widget_h=None,widget_c=None,
  event_z=None,event_k=None,event_y=None,event_b=None,event_p=None,event_r=None,event_e=None,event_m=None,event_l=None,event_a=None,event_u=None,
  menu_o=None,menu_b=None,menu_c=None,dialog_t=None,dialog_c=None,
  kbd_p=None,kbd_r=None,kbd_m=None,kbd_e=None,kbd_l=None,kbd_i=None,kbd_s=None,kbd_d=None,kbd_t=None,kbd_u=None,kbd_k=None):
  LTsv_widgetLTSVのLTsv_widgetPAGEにGUIオブジェクトの内容を書き込みます。
  「LTsv_widgetPAGE」の名前には「LTsv_widget_newUUID()」で発行されるユニークIDです。
  LTsv_widgetOBJはテキスト化数値化が困難なGUIオブジェクトを格納し、LTsv_widgetLTSV内で番号ラベルが降られる。

   widgetobj(widget_o)                  「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるGUIオブジェクトの「LTsv_widgetOBJcount」の方。
   widgetkind(widget_k)                 GUIオブジェクトの種類。「LTsv_window_new()」なら「window」。
                                       「LTsv_label_new()」なら"label"。
                                       「LTsv_image_new()」なら"image"。
                                       「LTsv_button_new()」なら"button"。
                                       「LTsv_entry_new()」なら"entry"。
                                       「LTsv_spin_new()」なら"spin"。
                                       「LTsv_scale_new()」なら"scale"。
                                       「LTsv_scale_new()」なら"combobox"。
                                       「LTsv_combobox_new()」なら"canvas"。
                                       「LTsv_notifyicon_new()」なら"notify"。
                                       「LTsv_editcanvas_new()」なら"editcanvas"。
                                       「LTsv_filedialog_new()」なら"filedialog"。
   widgettext(widget_t)                GUIオブジェクトが保有するテキスト。「window」のタイトルなど。
   widgettext(widget_u)                GUIオブジェクトが保有するURI(URLもしくはファイルパス)。「image」のファイルパスなど。
   widgetstart(widget_s)               「scale」など数値入力系GUIオブジェクトのmin(start)。
   widgetend(widget_e)                 「scale」など数値入力系GUIオブジェクトのmax(end)。
   widgetadd(widget_a)                 「scale」など数値入力系GUIオブジェクトの増減量。「Tkinter」だと整数だが「GTK2」だと小数指定が可能。
   widgetstringvar(widget_v)           「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるGUIオブジェクトのテキスト。
   widgetbooleanvar(widget_b)          「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるGUIオブジェクトの論理値。
   widgetphotoimage(widget_p)          「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるGUIオブジェクトの画像。
   widgetpixmap(widget_m)              「canvas」の「LTsv_libgdk.gdk_pixmap_new()」を「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理。
   widgetgc(widget_g)                  「canvas」の「LTsv_GDKCOLOR()」を「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理。
   widgetfont(widget_f)                LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるGUIオブジェクトのフォント。
   widgetsizeX(widget_x)               GUIオブジェクトのウィンドウ内X座標。
   widgetsizeY(widget_y)               GUIオブジェクトのウィンドウ内Y座標。
   widgetsizeW(widget_w)               GUIオブジェクトの横幅。
   widgetsizeH(widget_h)               GUIオブジェクトの縦幅。
   widgetcontainer(widget_c)           「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるオブジェクト配置するルールを格納するコンテナオブジェクト。
   widgetresize(event_z)               「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「window」のサイズ変更時のコールバック関数。
   keyboard_press(event_k)             「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「window」のキー押した時のコールバック関数。
   keyboard_release(event_y)           「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「window」のキー離した時のコールバック関数。
   widgetcallback(event_b)             「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される何かしらのコールバック関数(例えば「button」を押した時に呼び出す関数)。
   mouse_press(event_p)                「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「canvas」でマウスボタンを押した時のコールバック関数。
   mouse_release(event_r)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「canvas」でマウスボタンを離した時のコールバック関数。
   mouse_enter(event_e)                「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「canvas」にマウスポインタが入った時のコールバック関数。
   mouse_motion(event_m)               「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「canvas」内でマウスポインタが動いた時のコールバック関数。
   mouse_leave(event_l)                「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「canvas」からマウスポインタが出た時のコールバック関数。
   notify_activate(event_a)            「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される通知タスクトレイ(Notify)を左クリックした時のコールバック関数。
   notify_popupmenu(event_u)           「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される通知タスクトレイ(Notify)を右クリックした時のコールバック関数。
   popupmenuobj(menu_o)                「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるメニューオブジェクト。
   popupmenubind(menu_b)               「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるメニュー表示コールバック関数。
   popupmenuclick(menu_c)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される通知タスクトレイ(Notify)クリック時のコールバック関数。
   dialog_type(dialog_t)                「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるファイルダイアログの種類。
   dialog_close(dialog_c)               「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるファイルダイアログのgtk_widget_hide_on_delete。
   editcanvas_press(kbd_p)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤押下時コールバック関数。
   editcanvas_release(kbd_r)            「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤押上時コールバック関数。
   editcanvas_motion(kbd_m)             「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤マウスカーソル移動コールバック関数。
   editcanvas_enter(kbd_e)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤マウスカーソル枠内時コールバック関数。
   editcanvas_leave(kbd_l)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤マウスカーソル枠外時コールバック関数。
   editcanvas_input(kbd_i)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」漢直鍵盤文字カーソル
   editcanvas_settext(kbd_s)            「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」テキスト入力欄カーソル付き文字列表示変更のコールバック関数。
   editcanvas_deftext(kbd_d)            「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」テキスト入力欄カーソル省略文字列表示変更のコールバック関数。
   editcanvas_gettext(kbd_t)            「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」テキスト入力欄「メモ帳」文字列取得コールバック関数。
   editcanvas_geturi(kbd_u)             「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」テキスト入力欄「電卓」文字列取得コールバック関数。
   editcanvas_‎keyenter(kbd_k)           「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理される「editcanvas」[Enter]キー入力時コールバック関数。
def LTsv_widgetPAGEKBD(LTsv_widgetPAGE,clip_a=None,clip_b=None,clip_c=None,clip_d=None,clip_e=None,clip_f=None,clip_g=None,
  LTsv_widgetLTSVのLTsv_widgetPAGEにGUIオブジェクトの内容を書き込みます。「LTsv_editcanvas_new()」PCキーボードA~Z用。
   editcanvas_copy(clip_c)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるクリップボードコピー処理コールバック関数。
   editcanvas_open(clip_o)              「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるファイルオープン処理コールバック関数。
   editcanvas_‎paste(clip_c)             「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるクリップボードペースト処理コールバック関数。
   editcanvas_cut(clip_c)               「LTsv_widgetOBJ[str(LTsv_widgetOBJcount)]」で管理されるクリップボードカット処理コールバック関数。

 LTsv_fonttuple(LTsv_line)
  「Tkinter」ではフォントはタプルなので、CSV「"kan5x5comic,12"」を「(kan5x5comic,12)」とタプルに変換。

 LTsv_GTKwidget_fixed(window_c,widget_o,widget_x,widget_y,widget_w,widget_h,widget_f=None,widget_d=False)
  「GTK2」のコンテナを「gtk_fixed_put」にしてフォントも「gtk_widget_modify_font」で指定する。
  widget_dは「gtk_bin_get_child」の必要な場合の分岐。

 LTsv_tkinter_hideondelete_shell(LTsv_windowPAGENAME)
  「Tkinter」でウィンドウの閉じるボタンを押してもプログラム続行するようにする(ウィンドウを隠すhide_on_delete)。

 LTsv_window_new(widget_n=None,event_b=None,widget_t="LTsv_window",widget_w=200,widget_h=120,event_z=None,event_k=None,event_y=None)
  「window」GUIオブジェクトを作成。
  「event_b=None」の場合「gtk_widget_hide_on_delete」。つまりウィンドウを閉じてもスクリプトは続行されるので「event_b=LTsv_window_exit」が必要。
  「event_b=LTsv_window_exit」を使わない場合(ウィンドウを閉じたら自動セーブなどの場合)はそのコールバック関数内で「LTsv_window_exit」が必要です。
  「LTsv_window_new()」のウィンドウを閉じた後に別のコールバック関数を指定した場合そのコールバック関数の最後に設定。
  「LTsv_widget_showhide()」でウィンドウを表示して「LTsv_window_main()」で待機させるまでが「window」作成の基本。
  「LTsv_window_main()」実行前に「print()」「LTsv_libc_printf()」などターミナル(stdout)系の命令があるとGUIが起動しない場合があります。
  「widget_w」「widget_h」で指定できるウィンドウのサイズは最小値。「LTsv_window_resize()」で指定するリサイズとは別。
  「widget_r」にコールバック関数を指定する事でウィンドウのサイズをマウスで変更できるようになりますが、可変レイアウトには対応してないので注意。
  「event_k」「event_y」でキーボード入力時(event_kが押した時event_yが離した時)のコールバック関数。

 LTsv_widget_settext(LTsv_widgetPAGENAME,widget_t="")
  GUIオブジェクトの文字列を設定。

 LTsv_widget_gettext(LTsv_widgetPAGENAME)
  GUIオブジェクトの文字列を取得。
  ウィンドウのタイトル取得には「LTsv_window_title(LTsv_window_id)」という別解もある。

 LTsv_widget_setnumber(LTsv_widgetPAGENAME,widget_s=0)
  GUIオブジェクトの数値を設定。

 LTsv_widget_getnumber(LTsv_widgetPAGENAME)
  GUIオブジェクトの数値を取得。

 LTsv_widget_seturi(LTsv_widgetPAGENAME,widget_u="")
  GUIオブジェクトのURIを設定。

 LTsv_widget_geturi(LTsv_widgetPAGENAME)
  GUIオブジェクトのURIを取得。

 LTsv_widget_showhide(LTsv_widgetPAGENAME,widget_i)
  GUIオブジェクトの表示非表示の設定。「window」の非表示は非推奨。
  「Tkinter」には非表示オプションが無いかも。

 LTsv_widget_disableenable(LTsv_widgetPAGENAME,widget_i)
  GUIオブジェクトの無効有効の設定。

 LTsv_widget_focus(LTsv_widgetPAGENAME)
  GUIオブジェクトにフォーカスする。「edit」「entry」「spin」にカーソルを合わせるなど。

 LTsv_window_main(LTsv_windowPAGENAME)
  GUIがイベント待ちになるので一旦スクリプトはここで停止。GUIのイベントか「LTsv_window_after()」のタイマー待ち。
  「LTsv_guiinit()」から「LTsv_window_main()」の途中で「print()」「LTsv_libc_printf()」などコンソール系命令があるとGUIが起動しないので注意。

 LTsv_window_after(LTsv_windowPAGENAME,event_b=None,event_i="mousemotion",event_w=1000)
  タイマーの設定。「LTsv_window_main()」から一時的に抜け出す手段の一つ。
  「event_b=None」に関数の指定。「None」にした場合「LTsv_window_none」を空実行。つまり何もしない。
  「event_i="mousemotion」でタグの指定。タイマーは複数設置できるのでタグで分別。
  「event_t=1000」でミリ秒の指定。

 LTsv_window_foreground()
  アクティブウィンドウのIDを取得する。
  ターミナルから起動した場合でもターミナルは別ウィンドウ。

 LTsv_window_title(LTsv_window_id)
  ウィンドウIDからタイトルを取得する。
  「LTsv_widget_gettext()」との違いは別のアプリのウィンドウからもタイトル取得できる事。

 LTsv_window_exit(window_objvoid=None,window_objptr=None)
  スクリプトを終了する。
  ウィンドウを閉じる時のコールバック関数を指定した場合そのコールバック関数の最後に設定。

 LTsv_window_none(window_objvoid=None,window_objptr=None)
  何もしない。Pythonのpassみたいなポジション。

 LTsv_screen_w(LTsv_windowPAGENAME); LTsv_screen_h(LTsv_windowPAGENAME)
  ディスプレイの縦サイズ横サイズ。
  「Tkinter」ではルートウィンドウが設置されてからでないと「winfo_vrootwidth()」「winfo_vrootheight()」が使えないので注意。

 LTsv_window_wh(LTsv_windowPAGENAME); LTsv_window_w(LTsv_windowPAGENAME); LTsv_window_h(LTsv_windowPAGENAME)
  ウィンドウの縦サイズ横サイズ。

 LTsv_window_resize(LTsv_windowPAGENAME,widget_w=16,widget_h=16)
  ウィンドウのリサイズ。ウィンドウのサイズをマウスで変更するのと同じで最小値は変化しない。

 LTsv_label_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_label",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「label」を作成。テキストを表示。

 LTsv_image_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_logo.png",widget_x=0,widget_y=0)
  GUIオブジェクト「image」を作成。画像を表示。

 LTsv_button_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_button",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「button」を作成。ボタンを押すとイベント。

 LTsv_check_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_check",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None):
  GUIオブジェクト「check」を作成。チェックマークをONOFFするとイベント。
  「LTsv_widget_getnumber()」でチェック状態の取得。「LTsv_widget_setnumber()」でチェックマークのONOFF。使用する値は論理値ではなく数値で0か1。

 LTsv_radio_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_radio",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None):
  GUIオブジェクト「radio」を作成。選択肢を変更すると(「GTK2」の場合変更しなくても)イベント。「GTK2」の場合消灯・点灯で２回イベントが発生するので注意。
  連続して「LTsv_radio_new()」を呼び出す事で自動的にラジオボタングループとして連携する。
  「LTsv_widget_getnumber()」で選択肢の取得。「LTsv_widget_setnumber()」で選択肢の変更。同じラジオボタングループならどのラジオボタンでも指定できる。
  「Tkinter」の場合「LTsv_widget_setnumber()」でラジオボタングループの個数を越える値も通るので注意。

 LTsv_clipboard_new(LTsv_windowPAGENAME,widget_n=None)
  オブジェクト「clipboard」を作成。クリップボードを用いたテキスト入力補助。

 def LTsv_clipmenu_new(widget_o)
  「Tkinter」専用の内部関数。
  オブジェクト「edit」「entry」「spin」の右クリックメニューを作成。

 LTsv_edit_new(LTsv_windowPAGENAME,widget_n=None,widget_t="LTsv_edit",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「edit」を作成。テキスト複数行入力欄。

 LTsv_entry_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_entry",widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「entry」を作成。テキスト１行入力欄。テキストを変更後エンターキーでイベント。

 LTsv_spin_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「spin」を作成。数値入力。数値変更でイベント。

 LTsv_scale_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_s=0,widget_e=255,widget_a=1,widget_x=0,widget_y=0,widget_w=16,widget_h=16)
  GUIオブジェクト「scale」を作成。数値調節。数値変更でイベント。「GTK2」と「Tkinter」で数値表示の位置が異なるので注意。

 LTsv_scale_adjustment(LTsv_widgetPAGENAME,widget_s=0,widget_e=255,widget_a=1)
  「spin」「scale」の範囲を変更。

 LTsv_combobox_list(LTsv_widgetPAGENAME,widget_t="")
  「combobox」の項目を変更。

 LTsv_combobox_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,widget_f=None)
  GUIオブジェクト「combobox」を作成。項目を選択。項目変更でイベント。「Tkinter」版は未実装。

 LTsv_canvas_new(LTsv_windowPAGENAME,widget_n=None,widget_x=0,widget_y=0,widget_w=16,widget_h=16,event_p=None,event_r=None,event_e=None,event_m=None,event_l=None,event_w=100)
  GUIオブジェクト「canvas」を作成。画像やテキストの表示。マウスクリックやマウスポインタの移動でイベント。
  event_pはマウス押下時のイベント。event_rはマウス押上時のイベント。
  event_eはマウスカーソルが「canvas」枠内に入ったときのイベント。event_lはマウスカーソルが「canvas」枠外に出た時のイベント。
  event_mはマウスカーソルが「canvas」枠内に滞在中はevent_wミリ秒毎に発生する。マウスを動かしてなくてもevent_mは実行するので注意。

  マウス座標は「LTsv_global_canvasmotionX(),LTsv_global_canvasmotionY()」で取得。

  「Tkinter」の描画はベクトル(Flashの類)と「GTK2」の描画はラスタ(PNGなどドット絵の類)の挙動の違いに注意。
  描画高速化のため「LTsv_draw_*_shell(LTsv_GUI)」で関数オブジェクトを用意する手続き推奨。
   LTsv_draw_selcanvas,LTsv_draw_delete,LTsv_draw_queue=LTsv_draw_selcanvas_shell(LTsv_GUI),LTsv_draw_delete_shell(LTsv_GUI),LTsv_draw_queue_shell(LTsv_GUI)

  LTsv_draw_selcanvasで「canvas」を指定してdeleteとqueueで描画命令を挟むのが基本。
   「LTsv_draw_selcanvas(LTsv_canvasPAGENAME)」←描画する「canvas」を指定。
   「LTsv_draw_delete("white")」←「Tkinter」は「draw_g」タグのベクトル消去。「GTK2」は指定色で塗り潰し。
   「LTsv_draw_polygon(*draw_xy)」←描画命令。事前に「LTsv_draw_polygon=LTsv_draw_polygon_shell(LTsv_GUI)」など用意しておく。
   「LTsv_draw_queue()」←「GTK2」の場合queueもしないと描画が反映されない。

 LTsv_drawGTK_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG"); LTsv_drawTkinter_selcanvas(LTsv_canvasPAGENAME,draw_g="LTsv_draw_tkTAG"); LTsv_draw_selcanvas_shell(LTsv_GUI)
  ポリゴン等で絵を描く準備。事前に描画対象の「canvas」を指定する。
  「Tkinter」の場合描画図形に添付するタグ「LTsv_draw_tkTAG」も指定できる。

 LTsv_drawGTK_delete(draw_c="white"); LTsv_drawTkinter_delete(draw_c="white"); LTsv_draw_delete_shell(LTsv_GUI)
  「GTK2」だと長方形を上描き描画して図形を消去する。
  「Tkinter」ではタグ(初期値は「LTsv_draw_tkTAG」)が付けられた図形を消去する。
  ここで図形の消去に使った色は後述の「LTsv_drawGTK_glyph()」「LTsv_drawTkinter_glyph()」のフォントグリフの穴空けにも使う。

def LTsv_drawTkinter_deleteTAG(TkinterTAG=None); LTsv_draw_deleteTAG_shell(LTsv_GUI)
  「Tkinter」専用。特定タグの描画図形だけを削除。タグも変更される。
  タグ変更のみが欲しい場合「LTsv_global_canvasTAG()」を使う。

 LTsv_drawGTK_color(draw_c=""); LTsv_drawTkinter_color(draw_c=""); LTsv_draw_color_shell(LTsv_GUI)
  「canvas」内のポリゴン等の色指定。

 LTsv_drawGTK_bgcolor(draw_c=""); LTsv_drawTkinter_bgcolor(draw_c=""); LTsv_draw_bgcolor_shell(LTsv_GUI)
  「LTsv_drawGTK_delete()」の図形消去に使う色指定。
  「canvas」内のフォントグリフ穴空けの色も指定。

 LTsv_drawGTK_gcfcolor(); LTsv_drawGTK_gcbcolor()
  後述の「LTsv_drawGTK_glyphfill()」で呼び出す内部関数。
  「LTsv_drawGTK_color()」「LTsv_drawGTK_bgcolor()」とほぼ同じ。色指定を省略。

 LTsv_drawGTK_polygon(*draw_xy); LTsv_drawTkinter_polygon(*draw_xy); LTsv_draw_polygon_shell(LTsv_GUI)
  「canvas」にポリゴンの描画(ワイヤフレーム)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_polygonfill(*draw_xy); LTsv_drawTkinter_polygonfill(*draw_xy); LTsv_draw_polygonfill_shell(LTsv_GUI)
  「canvas」にポリゴンの描画(塗り潰し)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawTkinter_fontfill(*draw_xy)
  「LTsv_drawTkinter_color()」ではなく「LTsv_drawTkinter_delete()」で指定した色でポリゴンのを塗りつぶす。
  後述の「LTsv_drawTkinter_glyph()」のフォントグリフ穴空けに使う。
  描画関数の色指定が「gdk_gc_set_rgb_fg_color()」の様に独立してるGTK2と「create_polygon()」の描画関数の引数で色指定するTkinterとの仕様の違い調整用途。

 LTsv_drawGTK_squares(draw_wh=16,*draw_xy); LTsv_drawTkinter_squares(draw_wh=16,*draw_xy); LTsv_draw_squares_shell(LTsv_GUI)
  「canvas」にポリゴンの座標で正方形を描画(ワイヤフレーム)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_squaresfill(draw_wh=16,*draw_xy); LTsv_drawTkinter_squaresfill(draw_wh=16,*draw_xy); LTsv_draw_squaresfill_shell(LTsv_GUI)
  「canvas」にポリゴンの座標で正方形を描画(塗り潰し)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_circles(draw_wh=16,*draw_xy); LTsv_drawTkinter_circles(draw_wh=16,*draw_xy); LTsv_draw_circles_shell(LTsv_GUI)
  「canvas」にポリゴンの座標に円を描画(ワイヤフレーム)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_circlesfill(draw_wh=16,*draw_xy); LTsv_drawTkinter_circlesfill(draw_wh=16,*draw_xy); LTsv_draw_circlesfill_shell(LTsv_GUI)
  「canvas」にポリゴンの座標に円を描画(塗り潰し)。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_points(*draw_xy); LTsv_drawTkinter_points(*draw_xy); LTsv_draw_points_shell(LTsv_GUI)
  「canvas」にポリゴンの座標に点を描画。座標は(x,y,x,y…)とX座標とY座標が交互に来るタプル。

 LTsv_drawGTK_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi); LTsv_drawTkinter_arc(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi); LTsv_draw_arc_shell(LTsv_GUI)
  「canvas」に弧または扇を描画(ワイヤフレーム)。「arc」の挙動が「GTK2」と「Tkinter」で事なる。
  「GTK2」では楕円の弧(視力検査ランドルト環)、「Tkinter」では扇(パックマン)を描画。
  左上座標はdraw_x,draw_y。相対位置をdraw_w,draw_h。draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。

 LTsv_drawTkinter_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi); LTsv_drawGTK_arcfill(draw_x,draw_y,draw_w,draw_h,draw_s=-math.pi,draw_e=math.pi); LTsv_draw_arcfill_shell(LTsv_GUI)
  「canvas」に弧または扇を描画(塗り潰し)。弧の塗り潰しは扇なので「GTK2」と「Tkinter」が結果的にほぼ同じ挙動。
  左上座標はdraw_x,draw_y。相対位置をdraw_w,draw_h。draw_sが弧の開始角度。draw_eは開始位置からの相対角度。角度の単位はラジアン(2π)。

 LTsv_drawGTK_font(draw_f=""); LTsv_drawTkinter_font(draw_f=None); LTsv_draw_font_shell(LTsv_GUI)
  「canvas」のフォント指定。
  「kan5x5comic,16」のようにカンマでフォント名とフォントサイズを区切る。

 LTsv_drawGTK_text(draw_t="",draw_x=0,draw_y=0); LTsv_drawTkinter_text(draw_t="",draw_x=0,draw_y=0); LTsv_draw_text_shell(LTsv_GUI)
  「canvas」でフォントによる文字描画。
  draw_tに文字列。左上座標はdraw_x,draw_y。

 LTsv_draw_picture_load(LTsv_picturepath)
  「canvas」用の画像を読み込む。「image」GUIオブジェクトとは別腹。
  画像の読み込みに失敗した場合Noneを帰す。
  「Tkinter」では先に「LTsv_canvas_new()」で「canvas」を作って置く必要がある。

 LTsv_draw_picture_celldiv(LTsv_picturepath,picture_divw,picture_divh)
  「LTsv_draw_picture_load()」で読み込んだ(読み込んでなければ読み込む)画像を分割して「filepath[num]」の様に番号を付けることができる。
  「GTK2」のみ実装。

 LTsv_draw_picture_save(LTsv_pictureoldpath,LTsv_picturenewpath)
  「LTsv_draw_picture_load()」「LTsv_draw_picture_celdiv()」の画像を保存。png推奨。
  保存できない場合拡張子(ファイル形式)が環境で使えないかファイルパスに問題があるかのどちらか。
  「GTK2」のみ実装。

 LTsv_draw_canvas_save(LTsv_canvasPAGENAME,LTsv_picturenewpath)
  「LTsv_canvas_new()」の「canvas」を画像保存。png推奨。
  「GTK2」のみ実装。

 LTsv_drawGTK_picture(draw_t="",draw_x=0,draw_y=0); LTsv_drawTkinter_picture(draw_t="",draw_x=0,draw_y=0)
  「LTsv_draw_picture_load()」で読み込んである画像を描画。
  draw_tに読み込みした画像と同じパス。左上座標はdraw_x,draw_y。
  「LTsv_draw_picture_celldiv()」で画像を分割した場合「filepath[num]」の様に番号指定。

 LTsv_drawGTK_queue(); LTsv_drawTkinter_queue(); LTsv_draw_queue_shell(LTsv_GUI)
  「GTK2」で「canvas」の更新を「X window」に通知する。OS(厳密にはX)に描画更新を通知しないと描画が即時反映されません。
  何もしない「LTsv_drawTkinter_queue()」もあるのは構文上の都合。LTsv_drawtk_queue=LTsv_drawTkinter_queueのような抽象化用途。

 LTsv_clockwise(*draw_xy)
  ポリゴンが時計回りなら正数、反時計回りなら負数、判定できない場合0のカウントを返す。
  時計回りの判定は簡易的(角度のみ面積無視)なので８の字にねじった形状や十字手裏剣のような凹みのある形状を扱う場合注意。

 LTsv_keyboard_size(keyboard_fontsize=12)
  漢直鍵盤のサイズをフォントサイズから計算する。

 LTsv_keyboard_new(LTsv_windowPAGENAME,widget_n=None,widget_x=0,widget_y=0,event_w=50,keyboard_getkey=None,keyboard_setkey=None,widget_f="kan5x5comic,12")
  GUIオブジェクト「canvas」に漢直鍵盤の機能をオーバーライドする。複数設置は想定していない。
  鍵盤のマウス操作は「５-1b．基本操作方法」の「鍵盤のフリック操作」を参考。「kantray」「kanfont」ほぼ共通。

   keyboard_getkey                    マウスボタンの状態を漢直鍵盤に渡すコールバック関数。
   keyboard_setkey                    漢直鍵盤の文字入力を受けとるコールバック関数。

 LTsv_keyboard_find(LTsv_widgetPAGENAME,find_t="",find_min=1,find_max=65535,dic_t="",alpha_t="",NX_t="")
  漢直鍵盤に文字があるか検索する、もしくは特定の鍵盤を指定して表示する。

   find_t                             検索文字一覧。１文字目が見つからなかったら２文字目という仕様なので文字列は検索できない。
   find_min,find_max                  TkinterのBMP(基本多言語面0xffff)制限に配慮するため検索文字のコード範囲を指定する。「GTK2」の場合「kantray_max=0x2ffff」を指定できる。
   dic_t                              辞書の項目を変更する。[LTsv_kbd.py]の「LTsv_keyboard_dictype」参考。
   alpha_t                            α鍵盤を変更する。検索文字の検索結果が優先されるので注意。[LTsv_kbd.py]の「LTsv_keyboard_alphatype」参考。
   NX_t                               ひらがなカタカナ大文字小文字など鍵盤を名指しで指定する。[LTsv_kbd.py]の「LTsv_keyboard_guideKN」「LTsv_keyboard_guideKX」参考。

 LTsv_keyboard_dicinput()
  漢直鍵盤の字引入力鍵盤の更新処理。

 LTsv_icon_load(LTsv_picturepath)
  Windows用。通知タスクトレイ(Notify)に使うアイコン[*.ico]またはアイコンDLL[*.icl]を読込。「canvas」の画像とは別に管理。

 LTsv_notifyicon_new(LTsv_windowPAGENAME,notify_n=None,widget_t="",widget_u="",menu_b=None,menu_c=None)
  通知タスクトレイ(Notify)の作成。左クリックでウィンドウを表示。終了メニュー等も表示。
  Windowsでは「WinAPI」でアイコン作成まではできるが「Tkinter」からクリックイベントを拾う方法が不明なのでポップアップメニューが開けない。

   widget_t                           ツールチップ。アイコンの上にカーソルでテキスト表示。
   widget_u                           アイコンのURI(ファイルパス)。
   menu_b                             「yield ("window exit",LTsv_window_exit_cbk)」のようなイテレータ生成関数でメニューを作成して指定。
   menu_c                             右クリックで(メニューを表示せず)直接実行する関数を指定。

 LTsv_filedialog_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,widget_t="LTsv_filedialog",dialog_t=0):
  ファイルダイアログの作成。ファイル名は「dialog_r」のレスポンス先から「LTsv_widget_geturi()」で取得する。
  dialog_tが偶数の時ファイル、奇数の時フォルダ。

 debug_canvas(window_objvoid=None,window_objptr=None)
  単体風テスト専用。関数が自身を「LTsv_window_after()」で再度呼ぶ事でループさせ日時の表示をしている。

 debug_timebutton(callback_void=None,callback_ptr=None)
  単体風テスト専用。[LTsv_time.py]の日時フォーマットをテストする。

 debug_calc(callback_void=None,callback_ptr=None)
  単体風テスト専用。[LTsv_calc.py]の電卓フォーマットをテストする。

 debug_polygonpoints(callback_void=None,callback_ptr=None)
  単体風テスト専用。ポリゴンの頂点数データの確認。

 debug_activewindow(callback_void=None,callback_ptr=None)
  単体風テスト専用。アクティブウィンドウのID取得をテスト。

 debug_canvas_press(callback_void=None,callback_ptr=None)
  単体風テスト専用。「canvas」のマウスクリックをテスト。

 debug_polygonbutton(callback_void=None,callback_ptr=None)
  単体風テスト専用。ポリゴンの頂点削除。マウスの右クリックが使えない環境を考慮してポリゴン頂点削除のGUIボタンを追加している。

 debug_color_scale(window_objvoid=None,window_objptr=None)
  単体風テスト専用。「scale」で色変更。

 debug_color_combo(window_objvoid=None,window_objptr=None)
  単体風テスト専用。「GTK2」では「combobox」が使えるので色名でRGBを指定、みたいなのを想定。
  「rgb.txt」からRGBデータを抽出するルーチンはまだ作ってない。

 debug_edit_clip(window_objvoid=None,window_objptr=None)
  単体風テスト専用。クリップボード「clipboard」の動作確認。
  Wine上の「Tkinter」でクリップボードの操作が正しく機能してない様子。

 debug_checkbutton(window_objvoid=None,window_objptr=None)
  単体風テスト専用。チェックボタン「check」の動作確認。

 debug_checkbutton(window_objvoid=None,window_objptr=None)
  単体風テスト専用。ラジオボタン「radio」の動作確認。

 debug_keypress(window_objvoid=None,window_objptr=None)
  単体風テスト専用。PCキーボード入力(押下)の動作検証。「Tkinter」のみ動作確認。

 debug_keyrelease(window_objvoid=None,window_objptr=None)
  単体風テスト専用。PCキーボード入力(押上)の動作検証。「Tkinter」のみ動作確認。


１-8a．[LTsv_glyph.py]の関数一覧

 「canvas」上でフォントグリフを描画するモジュールです。漢直鍵盤関連も扱います。
 ・「LTsv_draw_font_shell()」「LTsv_draw_text_shell()」との違いはフォントを用いずにグリフを描画することです。
 ・ 「Tkinter」では表示できない「U+FFFF(BMP)」を越える3バイト以上のUTF-8文字を扱います。
 ・単体風テストとして漢直鍵盤でリバーシを操作するデモを作成。あくまでもデモなのでアルゴリズムは簡易。
 ・「活(5x5)」「漫(comic)」の使い分け未実装。
 ・ LTsv9系の関数は置き換え削除の予定。

 LTsv_glyph_kbdinit(LTsv_glyph_ltsvpath="kanglyph.tsv")
 フォントグリフの初期化です。設定ファイル「LTsv/kanglyph.tsv」に基づいて色々と各種ファイルの読み込みなど準備。

 LTsv_global_kandic(new_kandic=None)
  漢直鍵盤の単漢字辞書「LTsv/kanchar.tsv」を取得できます。

 LTsv_global_kanmap(); LTsv_global_kanmapN(); LTsv_global_kanmapX();
  漢直鍵盤の漢字配列「LTsv/kanmap.tsv」を取得できます。

 LTsv_global_kanpickle()
  フォントグリフの座標データpickleを取得できます。

 LTsv_global_irohatype(); LTsv_global_irohatypeN(); LTsv_global_irohatypeX();
 LTsv_global_alphatype(); LTsv_global_alphatypeN(); LTsv_global_alphatypeX();
 LTsv_global_dictype(); LTsv_global_choice(); LTsv_global_choiceN(); LTsv_global_choiceX();
 LTsv_global_evaltype(); 
 LTsv_global_irohaalpha(); LTsv_global_irohaalphaN(); LTsv_global_irohaalphaX();
 LTsv_global_glyphkbdH(); LTsv_global_glyphkbdW(); LTsv_global_glyphkbdF();
 LTsv_global_kbdcursorNone();
  漢直鍵盤のデータを取得。

 LTsv_glyphSVG5x10x(LTsv_glyph_path)
  フォントグリフの圧縮された座標データをSVGパスに伸張。
  「[0176]」→「M 0,1000 200,1000 200,800 0,800 z」
  「[AOBOBQAQ]」→「M 0,1000 100,1000 100,900 0,900 z」

 LTsv_glyphSVG(LTsv_glyph_path);
  フォントグリフの座標データをSVGからリストに変換。

 LTsv_glyphpath(glyphcode):
  フォントグリフの「幅」「活」「漫」「筆」のデータを単漢字辞書から抽出してメモリに記憶。

 LTsv_glyphfont_5x5(glyphcode); LTsv_glyphfont_comic(glyphcode); LTsv_glyphfont_brush(glyphcode); LTsv_glyphfont_shell(draw_g="活");
  フォントグリフの「活」「漫」「筆」のデータをメモリから抽出。

 LTsv_draw_glyphs(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)
  「canvas」にフォントグリフ(ポリゴン)の描画(ワイヤフレーム)。
  draw_tにテキスト文字列、draw_x,draw_yに表示座標、draw_fにフォントサイズ。draw_gでフォントの種類。

 LTsv_draw_glyphsfill(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_g="活",draw_LF=False,draw_HT=False)
  「canvas」にフォントグリフ(ポリゴン)の描画(塗り潰し)。「LTsv_draw_glyphs()」と挙動はほぼ同じ。
  事前に「LTsv_draw_bgcolor()」でドーナツの穴の色指定を推奨。

 LTsv_draw_glyphskbd(draw_t,draw_x=0,draw_y=0,draw_f=5,draw_g="活"):
  「LTsv_draw_glyphsfill()」を１文字分。改行処理などを省いた高速描画用。漢直鍵盤など等幅表示想定。
  「canvas」にフォントグリフ(ポリゴン)の描画(塗り潰し)。事前に「LTsv_draw_bgcolor()」でドーナツの穴の色指定を推奨。

 LTsv_draw_glyphsentry(draw_t,draw_x=0,draw_y=0,draw_f=10,draw_w=1,draw_h=1,draw_cL=0,draw_cR=0,draw_g="漫",draw_LF=False,draw_HT=False)
  「canvas」にフォントグリフ(ポリゴン)の描画。
  テキスト選択カーソルを表現するために「LTsv_draw_glyphs()」「LTsv_draw_glyphsfill()」的な描画を使い分ける予定。

 LTsv_draw_glyphclock(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")
  ほぼ「kanfont」用。1文字のフォントグリフの右回転をcolor_R、左回転をcolor_L、判別困難または不能な図形はcolor_Xで色分けする(ワイヤフレーム)。

 LTsv_draw_glyphclockfill(draw_t="",draw_x=0,draw_y=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")
  ほぼ「kanfont」用。1文字のフォントグリフの右回転をcolor_R、左回転をcolor_L、判別困難または不能な図形はcolor_Xで色分けする(塗り潰し)。

 LTsv_draw_glyphcursor(draw_t="",draw_x=0,draw_y=0,path_z=0,draw_s=0,grid_p=-1,grid_q=-1,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_R="#6E81D9",color_L="#6ED997",color_X="#D96ED3")
  ほぼ「kanfont」用。フォントグリフのポリゴンの頂点や線分に座標を表示する。
  grid_pが0以上の時対応する頂点座標を四角で塗り潰し。その他の頂点座標は塗り潰さない四角(ワイヤフレーム)。
  grid_qが0以上の時対応する線分座標を円で塗り潰し。その他の線分座標は塗り潰さない円(ワイヤフレーム)。ただしdraw_sが0の時は線分座標自体が表示されない。

def LTsv_draw_glypwide(draw_t="",draw_x=0,draw_y=0,draw_s=0,draw_f=LTsv_PSchar_ZW//2,draw_g="活",color_W="#9F6C00"):
  ほぼ「kanfont」用。フォントグリフの「幅」を表示。  draw_gでフォントの種類を一応選べるけど単漢字辞書の「幅」は共通のはず。

 LTsv_draw_glyphmouse(draw_t="",draw_x=0,draw_y=0,path_z=0,grid_x=LTsv_PSchar_ZW//2,grid_y=LTsv_PSchar_ZW//2,mouse_x=LTsv_PSchar_ZW//2,mouse_y=LTsv_PSchar_ZW//2,draw_f=LTsv_PSchar_ZW//2,draw_g="活")
  ほぼ「kanfont」用。mouse_x,mouse_yにマウス座標を入れて「LTsv_draw_glyphcursor()」で使用する「grid_p」「grid_q」の値を取得。

 LTsv_glyph_getnote(draw_t="",draw_g="活")
  フォントグリフの座標をリストで取得。draw_tにテキスト1文字分、draw_gでフォントの種類。

 LTsv_glyph_pointsrotation(glyphnote=[]):
  フォントグリフ座標のポリゴンの座標の順番を回転ソートしてリスト先頭の座標を左上に配置。

 LTsv_glyph_points2path(draw_t="",glyphnote=[],draw_g="活")
  ほぼ「kanfont」用。メモリ上の単漢字辞書のフォントグリフを更新する。
  draw_tにテキスト1文字分、glyphnoteのフォントグリフ座標リストは「LTsv_glyph_getnote()」で取得できるような内容、draw_gでフォントの種類。
  座標リストは縮できるか試みられ、圧縮できる場合は「LTsv_glyphSVG5x10x()」で伸張できる形式に、圧縮できない場合はSVGパスとして保存。

 LTsv_glyph_text2path(draw_t="",kanpath="",draw_g="俗"):
  メモリ上の単漢字辞書を更新する。

 LTsv_glyph_kbdcursor(kbd_canvas,kbd_x,kbd_y)
  漢直鍵盤のどのキーの上にマウスカーソルがあるか調べる。
  kbd_canvasでキャンバス、kbd_x,kbd_yで漢直鍵盤の表示位置。
  漢直鍵盤の上にマウスが無い場合「LTsv_global_kbdcursorNone()」を返す。

 LTsv_glyph_kbdselect(choice):
  漢直鍵盤の表示鍵盤を鍵盤名で変更する。鍵盤名の一覧は「LTsv_global_irohaalphaN()」「LTsv_global_irohaalphaX()」あたりを参考。

 LTsv_glyph_choiceNX(choice):
  漢直鍵盤の鍵盤名から鍵盤番号的な数値に変換。

 LTsv_glyph_kbdfind(find_t):
  漢直鍵盤の表示鍵盤を盤面上の文字を検索して変更する。

 LTsv_glyph_tapcallback_shell(kbd_canvas,callback)
  漢直鍵盤の文字入力を受けとる関数の指定。
  kbd_canvasでキャンバス、callbackで呼び出す関数。呼び出される関数は文字列引数を用意する。

 LTsv_glyph_mousepress(kbd_canvas,kbd_x,kbd_y); LTsv_glyph_mousemotion(kbd_canvas,kbd_x,kbd_y); LTsv_glyph_mouserelease(kbd_canvas,kbd_x,kbd_y);
  「canvas」の「event_p=*_mousepress」「event_m=*_mousemotion」「event_r=*_mouserelease」系の関数内にそれぞれ配置する事で、「canvas」の任意の位置に漢直鍵盤を出現。
  kbd_canvasでキャンバス、kbd_x,kbd_yで漢直鍵盤の表示位置。
  漢直鍵盤の上にマウスが無い場合は「LTsv_glyph_kbdcursor()」と同様に「LTsv_global_kbdcursorNone()」を返す。「debug_mousepress()」も参考。も参考。
  キャンバス描画のタイミング調整や「LTsv_draw_queue()」などのタイミングは「LTsv_kbdentry_new()」も参考。
  漢直鍵盤のマウス操作は「１-8b．漢直鍵盤の操作方法(マウス)」を参考。

 LTsv_glyph_typepress(kbd_canvas,kbd_x,kbd_y); LTsv_glyph_typerelease(kbd_canvas,kbd_x,kbd_y);
  「windows」の「event_k=*_keypress」「event_y=*_keyrelease」系の関数内にそれぞれ配置する事で、漢直鍵盤へのPCキーボードからの入力受付。

 LTsv_glyph_kbddelete(kbd_canvas,kbd_x,kbd_y)
  漢直鍵盤の消去。「Tkinter」では描画したオブジェクトは消す必要があるので注意。

 LTsv_glyph_kbddraw(kbd_canvas,kbd_x,kbd_y)
  漢直鍵盤の描画。「Tkinter」では描画したオブジェクトは消す必要があるので「LTsv_glyph_kbddelete()」と歩調を合わせる必要。
  通常は「LTsv_glyph_mousepress()」「LTsv_glyph_mousemotion()」「LTsv_glyph_mouserelease()」でも描画されるはず。

 LTsv_glyph_picklesave()
  フォントグリフの座標データpickleをセーブします。

 LTsv_editcanvas_new(LTsv_windowPAGENAME,widget_n=None,event_b=None,kbd_k=None,clip_c=None,clip_v=None,clip_o=None,widget_x=0,widget_y=0,widget_w=LTsv_glyph_kbdW,widget_h=LTsv_glyph_kbdH,event_w=50)
  漢直鍵盤に加えテキスト入力欄も一体化した「editcanvas」を設置。
  widget_w,widget_hは漢直鍵盤の「LTsv_global_glyphkbdW()」「LTsv_global_glyphkbdH()」より広くすること。
  event_bで「editcanvas」からマウスを外した時のコールバック関数。kbd_kは[Enter]押した時のコールバック関数。
  clip_c,clip_vはクリップボード処理のコールバック関数。
  clip_oはファイルダイアログのコールバック関数。
  「メモ帳」と「電卓」の２つのテキスト入力欄が同時に作成される。
  「メモ帳」とは「LTsv_widget_settext()」「LTsv_widget_gettext()」でテキスト通信。
  「電卓」とは「LTsv_widget_seturi()」「LTsv_widget_geturi()」でテキスト通信。


 LTsv_editcanvas_kbdXY(editcanvas,kbd_x=None,kbd_y=None)
  「editcanvas」で漢直鍵盤の表示位置を変更。テキスト入力欄も移動。

 LTsv_editcanvas_color(editcanvas,UF=None,UB=None,TF=None,TB=None)
  「editcanvas」で漢直鍵盤のテキスト入力欄の文字色背景色を変更。

 LTsv_editcanvas_font(editcanvas,US=None,TS=None,UG=None,TG=None)
  「editcanvas」で漢直鍵盤のテキスト入力欄のフォントサイズを変更。

 LTsv_kbdentry_evaltext(calc_value=""):
  ほぼ「kanedit」用。文字列から漢直鍵盤の検索をしたり電卓機能などを使う。
  「１-8d．「漢字逆引きと分数電卓＆数値文字参照＆日時取得＆簡易辞書(LTsv_kbdentry_evaltext())」の詳細」を参考。

 debug_mousepress(window_objvoid=None,window_objptr=None)
  単体風テスト専用。リバーシの盤面をクリックした時の動作。
  「LTsv_glyph_mousepress()」が「LTsv_global_kbdcursorNone()」を返した時だリバーシの盤面処理。

 debug_mousemotion(window_objvoid=None,window_objptr=None); debug_mouserelease(window_objvoid=None,window_objptr=None);
  単体風テスト専用。リバーシの盤面操作のクリック以外。
  漢直鍵盤の「LTsv_glyph_mousemotion()」「LTsv_glyph_mouserelease()」を呼び出すだけ。

 debug_milklid_check(xy,bw)
  単体風テスト専用。リバーシでxy升にbw石が置けるか(裏返せる石があるか)チェック。

 debug_milklid_turn(xy,bw)
  単体風テスト専用。リバーシでxy升にbw石を置いて挟んだ石を裏返す。

 debug_milkAI_BS(window_objvoid=None,window_objptr=None)
  単体風テスト専用。一手前に戻す。

 debug_milkAI_reset():
  単体風テスト専用。リバーシAIのアルゴリズム初期化(戦略変更)。

 def debug_milkAI_entry(window_objvoid=None,window_objptr=None)
  単体風テスト専用。リバーシの棋譜更新。間違った棋譜でも途中まで入力が通る。

 debug_milkAI_Auto(window_objvoid=None,window_objptr=None)
  単体風テスト専用。リバーシAIが自動で石を置く。「Auto」ボタンを押すのは手動。

 debug_milkAI_add(addentry)
  単体風テスト専用。何らかの方法で石が置かれた時の動作。試合が決着してる場合は盤面初期化。

 debug_configload()
  単体風テスト専用。「LTsv/kanglyph.tsv」から棋譜を読み込む。

 debug_configsave_exit(window_objvoid=None,window_objptr=None)
  単体風テスト専用。「LTsv/kanglyph.tsv」に棋譜を保存するだけでなく、
  漢直鍵盤のォントグリフの座標データpickleも「LTsv_glyph_picklesave()」で保存。


１-8b．漢直鍵盤の操作方法(マウス)

  ※四隅のＮＸ等は実際には縦横２倍の大きさです。

  Ｎ　ぬふあうえおやゆよわほへ　Ｘ
  　　たていすかんなにらせ沼濡　　
  　　ちとしはきくまのりれけむ　　
  ぬ　つさそひこみもねるめろﾇ 　英

   小さい文字をタップ(押上)    文字入力。「σ」鍵盤ではHJKLでカーソル移動などにもなります。
   左上(Ｎ)からフリック        NFER鍵盤(ひらがな)の選択。Ｎの下にフリックでα鍵盤の「σ」(HJKL)。
   右上(Ｘ)からフリック        XFER鍵盤(カタカナ)の選択。Ｘの下にフリックでα鍵盤の「Σ」(電卓)。
   左下(Ｎの下)からフリック    α鍵盤の選択。もしくは辞書の変更。
   右下(Ｘの下)からフリック    字引入力。単漢字辞書の項目が代入。

 α鍵盤の「σ」の特殊なキーはカーソル移動に使います。

  HJKL        「editcanvas」のカーソル移動。H←,J↓,K↑,L→
  YUBN        「メモ帳」ではカーソル斜め移動(予定)。「電卓」の場合範囲選択。Y↖,U↗,B↙,N↘
  ]          エンターキー。Enter。
  ;          バックスペース。BS。
  :          カーソルから右の文字デリート。DEL。
  A          テキスト全選択。Ctrl+A。
  C          テキストをクリップボードにコピー。Ctrl+C。
  X          テキスト切り取り(クリップボードにコピー)。Ctrl+X。
  V          クリップボードからテキスト貼り付け。Ctrl+V。
  T          タブ文字を入力。
  I          半角スペース4文字を入力。
  O         ファイルを開くダイアログ(「kantray」用途)。

 テキスト入力欄「editcanvas」の操作

  テキスト選択              カーソル移動。複数文字選択も可能
  選択文字ドラッグ          選択した文字は移動できる。テキストはクリップボードにもコピー。
  選択文字欄外までドラッグ  選択した文字は削除もできる。
  １秒入力欄を押し続ける    文字選択されてない状態で入力欄を押し続ける事でクリップボードから引用できる。


１-8c．漢直鍵盤の操作方法(PCキーボード)

 [Space]キーの左右に[NFER(無変換)]キーと[XFER(変換)]キーが存在するPCキーボードを使います。
 字引入力では[XFER(変換)]キーの右隣[KANA(カタカナひらがなローマ字)]キーも使います。

  [NFER]+[ぬ〜ろ￥]                   NFER鍵盤切替(青)。ひらがなや小文字など。[NFER]キーを押すだけでも鍵盤は切り替わる。
  [XFER]+[ヌ〜ロ｜]                   XFER鍵盤切替(緑)。カタカナや大文字など。[XFER]キーを押すだけでも鍵盤は切り替わる。
  [NFER]+[XFER]or[XFER]+[NFER]       α鍵盤の「αβγδεζηθικλμνξοπρστυφχψω」＆単漢字辞書の「名音訓送異俗熙簡繁越地顔鍵代逆非」の変更。
                                     α鍵盤＆辞書項目の表示中は[NFER]と[XFER]どちらか片方だけ押したままでも表示継続。
  [KANA]+[NFER]or[NFER]+[KANA]       「σ」鍵盤表示。HJKLカーソル移動などに使います。
  [KANA]+[XFER]or[XFER]+[KANA]       「Σ」鍵盤表示。電卓用途。
  [KANA]+[ぬ〜ろ￥ヌ〜ロ｜]           単漢字辞書による字引入力。

  空白を入力する場合はアルファベット鍵盤「｜」(半角)「｀」(全角)を表示して「0(ワ)」の位置が空白です。

  Ｎ　１２３４５６７８９０－＾　Ｘ　Ｎ　1 2 3 4 5 6 7 8 9 0 - ^ 　Ｘ
  　　ｑｗｅｒｔｙｕｉｏｐ＠［　　　　　q w e r t y u i o p @ [ 　　
  　　ａｓｄｆｇｈｊｋｌ；：］　　　　　a s d f g h j k l ; : ] 　　
  ＠　ｚｘｃｖｂｎｍ，．／＼￥　英　￥　z x c v b n m , . / \ ¥ 　英

  Ｎ　！”＃＄％＆’（）　＝～　Ｘ　Ｎ　! " # $ % & ' ( )    = ~ 　Ｘ
  　　ＱＷＥＲＴＹＵＩＯＰ｀｛　　　　　Q W E R T Y U I O P ` { 　　
  　　ＡＳＤＦＧＨＪＫＬ＋＊｝　　　　　A S D F G H J K L + * } 　　
  ｀　ＺＸＣＶＢＮＭ＜＞？＿｜　英　｜　Z X C V B N M < > ? _ | 　英

  漢字配列や字引入力など漢直の詳しい解説は「kanedit.txt」の「１-0． 「漢直」のおさらい(内容は「LTsv/LTsv.txt」と重複)。」なども参考にしてください。


１-8d．「漢字逆引きと分数電卓＆数値文字参照＆日時取得＆簡易辞書(LTsv_kbdentry_evaltext())」の詳細

 「LTsv_kbdentry_evaltext()」の引数内容がコマンドか単語か数式かで「漢字逆引き」「分数電卓」「文字参照」「簡易辞書」など分岐します。
 「kanedit」では省略して「電卓」と呼んでます。

  １文字のみ入力                     漢字逆引き。入力した文字が存在する鍵盤に切替。同時に単漢字辞書[kanchar.tsv]の項目表示、単漢字辞書に無い文字は「照」数値文字参照。
                                     「走⇔」→「英走⇔run」「名走⇔はしる」「照走⇔&#36208;」
  先頭文字列が「&#」                 数値文字参照を文字列にデコード。
                                     「&#21654;&#21937;&#40634;&#40621;」→「照&#21654;&#21937;&#40634;&#40621;⇔咖喱麺麭」
  先頭文字が「照」                   文字列を数値文字参照にエンコード。数値文字参照を文字列へのデコードも可能。
                                     「照咖喱麺麭&#21654;&#21937;&#40634;&#40621;」
  先頭文字が「〒」                   郵便番号辞書「kantzip.tsv」から住所を表示。
                                     「〒1638001⇔東京都新宿区西新宿２丁目８－１東京都庁」
  先頭文字が「平」                   カタカナをひらがな(平仮名)に変換。
                                     「平ヴァイオリン⇔ヴぁいおりん」
  先頭文字が「片」                   ひらがなをカタカナ(片仮名)に変換。
                                     「片ヴぁいおりん⇔ヴァイオリン」
  先頭文字が「半」                   全角アルファベットとカタカナをに半角に変換。
                                     「半ヴァイオリン⇔ｳﾞｧｲｵﾘﾝ」。
  先頭文字が「全」                   半角アルファベットとカタカナをに全角に変換(曖昧な指示)。初期設定では「￥」。
                                     「全ｳﾞｧｲｵﾘﾝ⇔ヴァイオリン」。
  先頭文字が「￥」                   半角アルファベットとカタカナをに全角に変換(バックスラッシュを全角円記号に)。
                                     「￥バックスラッシュ\円記号⇔バックスラッシュ￥円記号」。
  先頭文字が「＼」                   半角アルファベットとカタカナをに全角に変換(バックスラッシュを全角バックスラッシュに)。
                                     「＼バックスラッシュ\円記号⇔バックスラッシュ＼円記号」。
  先頭文字が「清」                   濁音を清音に変換(曖昧な指示)。初期設定では「Ｈ」。
                                     「清ヴァイオリン⇔ウァイオリン」。
  先頭文字が「Ｈ」                   濁音を清音に変換("ばびぶべぼ"も"ぱぴぷぺぽ"も"はひふへほ"に)。
                                     「Ｈカエルぴょこぴょこみぴょこぴょこ、ぼうずがびょうぶにえをかいた⇔カエルひょこひょこみひょこひょこ、ほうすかひょうふにえをかいた」。
  先頭文字が「Ｍ」                   濁音を清音に変換("ぱぴぷぺぽ"は"まみむめも"に)。
                                     「Ｍカエルぴょこぴょこみぴょこぴょこ、ぼうずがびょうぶにえをかいた⇔カエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた」。
  先頭文字が「濁」                   清音を濁音に変換(曖昧な指示)。初期設定では「Ｐ」。
                                     「濁ウァイオリン⇔ヴァイオリン」。
  先頭文字が「Ｂ」                   清音を濁音に変換("はひふへほ"は"ばびぶべぼ"に)。
                                     「Ｂカエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた⇔ガエルみょごみょごみみょごみょご、ぼゔずがびょゔぶにえをがいだ」。
  先頭文字が「Ｐ」                   清音を濁音に変換("まみむめも"も"ぱぴぷぺぽ"に)。
                                     「Ｐカエルみょこみょこみみょこみょこ、ほうすかひょうふにえをかいた⇔ガエルぴょごぴょごぴぴょごぴょご、ぼゔずがびょゔぶにえをがいだ」。
  先頭文字が「大」                   アルファベット(全角ギリシャ文字全角キリル文字を含む)を大文字に変換。
                                     「大αAndΩ⇔ΑANDΩ」
  先頭文字が「小」                   アルファベット(全角ギリシャ文字全角キリル文字を含む)を小文字に変換。
                                     「小ΑAndΩ⇔αandω」
  先頭文字が「今」                   日時などを取得。「平,干,年,月,日,週,曜,時,分,秒,今,版,印」の他に「日時フォーマット」で詳細な指定も可能。
                                     「今年-月-日(週曜)時:分:秒」→「今@000y-@0m-@0dm(@0wnyi@wdj)@0h:@0n:@0s⇔2016-03-01(09火)02:15:15」
                                     「今今」→「今@000y-@0m-@0dm(@0wnyi@wdj)@0h:@0n:@0s⇔2016-03-01(09火)02:15:48」。「eval_now」を返す。
                                     「今版」→「今20160716S001619⇔20160716S001619」。[LTsv_time.py]の「LTsv_time_ver()」を返す。
                                     「今枝」→「今@000y@0m@0dm@wdec@0h@0n@0s⇔20160716S001619」。「eval_branch」を返す。
                                     日時の詳しい使い方は「１-3b．日時フォーマットの概要」を参考。
  先頭文字が「⑧」                   UTF-8文字列を256進数としての8点点字(UTF-8点字)に変換。一般的な点字ではないので注意。
                                     「⑧点字に類似したもの⇔⣧⢂⢹⣥⢭⢗⣣⢁⢫⣩⢡⢞⣤⢼⢼⣣⢁⢗⣣⢁⢟⣣⢂⢂⣣⢁⢮」。
  先頭文字が「⓪」                    UTF-8文字列を256進数としての8点点字(UTF-8点字)をUTF-8の文字列に復号。
                                     「⓪⣧⢂⢹⣥⢭⢗⣣⢁⢫⣩⢡⢞⣤⢼⢼⣣⢁⢗⣣⢁⢟⣣⢂⢂⣣⢁⢮⇔点字に類似したもの⇔点字に類似したもの」。
  先頭文字が「⑯」                   10進数を16進数に変換。
                                     「⑯65535⇔0xffff」。
  先頭文字が「⑩」先頭文字列が「0x」  16進数を10進数に変換。
                                     「⑩FFFF⇔65535」「0xFFFF⇔65535」。
  先頭文字が「英」「名」「音」「訓」「送」「異」「俗」「熙」「簡」「繁」「越」「地」「顔」「鍵」「代」「逆」「非」
                                     単漢字辞書「LTsv/kanchar.tsv」から該当する文字あるいは単語等を字引。字引入力の単漢字項目も変更。先述のPCキーボード漢直操作「[KANA]」項目を参考。
  先頭文字が「難」                   漢字の難読レベル(小学校N学年・常用漢字・人名・地名・など)を設定予定。難読の定義が不明瞭なので放置中。
  先頭文字が「活」「漫」「筆」       「kant5x5comic」のグリフデータ。「kanfont」で編集可能。「活」では独自形式で圧縮される。
  先頭文字が「幅」                   単漢字辞書[kanchar.tsv]上のデータの「kan5x5comic」のフォントの幅を表示。全角(1024)の場合省略できる。半角(624)と麻雀牌(824)しか種類はないはず。
                                     「⑩FFFF⇔65535」「0xFFFF⇔65535」。
  先頭文字が「探」                   文字列から「LTsv/kanmap.tsv」に含まれる漢字の探索。漢字逆引きの一種。文字が見つかり次第鍵盤切替。「探袮穃粫𡚴岾軅垉椦蟐靹駲閠墸壥⇔𡚴」
                                     「LTsv/kanmap.tsv」に見つからない文字の場合は「LTsv/kanchar.tsv」の「異」「簡」「繁」「代」項目からも探索を試みる。「探檪⇔櫟」「探⇔東」
  先頭文字が「汎」その他数式以外      汎用辞書[kanword.tsv]から単語を取得。単語にヒットしなければ数式扱い。２文字以上の単語は「汎」を省略できるが数式と区別するため「汎」は付加される。
                                     「汎ヴァイオリン⇔提琴」「汎フカセツフカセツテン⇔不可説不可説転」
  先頭文字が「算」その他数式         数式とみなして分数計算。電卓の詳しい使い方は[LTsv.txt]の「１-4b．電卓フォーマットの概要」を参考。
  「3927/1250」といった割り算        割り算に限らず計算結果は分数表示。「3927/1250⇔3927|1250」
  「3927|1250」といった分数のみ       約分できない分数に限り少数で表示。「3927|1250⇔3.1416」


１-8e．[LTsv_glyph.tsv]のタグ解説

  [kanglyph|                         「LTsv/LTsv_glyph.py」の設定。
   dicname                           単漢字辞書を指定。初期値は「kanchar.tsv」。
   mapname                           漢直鍵盤の漢字配列を指定。初期値は「kanmap.tsv」。
   picklename                        フォントグリフの座標パイクルを指定。初期値は「kanpickle.bin」。
   irohatype                         「kanmap.tsv」の縦軸ラベル。初期値は「ぬふあうえおやゆよわほへたていすかんなにらせ゛゜ちとしはきくまのりれけむつさそひこみもねるめろ￥」(一文字置きにタブ)。
   irohatypeN                        NEFR鍵盤名。初期値は「ぬふあうえおやゆよわほへたていすかんなにらせ＠ぷちとしはきくまのりれけむつさそひこみもねるめろ￥」(一文字置きにタブ)。
   irohatypeX                        XEFR鍵盤名。初期値は「ヌフアウエオヤユヨワホヘタテイスカンナニラセ｀プチトシハキクマノリレケムツサソヒコミモネルメロ｜」(一文字置きにタブ)。
   alphatype                         α鍵盤名。初期値は「αβγδεζηθικλμνξοπρστυφχψω○△□」(一文字置きにタブ)。
   alphatypeN                        NEFR鍵盤名(α)。初期値は「αβγδεζηθικλμνξοπρστυφχψω○△□」(一文字置きにタブ)。
   alphatypeX                        XEFR鍵盤名(α)。鍵盤名。初期値は「ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ●▲■」(一文字置きにタブ)。
   dictype                           単漢字辞書「kanchar.tsv」の辞書項目名。初期値は「英名音訓送異俗熙簡繁越地顔鍵代逆非難活漫筆幅」(一文字置きにタブ)。
   glyphtype                         「kan5x5comic」のグリフ種別。初期値は「活漫筆」(一文字置きにタブ)。
   choice                            初期値は「名音訓送異俗簡繁越地逆非英顔ερτυθιοπ＠ぷασδφγηξκλ代鍵ぬζχψωβνμ熙○△□￥σ」(一文字置きにタブ)。
   choiceN                           初期値は「名音訓送異俗簡繁越地逆非英顔ερτυθιοπ＠ぷασδφγηξκλ代鍵ぬζχψωβνμ熙○△□￥σ」(一文字置きにタブ)。
   choiceX                           初期値は「名音訓送異俗簡繁越地逆非英顔ΕΡΤΥΘΙΟΠ｀プΑΣΔΦΓΗΞΚΛ代鍵ぬΖΧΨΩΒΝΜ熙●▲■￥Σ」(一文字置きにタブ)。
   evaltype                          初期値は「平片大小半全＼￥清ＨＭ濁ＢＰ今⑩⑯⑧?照探〒汎算
   eval_slash                        半角スラッシュ「/」を全角に変換(「全」だと曖昧な指示)する時、全角スラッシュ「／」と全角円記号「￥」のどっちに変換するか指定。初期値は「￥」。
   eval_dakuon                       清音を濁音に(「濁」だと曖昧な指示)する時、ハ行は"ばびぶべぼ"のみを扱う「Ｂ」か"まみむめも"から"ぱぴぷぺぽ"に変換する「Ｐ」を指定。初期値は「Ｐ」。
   eval_seion                        濁音を清音に(「清」だと曖昧な指示)する時、"ばびぶべぼ"も"ぱぴぷぺぽ"も"はひふへほ"に変換する「Ｈ」か"ぱぴぷぺぽ"は"まみむめも"に変換する「Ｍ」を指定。初期値は「Ｈ」。
   eval_now                          入力欄で「今今」と入力した時に表示する現在時刻。初期設定は「年-月-日(週曜)時:分:秒」。
   eval_branch                       入力欄で「今枝」と入力した時に表示する現在時刻。初期設定は「@000y@0m@0dm@wdec@0h@0n@0s」。
   eval_overhour                     日時フォーマットの徹夜時刻の指定。24?48のいずれか。
   eval_worddicname                  汎用辞書ファイルの指定(無くても動作)。初期設定は「../kanword.tsv」。
   eval_zipdicname                   郵便番号辞書ファイルの指定(無くても動作)。初期設定は「../kanzip.tsv」。
   kbdTAG                            kanglyphkbd
   fontcolor                         black
   bgcolor                           #DAFFF0
   kbddefsize                        PCキーボードの拡大倍率を指定できなくもないが「LTsv_kbdentry_new()」を使う場合は実質変更不可。初期設定は「1」。
   last_alpha                        α鍵盤を記録。
   last_dic                          単漢字辞書の項目を記録。
  [reversi|                         「LTsv_glyph.py」単体風テストのリバーシ設定。
   entry                             リバーシの棋譜。


２-0． 「L:Tsv」を用いるアプリケーションの作り方

 「L:Tsv」でどのようなアプリが作れるのかの想定として「LTsv10kanedit(tsvtool10)」にて「kanedit」「kanfont」「kanzip」「kanmap」などを制作中です。
 その他のアプリでも「/LTsv」フォルダの同梱と「sys.path.append("LTsv")」の一行追加で簡単に「L:Tsv」モジュールを扱えるようになる予定です。
 各アプリの概要は[README.md]を参考。


３-0． ＦＡＱ(そもそも起動しないなどの疑問はこちら)

 Ｑ．[kanfont.py]などをダブルクリックしても起動しない。
 Ａ．Linuxの場合パーミッションで実行が許可されてないのかも。もしWindowsの話でPythonをインストールしてなければ動くはずがないのでPythonをインストール。
     Wineで[python-*.msi]が動かないって話なら[wine_sh/python3install.sh]を参考。「msiexec /i python-3.4.3.msi」の様なコマンドが必要。

      Welcome to Python.org
      https://www.python.org/

 Ｑ．[kanedit.py]が未完成だ。
 Ａ．[kanedit.py]も[kanfont.py]が未完成です。
   とりあえず動く漢直が必要な場合旧式の「LTsv9kantray(tsvtool9)」の[kantray.py]を用いてください。

 Ｑ．Pythonはもう3.5系出てますよね？
 Ａ．[python-3.5.1.exe]が[wine-portable-1.7.18-1-p4.tar.gz]で動作しなかったのでどうしようも。
     「Visual C++ 2015」のランタイムをインストールすれば動くかもだけどランタイム自体をwineにインストール方法とか未確認。


３-1． 「L:Tsv」のＦＡＱ

 Ｑ．先頭データfirstとか先頭以下データrestとかもう少し説明欲しい。
 Ａ．Lispで喩えるとcarとcdrみたいなものです。Pythonで喩えるなら「first,rest=ltsv[0],ltsv[1:]」みたいなものです。

 Ｑ．GUI方面とかクラス使った方が簡潔になるんじゃないですか？
 Ａ．以前はHSP版(tsvtool6)やBaCon版(tsvtool7)を作ってたので流用です。
     逆に言うとクラスとかタプルとかが存在しない言語でも「L:Tsv」を移植しやすいということ。

 Ｑ．ボタンなどのGUIにフォント「kan5x5comic」を用いるにはどうすればいいですか。
 Ａ．「kanfont_drawGTK_glyph」「kanfont_drawTkinter_glyph」は「canvas」に描画する命令なのでGUIのボタン等に直接は使えません。
     GUIで表示する場合は付属の「kan5x5.svg」を「kan5x5comic.ttf」に変換する等してフォントのインストール。

 Ｑ．「LTsv_draw_font(LTsv_gui.py)」系と「LTsv_draw_glyphs(LTsv_glyph.py)」系の違いはなんですか。
 Ａ．「Tkinter」が「U+FFFF(BMP)」を越える3バイト以上のUTF-8文字を扱えないので独自に文字表示glyphsモジュール用意しました。
    フォントをインストールしなくても漢直が使えるようにするために「kan5x5comic」という独自のフォントも用意しました。
    「用意しました」と言いましたが一部の文字しか用意できてないので注意。

 Ｑ．「LTsv」フォルダのモジュール群は他のアプリの開発に使っていいんですか？
 Ａ．無保証覚悟自己責任と背乗りアレオレ詐欺をしなければ。あと辞書データの個々の単語の取扱い注意で。
     文末記載のGitHubリポジトリへのリンク貼っておけば変な誤解は事故らないと思います。


３-2． 漢直鍵盤のＦＡＱ

 Ｑ．なんでマウスボタンを押下(クリック)ではなく押上のタイミングで入力なんですか？
 Ａ．将来的に入力デバイスはタッチパネルに収束する恐れがあると判断しました。
     例えば拡大縮小ジェスチャーなど指を２本以上使うタッチパネルではマウスカーソルの概念自体が希薄になると思います。
     文字入力タップ操作は文字鍵盤からＮＸ等にカーソルをそらすキャンセルが可能です。

 Ｑ．なんで中途半端にVimっぽい操作方法なんですか？
 Ａ．上下左右([Up][Down][Left][Right])キーと[Space]キーと[Tab]キーが他のGUIで使用されるからです。
     「kanfont」などでスケールやラジオボタンなど十字キーでフォーカスが移動するGUIも使うので漢直鍵盤は使えるキーが限られます。

 Ｑ．目的の漢字がどこにあるかわからない。
 Ａ．漢字の配列や字引入力の詳細などは「kanedit」の[kanedit.txt]に記載してます。「kanedit」そのものはまだ制作中です。
     「LTsv」フォルダのモジュール群のみ入手した人はGitHubリポジトリから「LTsv10kanedit」を改めて入手すると参考。

 Ｑ．描画が重くてフリーズしとるで。
 Ａ．「LTsv_editcanvas_new()」に代わる新しいエディタの開発予定。
     電卓部分も漢直鍵盤同様GUI部品から描画命令に手直しの予定。

 Ｑ．漢直鍵盤を使ったソフトが起動しない。
 Ａ．ソフトの強制終了の時などに「LTsv/kanpickle.bin」が破損する場合があります。「kanmap.py」で初期化できます。
     まれに「kanmap.py」自体がフリーズする場合もありますが、とにかく「LTsv/kanpickle.bin」を削除してから「kanmap.py」を起動。


４．   作者について、例えば連絡先。

 更新情報はGitHubやブログを確認してください。

  ooblog/LTsv10kanedit(GitHub)
  https://github.com/ooblog/LTsv10kanedit

 [kantray] - 大風呂ダ敷
  http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kantray]


# Copyright (c) 2016 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
