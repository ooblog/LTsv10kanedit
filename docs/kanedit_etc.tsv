[L:Tsv|
code	UTF-8
enter	LF
tab	4
program	LTsv_doc.py
1st		LTsv_doc
LTsvver	20161128M153500
modify	20161201R195300
|L:Tsv]

[LTsv_doc|
main	<＠kanedit_etc_main>
tagseparate	*
outdir	../docs/
outlist	<＠kanedit_etc_outlist>
defdir	../LTsv/
deftag	L:<！	R:>
defindent	firstL:<？firstL>	firstR:<？firstR>	restL:<？restL>	restC:<？restC>	restR:<？restR>	restRLast:<？restRLast>
|LTsv_doc]

[<＠kanedit_etc_main>|
<？kanedit_etc_ext>
|<＠kanedit_etc_main>]

[<？kanedit_etc_ext>|
.+\.html?	<＃kanedit_etc_html>
.+\.css	<＃kanedit_etc_css>
.*	<＃kanedit_etc_txt>
|<？kanedit_etc_ext>]

[<＃kanedit_etc_css>|
@charset "utf-8";
@font-face{
  font-family: "kan5x5comic";
  src: url("https://ooblog.github.io/kan5x5comic.woff") format('woff');
}
body{
  background-color: white;
}
mark{
  background-color: white;
  border: 1px pink solid;
}
mark.applogo{
  border: 0px;
}
 mark.applogo > img{
   margin: -1rem 0rem -1rem;
   vertical-align: middle;
   border: 1px pink solid;
 }
header{
  border: 1px gray dotted;
  padding: 1rem;
}
 .yonmoji_root{
   font-family: "kan5x5comic";  font-size: 1rem;
   line-height: 1rem;
   float: left;
   margin-top: -0.5rem;
   padding-right: 0.5rem;
 }
 .yonmoji_root > a:nth-child(odd){
   text-decoration: none;
 }
 .yonmoji_sitemap{
   float: right;
 }
 yonmoji_both{
   float: both;
 }
section,aside,article{
  margin-top: 1rem;
  border: 2px black solid;
  padding: 1rem;
}
input.yonmoji_entry{
  border: solid 1px orange;
  width: 12rem;
}
input.yonmoji_entry:focus{
  border: solid 2px IndianRed;
}
 .yonmoji{
   width: 100%;  margin: 0 auto;
   text-align: center;
   padding-top: 1rem;
   padding-bottom: 0rem;
 }
 .yonmoji_logo{
   font-family: "kan5x5comic";  font-size: 5rem;
   line-height: 5rem;
   width: 10rem;
   height: 10rem;
   margin: 0 auto;
 }
 .yonmoji_word{
   font-family: "kan5x5comic";  font-size: 2rem;
   line-height: 2rem;
   float: left;
   margin: 0rem;
 }
 .sidepages{
  width: 20%; min-width: 200px;
  padding: 0rem;
  text-align: center;
  float: right;
 }
 .sidepages ul{
  margin-left: -2rem
 }
 .sidepages li{
  margin-left: 0rem;
  list-style-type: none;
  display: inline-block;
 }
 article > div{
  margin-top: 0.5rem;
  border: 1px gray solid;
  padding: 1rem;
 }
footer{
  margin-top:1rem;
  float: both;
  border: 1px gray dotted;
  text-align: center;
}
p.ooblog{
  margin-top:-1rem;
  text-align: left;
  padding: 1rem 1rem 0em;
}
dt{
  font-weight: bold;
  word-wrap: break-word; word-break: break-all;
}
dd{
  word-wrap: break-word; word-break: break-all;
}
h1{ font-size: 2.0rem; margin: 1rem 0.5rem 0.5rem; }
h2{ font-size: 1.8rem; margin: 1rem 0.5rem 0.5rem; }
h3{ font-size: 1.6rem; margin: 1rem 0.5rem 0.5rem; }
h4{ font-size: 1.4rem; margin: 1rem 0.5rem 0.5rem; }
h5{ font-size: 1.2rem; margin: 1rem 0.5rem 0.5rem; }
h6{ font-size: 1.0rem; margin: 1rem 0.5rem 0.5rem; }

/*
<？ooblog>
*/
|<＃kanedit_etc_css>]

[<＃kanedit_etc_txt>|
<？title>
version(branch):<＠L:TsvLTsvver><？@T>modify:<？modify>

目次

<＃kanedit_menus><＃kanedit_pages><？ooblog>
|<＃kanedit_etc_txt>]

[<＃kanedit_etc_html>|
<html lang="ja"><head>
 <meta charset="UTF-8" />
 <meta name="description" content="">
 <title><？title></title>
 <link rel="stylesheet" type="text/css" href="LTsv_doc.css" />
 <link rel="icon" type="image/png" href="<？favicon>" />
</head><body>

 <header><nav>
  <div class="yonmoji_root"><a href="https://ooblog.github.io/" rel="publisher" title="<？yakuyon>">約四<br /></a><a href="https://ooblog.github.io/" rel="publisher" title="<？yakuyon>">文字</a></div>
  <？breadcrumbs>
  <br class="yonmoji_both" />
 </div></header>

 <aside class="sidepages"><nav>
  <ul>
   <li><a href="index.html"><？titleimg/software-0></a></li>
   <li><a href="kanfont.html"><？titleimg/software-2></a></li>
   <li><a href="kanmap.html"><？titleimg/software-3></a></li>
   <li><a href="kanedit.html"><？titleimg/software-1></a></li>
   <li><a href="kanzip.html"><？titleimg/software-4></a></li>
   <li><a href="LTsv_doc.html"><？titleimg/software-5></a></li>
  </ul>
  <？P>
   <a href="404.html" title="404">「L:Tsv」のsitemap(404)</a>
  <？/P>
 </nav></aside>

 <section class="mainpages">
  <h1><？title></h1>
  <？P>
   version(branch):<＠L:TsvLTsvver><？@T>modify:<？modify><？BR>
  <？/P>
  <h2>目次</h2>
  <ul>
   <＃kanedit_menus>
  </ul>
 </section>

<＃kanedit_pages>

 <footer>
  <p>site generator "<？https/ooblog:LTsv_doc.py>" repository：<？https/ooblog:LTsv10repository></p>
  <p class="ooblog"><？ooblog></p>
 </footer>
</body></html>
|<＃kanedit_etc_html>]

[<＃kanedit_menus>|
^404	<？list/software-0>*<？list/software-1>*<？list/software-2>*<？list/software-3>*<？list/software-4>*<？list/software-5>
^index	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/aboutLTsv-0>*<？list/aboutLTsv-1><？list/LTsv_printf-0>*<？list/LTsv_printf-1><？list/LTsv_file-0><？list/LTsv_time-0>*<？list/LTsv_time-1><？list/address-0>
^kanedit	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
^kanfont	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
^kanmap	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
^kanzip	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
^LTsv_doc	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
.*	<？list/License-0>*<？list/License-1>*<？list/License-2><？list/address-0>
|<＃kanedit_menus>]

[<＃kanedit_pages>|
^404	
^index	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/aboutLTsv-0>*<？section/aboutLTsv-1><？section/LTsv_printf-0>*<？section/LTsv_printf-1><？section/LTsv_file-0><？section/LTsv_time-0>*<？section/LTsv_time-1><？section/address-0>
^kanedit	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
^kanfont	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
^kanmap	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
^kanzip	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
^LTsv_doc	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
.*	<？section/License-0>*<？section/License-1>*<？section/License-2><？section/address-0>
|<＃kanedit_pages>]

[<？breadcrumbs>|
^404\.html?	<span> &#62; <a href="https://ooblog.github.io/LTsv.html" title="LTsv - <？yakuyon>">LTsv</a> &#62; <mark>404</mark> <span class="yonmoji_sitemap"><a href="https://ooblog.github.io/404.html" title="404 - <？yakuyon>">「約四文字」のsitemap(404)</a></span>
.*	<span> &#62; <a href="https://ooblog.github.io/LTsv.html" title="LTsv - <？yakuyon>">LTsv</a> &#62; <mark class="applogo"><？applogo></mark></span> <span class="yonmoji_sitemap"><a href="https://ooblog.github.io/404.html" title="404 - <？yakuyon>">「約四文字」のsitemap(404)</a></span>
|<？breadcrumbs>]
[<？applogo>|
^index\.html?	<img src="<？favicon>" width="48" height="48" alt="LTsv10kanedit(tsvtool10)" title="LTsv10kanedit(tsvtool10)">
^kanedit\.html?	<img src="<？favicon>" width="48" height="48" alt="kanedit" title="kanedit">
^kanfont\.html?	<img src="<？favicon>" width="48" height="48" alt="kanfont" title="kanfont">
^kanmap\.html?	<img src="<？favicon>" width="48" height="48" alt="kanmap" title="kanmap">
^kanzip\.html?	<img src="<？favicon>" width="48" height="48" alt="kanzip" title="kanzip">
^LTsv_doc\.html?	<img src="<？favicon>" width="48" height="48" alt="kanzip" title="LTsv_doc">
|<？applogo>]

[<？favicon>|
^(index|404)\.html?	LTsv10_logo.png
^kanedit\.html?	kanedit_logo.png
^kanfont\.html?	kanfont_logo.png
^kanmap\.html?	kanmap_logo.png
^kanzip\.html?	kanzip_logo.png
^LTsv_doc\.html?	LTsv_doc_logo.png
|<？favicon>]

[<？body>|
^index\.html?	<＃kanedit_doc:index>
^404\.html?	<＃kanedit_doc:404>
^kanedit\.html?	<＃kanedit_doc:kanedit>
^kanfont\.html?	<＃kanedit_doc:kanfont>
^kanmap\.html?	<＃kanedit_doc:kanmap>
^kanzip\.html?	<＃kanedit_doc:kanzip>
^LTsv_doc\.html?	<＃kanedit_doc:LTsv_doc>
|<？body>]

[<？section/License-0>*<？section/License-1>*<？section/License-2>|
.+\.html?	<section>@E <h3 id="License-@c"><？title/License-@c></h3>@E<＃contents/License-@c>@E</section>@E
.*	@E<？title/License-@c>@E@E<＃contents/License-@c>@E
|<？section/License-0>*<？section/License-1>*<？section/License-2>]

[<＃contents/License-0>|
<？P> ※「MIT License」準拠。<？BR>
<？/P>
<？https/License:mit>

<？https/License:osdn>

<？https/License:postd>

<？P> ※口語的説明。<？BR>
   ・「<？https/License:LICENSE>」も含めソースコードの閲覧やコピーに制限を設けない事。<？BR>
   ・いかなる場合においても作者または著作権者は一切責任を負わない事。<？BR><？/P><＃contents/License-0:kandic>
|<＃contents/License-0>]

[<＃contents/License-0:kandic>|
^kanedit\.html?	 @E<？P>※「<＠kanedit_etc_outlist>」固有の問題への言及。<？BR>@E   ・<？DICchar><？DICword>などで翻訳ミスもしくは言い回しが古くなるなど日本語(英語中国語なども含む)の不具合に対しても作者または著作権者にはメンテナンス義務等はありません。<？BR><？/P>
|<＃contents/License-0:kandic>]

[<＃contents/License-1>|
<？P> ※Pythonは別途インストールされているものとします(Pythonの導入分からない人は「<？index11-0>」も参考)。<？BR>
 ダウンロードは「<？https/ooblog:LTsv10repository>」にある「Clone or download」ボタンを押すと出る「Download ZIP」メニューをクリック。<？BR>
 インストールは任意(なるだけユーザーディレクトリ内)のフォルダに「LTsv10kanedit-master.zip」を解凍するだけです。<？BR>
 「*.py」のパーミッションがOFFになってたら実行可能に変更、Wineで使う場合は「wine_sh」フォルダ内の「*.sh」のWineパスを適宜修正。<？BR>
 フォント「kan5x5comic.ttf」を用意する場合はLinuxなら「kan5x5.svg」から「FontForge」で変換するか、<？BR>
 Windowsの場合は「<？https/License:yakuyon>」からWebフォント「<？https/License:kan5x5comic.woff>」をダウンロードして「WOFFコンバーター」で変換。「<？https/License:kanfont.txt>」も参考。<？BR>
 フォント「kan5x5comic.ttf」を用意しない場合は適宜「*.tsv」のフォントに関する設定を修正。<？BR>
<？/P>
<？https/License:LTsv10kanedit>

<？https/License:ooblog.github.io>

<？https/License:woffconv>
|<＃contents/License-1>]

[<＃contents/License-2>|
<？P> Python 2.7.6(Tahrpup6.0.5)およびPython3.4.4(Wine1.7.18)で開発しています。Windows,cygwin,darwinなどでの動作は確認しておりません。<？BR>
 フォント(グリフ)「kan5x5comic」は半角と全角の幅の比率が約5:3(1024:624)なのでアスキーアートで問題になる場合があります。グリフ不足で表示できない文字などあります。<？BR>
 「LTsv/kanpickle.bin」にグリフデータが蓄積されるまでは動作が重いです。「<？https11:kanmap.py>」で解決できます。<？BR>
 グリフデータ「kan5x5.svg」をフォント「kan5x5comic.ttf」に変換する手段として「FontForge」が必要。本当は<？DICchar>から直接生成したいけど優先順位が低い。<？BR>
 人名に使える漢字の異体字を<？DICmap>から<？DICchar>に移管作業中。なので<？VRkeyboard>の<？DICmap>が大幅に変更するかも。<？BR>
 マウスボタンの取得は保留。ホイールの取得は放置。tkk方面は手を出さない予定(コンボボックスなどはGTKのみサポート)。<？BR>
 GTKのコールバックからデータを受けとる方法が不明のため、GUIイベント経由の<？PCkeyboard>取得やファイルダイアログからのキャンセル取得などが不明。<？BR>
 「<？https10:LTsv_doc.py>」で安全に再帰する方法思いつくまで置換タグの順序に厳しい手間が。
 「docs/」フォルダ内のドキュメントを「docs/kanedit_etc.tsv」ベースで描き直し中。
|<＃contents/License-2>]

[<？https/License:mit>*<？https/License:osdn>*<？https/License:postd>*<？https/License:LTsv10kanedit>*<？https/License:ooblog.github.io>*<？https/License:woffconv>|
.+\.html?	<dl><dt><？web/License-@c></dt><dd><a href="<？url/License-@c>" title="<？web/License-@c>"><？url/License-@c></a></dd></dl>
.*	   <？web/License-@c><？BR>@E   <？url/License-@c><？BR>
|<？https/License:mit>*<？https/License:osdn>*<？https/License:postd>*<？https/License:LTsv10kanedit>*<？https/License:ooblog.github.io>*<？https/License:woffconv>]
[<？url/License-0>|
.*	http://choosealicense.com/licenses/mit/
|<？url/License-0>]
[<？web/License-0>|
.*	MIT License - Choose a License
|<？web/License-0>]
[<？url/License-1>|
.*	https://ja.osdn.net/projects/opensource/wiki/licenses%2FMIT_license
|<？url/License-1>]
[<？web/License-1>|
.*	licenses/MIT_license - Open Source Group Japan Wiki - Open Source Group Japan - OSDN
|<？web/License-1>]
[<？url/License-2>|
.*	http://postd.cc/mit-license-line-by-line/
|<？url/License-2>]
[<？web/License-2>|
.*	MITライセンスを1行1行読んでいく | プログラミング | POSTD
|<？web/License-2>]
[<？url/License-3>|
.*	<？url/ooblog:LTsv10repository>
|<？url/License-3>]
[<？web/License-3>|
.*	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
|<？web/License-3>]
[<？url/License-4>|
.*	https://ooblog.github.io/%E3%81%B5%E3%81%89%E3%82%93%E3%81%A8.html
|<？url/License-4>]
[<？web/License-4>|
.*	ふぉんと - 「約四文字」(http://ooblog.github.io/)
|<？web/License-4>]
[<？url/License-5>|
.*	http://opentype.jp/woffconv.htm
|<？url/License-5>]
[<？web/License-5>|
.*	WOFFコンバータ
|<？web/License-5>]

[<？section/aboutLTsv-0>*<？section/aboutLTsv-1>|
.+\.html?	<section>@E <h3 id="aboutLTsv-@c"><？title/aboutLTsv-@c></h3>@E<＃contents/aboutLTsv-@c>@E</section>@E
.*	@E<？title/aboutLTsv-@c>@E@E<＃contents/aboutLTsv-@c>@E
|<？section/aboutLTsv-0>*<？section/aboutLTsv-1>]

[<＃contents/aboutLTsv-0>|
<？P> データ間の区切りをタブ(\t)、「label:data」の様にコロン(:)でデータにラベルを付けたのが「LTSV」です。<？BR>
 素のLTSVファイル自体は単なるログのフォーマットです。<？BR>
<？/P>
<？https01-0:ltsvorg>
<？https01-0:ltsvfaq>
<？P> 「L:Tsv」は「*.tsv」「*.ltsv」ファイルの事を差す場合もありますがLTSVパーサ類を含めた「tsvtool」も含めて「L:Tsv」と呼ぶ場合があります。<？BR>
 複数のLTSVを１つのファイルで保存できるようタグで区切ったり、日時処理や分数電卓やGTK＆Tkinterなどを加えたり、Python2,3のprint関数バージョン違いを吸収させたりと、<？BR>
 LTSVパーサに雑多な拡張を重ねていった結果、漢直エディタ環境と化したモジュール群が今の「L:Tsv」です。<？BR><？/P>
|<＃contents/aboutLTsv-0>]
[<？https01-0:ltsvorg>|
.+\.html?	<dl><dt><？title01-0:ltsvorg></dt><dd><a href="<？url01-0:ltsvorg>" title="<？title01-0:ltsvorg>"><？url01-0:ltsvorg></a></dd></dl>
.*	   <？title01-0:ltsvorg><？BR>@E   <？url01-0:ltsvorg><？BR>@E
|<？https01-0:ltsvorg>]
[<？url01-0:ltsvorg>|
.*	http://ltsv.org/
|<？url01-0:ltsvorg>]
[<？title01-0:ltsvorg>|
.*	Labeled Tab-separated Values (LTSV)
|<？title01-0:ltsvorg>]
[<？https01-0:ltsvfaq>|
.+\.html?	<dl><dt><？title01-0:ltsvfaq></dt><dd><a href="<？url01-0:ltsvfaq>" title="<？title01-0:ltsvfaq>"><？url01-0:ltsvfaq></a></dd></dl>
.*	   <？title01-0:ltsvfaq><？BR>@E   <？url01-0:ltsvfaq><？BR>@E
|<？https01-0:ltsvfaq>]
[<？url01-0:ltsvfaq>|
.*	http://d.hatena.ne.jp/naoya/20130209/1360381374
|<？url01-0:ltsvfaq>]
[<？title01-0:ltsvfaq>|
.*	LTSV FAQ - LTSV って何? どういうところが良いの?
|<？title01-0:ltsvfaq>]
|<？title$http://d.hatena.ne.jp/naoya/20130209/1360381374>]

[<＃contents/aboutLTsv-1>|
<？P>  データ間の区切りはタブ(\t)です。一般的なCSVやLTSV等と事なり、複数のタブがあっても1つのタブとみなします(文字列長0のデータを扱う場合はラベル推奨)。<？BR>
 先頭データの事をfirst、先頭以降のデータの事をrestと呼びます。例えばLispでも、car関数の代わりにfirst関数、cdr関数の代わりにrest関数が使えたはず。<？BR>
 firstは縦軸ラベルとして使う場合があります。restでは「label:data」の様なラベルとデータをコロン(:)で区切る形の軸ラベルが付けられます。簡単に言うとrestでLTSVが使えます。<？BR>
 LTSVを「[tag<？&#x7C;>」と「<？&#x7C;>tag]」の様に<？contents01-1:tagsplit><？BR>
 拡張子は「.ltsv」か「.tsv」。メモリ上など拡張子で区別できない場合でもメタタグで判定。メタタグが存在しない場合ファイル全体を１つのページとみなす。<？BR>
 first縦軸ラベル自体にコロン(:)が含まれる(「label:data」のようになってる)場合、ページ全体を１つのLTSVとみなす場合がある(「LTsv_label2dictint()」「LTsv_label2dictstr()」など)。
<？/PP>
 メタタグ「L:Tsv」のfirst縦軸ラベルの解説。<？BR>
<？/P>
<？DLDT>  [L:Tsv|<？/DTDD>                    「L:Tsv」ファイルの宣言です。マジックナンバー代わりなのでなるだけファイルの先頭に。<？/DD/DL>
<？DLDT>   code<？/DTDD>                       文字コードの宣言で「UTF-8」。Windowsだろうが半角は3バイトで保存するので注意。<？/DD/DL>
<？DLDT>   enter<？/DTDD>                      改行の宣言で「LF」。Windowsだろうが改行は1バイトで保存するので注意。<？/DD/DL>
<？DLDT>   tab<？/DTDD>                        タブインデントの宣言で半角スペース「4」。フォント「kan5x5comic」の半角と全角の幅の比率は約5:3(1024:624)なので注意。<？/DD/DL>
<？DLDT>   program<？/DTDD>                    「L:Tsv」ファイルをどの様に扱うかを表す規格名(プログラム名)を記述。例えば「LTsv_doc」では「LTsv_doc.py」。<？/DD/DL>
<？DLDT>   1st<？/DTDD>                        「L:Tsv」自体を何かのスクリプトとして実行する場合に最初に実行するページ指定を想定。例えば「LTsv_doc」では「LTsv_doc_tsv」など。<？/DD/DL>
<？DLDT>   LTsvver<？/DTDD>                    構文解析パーサのバージョン。「LTsv_file.py」の「LTsv_file_ver()」。<？/DD/DL>
<？DLDT>   modify <？/DTDD>                    「L:Tsv」ファイルの更新日時。「LTsv_time.py」の「LTsv_getdaytimestr(overhour=24,diffminute=0)」を想定。「LTsv_file.py」で「LTsv_savefile()」上書き時に更新。<？/DD/DL>
<？DLDT>  |L:Tsv]<？/DTDD>                    メタタグ「L:Tsv」を閉じます。<？contents01-1:tagsplit><？/DD/DL>
<？P>
「L:Tsv」のメタタグは「LTsv_newfile()」関数でも作成可能。「<？index03-0>」も参考。<？BR><？/P>
|<＃contents/aboutLTsv-1>]
[<？contents01-1:tagsplit>|
.*	タグで区切る事で１つのファイルに複数のCSVやLTSVやTXTといったページを格納できます。
|<？contents01-1:tagsplit>]

[<？section/LTsv_printf-0>*<？section/LTsv_printf-1>|
.+\.html?	<section>@E <h3 id="LTsv_printf-@c"><？title/LTsv_printf-@c></h3>@E<＃contents/LTsv_printf-@c>@E</section>@E
.*	@E<？title/LTsv_printf-@c>@E@E<＃contents/LTsv_printf-@c>@E
|<？section/LTsv_printf-0>*<？section/LTsv_printf-1>]

[<＃contents/LTsv_printf-0>|
<？P> 「<？https/LTsv_printf.py>」はPythonのprint関数の代わりにlibcのprintfを呼び出すモジュールです。<？BR>
 ・Wine上DOSのエラー要因だった<？CP932>などに変換させる事で範囲内の漢字が扱えるようになります。<？BR>
 ・変換できない文字は数値文字参照に変換されます。<？BR>
 ・その他数値文字参照(文字参照含む)の変換、全角半角大文字小文字ひらがなカタカナの変換などが扱えます。<？BR>
 ・単体風テストでは仮名変換「LTsv_kanare()」など関数群の挙動確認などができます。<？BR><？/P>

<！LTsv_printf.py>
|<＃contents/LTsv_printf-0>]

[LTsv_printf.py|
LTsv_libc_printf(LTsv_text,LTsv_log=None)	LTsv_textの文字列をターミナル(stdout)に表示する。LTsv_logと返り値を指定する事で変数にも出力追記できる。	LTsv_textに渡す文字列は「"{0}".format(data)」みたいに事前に「str.format()」などで加工する。	扱えない文字は数値文字参照(「咖喱」が「&#21654;&#21937;」)に変換される。	「ctypes.cdll.msvcrt(MS-DOS)」は1024バイト(文字数ではなくバイト)を超える文字列を扱えない様子。
LTsv_libc_printcat(LTsv_text)	上記LTsv_libc_printfからログ保存やL:Tsvタグエスケープ処理などを取り除いたもの。
LTsv_libc_printf_type(LTsv_text,LTsv_log=None)	Python2では「<？&lt;>type 'str'<？&gt;>」Python3だと「<？&lt;>class 'bytes'<？&gt;>」のようにprintfに渡すバイナリ文字列の変数の型を表示。	LTsv_logと返り値を指定する事で変数にも出力追記できる。
LTsv_utf2xml(LTsv_text)	LTsv_textの文字列を数値文字参照に変換。
LTsv_xml2utf(LTsv_text)	LTsv_textの文字参照(数値文字参照含む)を文字列に変換。
LTsv_kanare(LTsv_before,LTsv_recase)	全角半角大文字小文字ひらがなカタカナの変換を行います。LTsv_beforeに変換する文字列、LTsv_recaseで変換辞書指定。	変換辞書LTsv_recaseのパラメータは「<？index02-1>」を参考。
LTsv_utf2ink(LTsv_text)	UTF-8をkantrayの「UTF-8点字」に変換(バイナリの点字表記)。	点字フォントが表示できる環境にないと動作確認は困難なので注意。
LTsv_ink2utf(LTsv_text)	上記「UTF-8点字」をUTF-8に戻す。	 データ破損を補完する機能はないので注意。
LTsv_subprocess(LTsv_subprocess_input="",LTsv_subprocess_shell=False)	ターミナルにコマンドを送る。実行結果も取得できる。	「LTsv_subprocess_shell=True」でgrepなどパイプライン処理のような事もできるようになるが、インジェクション脆弱性の恐れが発生するので注意。
|LTsv_printf.py]

[<＃contents/LTsv_printf-1>|
<？DLDT>   "Hira2Kata"<？/DTDD>         ひらがなをカタカナに。<？/DD/DL>
<？DLDT>   "Kata2Hira"<？/DTDD>         カタカナをひらがなに。<？/DD/DL>
<？DLDT>   "HiraKana2SeiH"<？/DTDD>     濁音を清音に。「ぱぴぷぺぽ」と「ぱぴぷぺぽ」は「はひふへほ」に。<？/DD/DL>
<？DLDT>   "HiraKana2SeiM"<？/DTDD>     濁音を清音に。「ばびぶべぼ」は「はひふへほ」に、「ぱぴぷぺぽ」を「まみむめも」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakB"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に。<？/DD/DL>
<？DLDT>   "HiraKana2DakP"<？/DTDD>     清音を濁音に。「はひふへほ」は「ばびぶべぼ」に、「まみむめも」を「ぱぴぷぺぽ」に。<？/DD/DL>
<？DLDT>   "HiraKana2Han"<？/DTDD>      ひらがなもカタカナも半角に。<？/DD/DL>
<？DLDT>   "HiraKana2HanKaKe"<？/DTDD>  ひらがなもカタカナも「ヵヶ」も半角に。<？/DD/DL>
<？DLDT>   "Han2HiraEz"<？/DTDD>        半角をひらがなに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2KataEz"<？/DTDD>        半角をカタカナに(濁音は分離したまま)。<？/DD/DL>
<？DLDT>   "Han2Hira"<？/DTDD>          半角をひらがなに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Han2Kata"<？/DTDD>          半角をカタカナに(濁音があっても１つの文字に統合)。<？/DD/DL>
<？DLDT>   "Alpha2BIG"<？/DTDD>         半角全角にかかわらずアルファベットを大文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2SML"<？/DTDD>         半角全角にかかわらずアルファベットを小文字に(キリル文字ギリシャ文字含む)。<？/DD/DL>
<？DLDT>   "Alpha2HAN"<？/DTDD>         大文字小文字にかかわらずアルファベットを半角に(キリル文字ギリシャ文字含まない)。<？/DD/DL>
<？DLDT>   "Alpha2ZENBS"<？/DTDD>       大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「＼」へ。<？/DD/DL>
<？DLDT>   "Alpha2ZENYen"<？/DTDD>      大文字小文字にかかわらずアルファベットを全角に(キリル文字ギリシャ文字含まない)。バックスラッシュは「￥」へ。<？/DD/DL>
|<＃contents/LTsv_printf-1>]

[<？section/LTsv_file-0>|
.+\.html?	<section>@E <h3 id="LTsv_file-@c"><？title/LTsv_file-@c></h3>@E<＃contents/LTsv_file-@c>@E</section>@E
.*	@E<？title/LTsv_file-@c>@E@E<＃contents/LTsv_file-@c>@E
|<？section/LTsv_file-0>]

[<＃contents/LTsv_file-0>|
<？P> 「<？https/LTsv_file.py>」は「L;Tsv」ファイルの基本的な読み書きモジュールです。
 ・「LTsv10kanedit(tsvtool10)」の本編です。主に「L:Tsv」の読み書きです。<？BR>
 ・Python2とPython3のテキストファイル読み込み方法の違いを吸収する手段にも使えます。<？BR>
 ・modify項目で「LTsv_getdaytimestr()」を使うので「LTsv_time.py」モジュールも必要。<？BR><？/P>

<！LTsv_file.py>
|<＃contents/LTsv_file-0>]

[LTsv_file.py|
LTsv_newfile(LTsv_program,LTsv_default=None)	「L:Tsv」ファイルを変数上に作成する。	 LTsv_programには「L:Tsv」ファイルを扱うプログラムまたは規格を記述。	LTsv_defaultには「L:Tsv」ファイル自体をスクリプトとして実行する場合の1stページの指定。	メタタグについては「<？index01-1>」も参考。
LTsv_download(LTsv_url,LTsv_path,LTsv_reporthook=None)	ネット上のLTsv_urlにあるファイルをローカルのLTsv_pathに保存する。	ダウンロード中にLTsv_reporthook(count,blocksize,totalsize)をコールバックして状況報告させる事は可能(スレッド関係の扱いに注意)。
LTsv_zipload(LTsv_zip,LTsv_name,LTsv_path)	ローカル上のLTsv_zipにあるファイルをローカルのLTsv_pathに解凍する。元のzipファイルはそのまま。
LTsv_64load(LTsv_path,LTsv_codewidth=128)	ローカル上の画像ファイルなどをテキスト(base64)に変換した形で読み込む。元の画像ファイルはそのまま。
LTsv_loadfile(LTsv_path,LTsv_encoding="utf-8",LTsv_default=None)	ローカル上のLTsv_pathから「L:Tsv」ファイルを読み込む。	LTsv_encodingにテキストのコード指定。例えば<？CP932>を読み込むときは「LTsv_encoding="cp932"」が必要。	LTsv_defaultは読み込みできなかった場合の初期値を指定。
LTsv_readlinepages(LTsv_text)	LTsv_textテキスト内のタグ「[tag<？&#x7C;>」一覧を1行のLTSVとして取得する。
LTsv_getpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれた範囲のLTSVページを取得。	LTsv_default(LTsv_page)はページを取得できなかった場合の初期値を指定。
LTsv_readlinedeno(LTsv_text)	LTSVページの行数を数える。LTsv_textに改行が無くても1行とみなす。	LTsv_textの文字列長が0の場合0を返す。
LTsv_readlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	0から数えた行数でLTSVページから1行読み込む。	LTsv_default(LTsv_line)は読み込めなかった場合の初期値を指定。
LTsv_readlinefirsts(LTsv_text)	LTSVページのfirst(縦軸ラベル)一覧を1行のLTSVとして取得。
LTsv_readlinerest(LTsv_text,LTsv_first,LTsv_default=None)	LTSVページからfirst(縦軸ラベル)指定で先頭以下データrestを1行読み込む。first(縦軸ラベル)の取得にはタブ文字が必要。	LTsv_default(LTsv_rest)はrestが読み込めなかった場合の初期値を指定。
LTsv_pickdatadeno(LTsv_line)	1行のLTSVに含まれるデータ個数を取得(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_pickdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVから0から数えた項目数指定で1個読み込む(firstも0個目のデータとみなす)。	「label:data」をラベルとデータに分ける場合は「LTsv_split_label_data()」などを併用する。
LTsv_split_label_data(LTsv_labeldata,LTsv_seldata=True)	「label:data」からlabelかdataのどちらかを取得。LTsv_seldataがTrueならdata部分を、Falseならlabel部分を返す。
LTsv_pickdatas(LTsv_line,LTsv_dataL=0,LTsv_dataR=0)	1行のLTSVから0から数えた項目数指定で範囲内の複数データを読み込む(firstも0個目のデータとみなす)。いわゆるスライス操作。	LTsv_dataLとLTsv_dataRが逆(Tsv_dataRの方が小さい)の場合でも関数内で自動的に並び替える。	LTsv_dataLとLTsv_dataRが同じ場合差分が無いので読み込まない。
LTsv_pickdatafind(LTsv_line,LTsv_find)	LTsv_findが1行のLTSVの何項目にデータがあるか0から数える(firstも0個目のデータとみなす)。
LTsv_joindatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にLTsv_default(LTsv_data)を追加する。	LTsv_datanumが0以下の場合先頭firstに追加。項目数以上の場合末尾に追加。	省略もしくは文字列長0の場合は何もしない。
LTsv_setdatanum(LTsv_line,LTsv_datanum,LTsv_default=None)	1行のLTSVのLTsv_datanum項目目にデータLTsv_default(LTsv_data)を上書する。	負数の場合や項目数以上の場合は何もしない。	 LTsv_default(LTsv_data)を省略もしくは文字列長0のデータの場合は項目を削除。
LTsv_pickdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVから「label:data」形式の横軸ラベル(LTsv_label)指定で1個読み込む。	LTsv_default(LTsv_data)は読み込みできなかった場合の初期値を指定。
LTsv_pickdic(LTsv_text,LTsv_first,LTsv_label)	「LTsv_readlinerest()」と「LTsv_pickdatalabel()」をひとまとめに。<？DICchar>読込用途。	first(縦軸ラベル)で指定行、restの横軸ラベル(LTsv_label)で指定列、データ1個を読み込む。
LTsv_setdatalabel(LTsv_line,LTsv_label,LTsv_default=None)	1行のLTSVの「label:data」形式横軸ベル(LTsv_label)項指定でデータLTsv_default(LTsv_data)を上書する。	元LTSVに存在しない横軸ラベル(LTsv_label)の場合末尾に追加。	LTsv_default(LTsv_data)を省略した場合に項目はラベルごと削除。	文字列長0のデータLTsv_default(LTsv_data)であっても省略しなかった場合は横軸ラベル項目を追加もしくは上書き。	上記LTsv_joindatanumやLTsv_setdatanumと事なりLTsv_setdatalabelでは「label:」が単独で存在(文字列0の「data」が存在できる)違いがあるので注意。
LTsv_sievelabels(LTsv_rest,LTsv_labels="")	データそのままにラベルを取り替える。	文字列0の「data」(データ数よりラベル数が多い場合を想定)は項目が消えるので注意。
LTsv_sievetuplelabels(LTsv_rest,*LTsv_labels)	「LTsv_sievelabels()」とほぼ同じだが、LTsv_labelがLTSVではなくタプル。
LTsv_pushlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を追加する。	1行追加想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は何もしない。
LTsv_overlinenum(LTsv_text,LTsv_linenum,LTsv_default=None)	LTSVページに0から数えた行数指定で1行LTsv_default(LTsv_line)を上書する。	1行上書想定だけど複数行のテキスト挿入も可能。	LTsv_default(LTsv_line)を省略もしくは文字列長0のデータの場合は1行削除。
LTsv_pushlinerest(LTsv_page,LTsv_first,LTsv_default=None)	LTSVページにfirst(縦軸ラベル)指定でFirstにrest(LTsv_default)を追加する。	LTsv_page内にLTsv_firstが存在しない場合LTsv_page末尾に追加。	LTsv_rest(LTsv_default)を省略した場合に項目を削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。	文字列長0のrestデータでも縦軸ラベルfirst(縦軸ラベル)の末尾にはタブ文字が付加(「first\t\n」)。
LTsv_putpage(LTsv_text,LTsv_tag,LTsv_default=None)	タグ「[LTsv_tag|」「|LTsv_tag]」で囲まれたLTSVページとしてLTsv_default(LTsv_page)を上書き。	LTsv_text内にLTsv_tagタグが存在しない場合末尾に追加。タグ名が文字列長0の場合は何もしない。	LTsv_page(LTsv_default)を省略の場合はページ削除。文字列長0であっても省略しなかった場合は追加もしくは上書き。
LTsv_putmodify(LTsv_text)	メタタグ「L:Tsv」の「modify」の更新のみを行う。「LTsv_getdaytimestr()」を使うので[LTsv_time.py]モジュールが必要。	「LTsv_newfile()」や「LTsv_savefile()」実行時と「LTsv_putmodify()」の時間はズレる場合がある事に注意。
LTsv_savedir(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が1個フォルダを必要とする場合、1個フォルダを作成する。	「os.mkdir()」を使うので、一気に深い階層のフォルダを作ろうとするとエラーになる。	「LTsv_savefile()」「LTsv_saveplain()」の内部で使用。
LTsv_savedirs(LTsv_path)	「LTsv_savefile()」「LTsv_saveplain()」で保存予定のファイル名が複数のフォルダを必要とする場合、複数のフォルダを作成する。	「os.makedirs()」を使って一気に深い階層のフォルダを作れてしまうので取扱い注意。
LTsv_savefile(LTsv_path,LTsv_default=None)	ローカルのLTsv_pathに「L:Tsv」ファイル、LTsv_default(LTsv_text)を書き込む。ファイル保存時にメタタグ「L:Tsv」の「modify」の更新。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成。	LTsv_default(LTsv_text)を省略の場合はファイル削除(フォルダはそのまま)。
LTsv_saveplain(LTsv_path,LTsv_plain)	ローカルのLTsv_pathにテキストファイルLTsv_plainを(LTsv_text)書き込む。	「LTsv_savedir()」を内部で呼び出すのでフォルダ1個分の階層なら自動でフォルダ作成される。
LTsv_labelzip(LTsv_labels,LTsv_datas)	LTsv_labelsを横軸ラベル、LTsv_datasをデータとして、	「label/tlabel/t…」と「data/tdata/t…」を1行のLTSV「label:data/tlabel:data/t…」に束ねる。
LTsv_unziplabel(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からラベルだけを取り出して「label/tlabel/t…」に。
LTsv_unzipdata(LTsv_line)	1行のLTSV「label:data/tlabel:data/t…」からデータだけを取り出して「data/tdata/t…」に。
LTsv_unziplabelsdata(LTsv_line,LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはtsv形式。
LTsv_unziptuplelabelsdata(LTsv_line,*LTsv_labels)	1行のラベル有りLTSV「label:data/tlabel:data/t…」からラベル該当データだけ取り出して「label:data/tlabel:data/t…」に。	LTsv_labelsはPythonのタプル形式。
LTsv_tuple2tsv(LTsv_tuple)	Pythonのタプルやリストをtsvに。	forループよりjoin使った方が速い的なPythonあるある。
LTsv_tsv2list(LTsv_line,LTsv_len=None)	tsvをPythonのリストに。	左辺でunpackする場合受けとる変数の個数をLTsv_lenで指定。	LTsv_lenがデータ数より多い場合は0文字列が補完される。
LTsv_tsv2tuple(LTsv_line,LTsv_len=None)	「LTsv_tsv2list()」のタプルバージョン。
LTsv_label2dictint(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは数値化。	複数行あっても1つのLTSVとみなす。
LTsv_label2dictstr(LTsv_line)	LTSV「label:data/tlabel:data/t…」をPythonの辞書に。dataは文字列化。	複数行あっても1つのLTSVとみなす。
LTsv_dict2label(LTsv_dict)	Pythonの辞書「{"label":data,"label":data,…}」をLTSV「label:data/tlabel:data/t…」に。dataは文字列化。
LTsv_file_ver()	「LTsv_file.py」のバージョン表示(<＠L:TsvLTsvver>)。
LTsv_issue()	「/etc/issue」を開いてLinuxのディストリビューションの種類を探る。バージョンの確認方法はディストリ毎に異なる予感。
|LTsv_file.py]

[<？section/LTsv_time-0>*<？section/LTsv_time-1>|
.+\.html?	<section>@E <h3 id="LTsv_time-@c"><？title/LTsv_time-@c></h3>@E<＃contents/LTsv_time-@c>@E</section>@E
.*	@E<？title/LTsv_time-@c>@E@E<＃contents/LTsv_time-@c>@E
|<？section/LTsv_time-0>*<？section/LTsv_time-1>]

[<＃contents/LTsv_time-0>|
<？P> 「<？https/LTsv_time.py>」は日時フォーマットモジュールです。FPSも扱います。徹夜日時という概念があります。<？BR>
 ・とりあえず日時を取得する場合は「LTsv_getdaytimestr(overhour=24,diffminute=0)」で。<？BR>
 ・<？modify_style>だと困るのであればフォーマット指定。<？BR>
 ・徹夜日時とは正子(夜中の午前0時)を24時として日付を切り替えずに25時(夜中の1時)、26時(夜中の2時)…と時だけが過ぎる状態です。<？BR>
 ・ISOカレンダーの週はISO8601の1月4日を含む週(最初の木曜日を含む週)を第1週と数える方法。曜日は月曜から始まるので土日は週末。ISOカレンダーの曜は月曜が1で土曜が6、日曜が7。<？BR>
 ・単体風テストでは複数の日時フォーマットを用いて関数群の挙動確認ができます。<？BR><？/P>

<！LTsv_time.py>
|<＃contents/LTsv_time-0>]

[LTsv_time.py|
LTsv_yearleap(LTsv_toyear)	閏年ならTrue。
LTsv_yearweeks(LTsv_toyear)	一年の間に週(ISOカレンダーの週)が何回あるか、年間の週数52〜53を返す。
LTsv_monthleap(LTsv_toyear,LTsv_tomonth)	一月の間に日が何回あるか、28〜31を返す。閏年なら2月は29日。
LTsv_beat864(LTsv_tohour,LTsv_tominute,LTsv_tosecond)	(LTsv_Beat,LTsv_BeatInteger,LTsv_BeatPoint)のタプルを返す。	LTsv_Beatは1日の秒数0?86399(86400)。@Beatはその秒数を86.4で割った一日を1000分割する数。	LTsv_BeatIntegerは@Beatの整数部分。LTsv_BeatPointは@Beatの小数部分。
LTsv_intstr0x(LTsv_code)	"0xff","$80"のように16進数っぽいものは16進数で数値に、そうでないものは10進数と思ってint変換。	try節で囲む手間を省きたい場合に便利。
LTsv_settimerCounter(counter=None)	LTsv_timerCounter「@c」の値を設定する(取得のみも可能)。
LTsv_checkFPS()	LTsv_checkFPS()自身を1秒間に何回実行できるか計測。0〜999の範囲。
LTsv_setdaytimeshift()	日時フォーマット用の日時変数(LTsv_meridian_nowなど)を再計算する。	通常は「LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()」から呼び出される内部関数。
LTsv_setdaytimeoption(overhour=None,diffminute=None)	LTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定。	LTsv_putdaytimespecify(),LTsv_putdaytimenow(),LTsv_putdaytimeearlier(),LTsv_putdaytimemodify(),LTsv_putdaytimever()にも同等機能のオプションがある。
LTsv_putdaytimenow(overhour=None,diffminute=None)	現在時刻を「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimeearlier(overhour=None,diffminute=None)	最後に実行された「LTsv_putdaytimenow()」の時刻「LTsv_earlier_now」を再度「LTsv_meridian_now」に格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimespecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None,overhour=None,diffminute=None)	日時を指定して「LTsv_meridian_now」に格納。省略(Noneを代入)した項目は現在時刻などが代入。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_putdaytimemodify(LTsv_path,overhour=None,diffminute=None)	ファイルLTsv_pathの更新時刻タイムスタンプをLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。	OSやファイルシステム毎に秒や分の精度に違いがあると思う。
LTsv_putdaytimever(LTsv_verstr,overhour=None,diffminute=None)	「LTsv_time_ver()」などの<？modify_style>をLTsv_meridian_nowに格納。各種日時変数も計算。	追加オプションでLTsv_overhour(徹夜日時)とLTsv_diffminute(時差)の設定をまとめて上書きできる。
LTsv_getdaytimestr(timeformat=None,overhour=None,diffminute=None)	日付フォーマットtimeformatを各種日時変数で置換する。	timeformatのデフォルト値は「@000y@0m@0dm@wdec@0h@0n@0s」。	日付フォーマットの概要は「<？index04-1>」を参照。
LTsv_settimershift()	日時フォーマット用のタイマー変数(LTsv_lap_nowなど)を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_settimershiftoption()	LTsv_start_nowとLTsv_goal_nowの差分を再計算する。	通常は「LTsv_puttimerstartgoal()」から呼び出される内部関数。
LTsv_puttimerstartgoal(microsecond=None,millisecond=None,seconds=None,minute=None,hour=None,day=None)	タイマーのLTsv_goal_nowを数秒後(seconds)・数分後(minute)・数時間後(hour)・数日後(day)などいずれかに設定する。	例えば三分後を指定する場合「LTsv_puttimerstartgoal(minute=3)」と入力。	複数のパラメータを同時指定した場合、例えば分と秒なら秒優先というように細かい方の単位が採用される(内部ではmicrosecondで計算)。
LTsv_puttimerspecify(year=None,month=None,day=None,hour=None,minute=None,seconds=None,microsecond=None)	タイマーのLTsv_goal_nowを日時指定。省略(Noneを代入)した項目は現在時刻などが代入。
LTsv_puttimerlap()	タイマーの経過時間をLTsv_passed_TotalSecondsに、残り時間をLTsv_timeleft_TotalSecondsに設定する。各種タイマー変数も計算。
LTsv_gettimerstr(timeformat=None)	日付フォーマットtimeformatを各種タイマー変数で置換する。	timeformatのデフォルト値は「@0h@0n@0s.0Rs」。時間フォーマットの概要は「<？index04-1>」を参照。
|LTsv_time.py]

[<＃contents/LTsv_time-1>|
<？P> 0.「@」で始まるキーワードが年月日等に置換される仕組み。「@」を表示する場合は「@@」と表記。<？BR>
 1.日付フォーマット(daytime系)では、小文字が現在時刻(meridian)、大文字が徹夜日時(allnight)です。分以下・Beat・timer系に徹夜日時はありません。<？BR>
 2.時間フォーマット(timer系)では、小文字が現在時刻(lap)、大文字が曲や動画などの長さ(limit)、「-」が先頭でタイマーの残り時間(timeleft)です。<？BR>
 3.分(miNute)は「n」で代用して月(Month)との変数名衝突防止してます。ミリ秒は「L」(miLlisecond)。マイクロ秒は「R」(micRoSecond)。<？BR>
 4.「_」(アンダースコア)を先頭に入れると0が空白に。0も空白も省くと数値は可変長。<？BR>
 5.月で「JFCAMNLUSOND」表記が使えます。曜で「UMTWRFS」表記が使えます。末尾に「ec」で英語1文字。末尾「j」で日本語表記。<？BR>
 5.日時の月,週,時,分,秒で2桁以下の数値項目の場合、末尾に「z」で１,２,３,４,５,６,７,８,９,10,11,12といった1桁の時全角数値の表現が可能。<？BR>
<？/P>
<？DLDT> 年=@yzj,@yzc,@0yz,@_yz,@yz,@0yd,@_yd,@yd,@0yw,@_yw,@yw,@000yi,@___yi,@4yi,@0yi,@_yi,@2yi,@yi,@000y,@___y,@4y,@0y,@_y,@2y,@y,@Yzj,@Yzc,@0Yz,@_Yz,@Yz,@0Yd,@_Yd,@Yd,@0Yw,@_Yw,@Yw,@000Yi,@___Yi,@4Yi,@0Yi,@_Yi,@2Yi,@Yi,@000Y,@___Y,@4Y,@0Y,@_Y,@2Y,@Y<？/DTDD>
  000y,___y,4y系は4桁の年(Year)。000y,___y,4y系は2桁の年(Yearlower)。<？BR>
  yz系は干支(YearZodiac)。@yzjで鼠,牛,虎,兎,龍,蛇,馬,羊,猿,鶏,犬,猪。@yzcで子,丑,寅,卯,辰,巳,午,未,申,酉,戌,亥<？BR>
  yi系はISOカレンダーの年(YearIso)。第1週に突入した時点で年が明けるので、年末年始の間は西暦カレンダーの年とズレる場合があります。<？BR>
  ywi系は年間の週数(YearWeeksIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。<？BR>
  yd系は年間の日数(YearDays)。年間約365〜366日。閏年の時に1日増える。<？BR><？/DD/DL>

<？DLDT> 月=@0md,@_md,@md,@mec,@mes,@mel,@_mel,@meh,@_meh,@mjiz,@_mjiz,@mj,@_mj,@0m,@_m,@mz,@m,@0Md,@_Md,@Md,@Mec,@Mes,@Mel,@_Mel,@Meh,@_Meh,@Mjiz,@_Mjiz,@Mj,@_Mj,@0M,@_M,@Mz,@M<？/DTDD>
  m系は月の数値(Month)。1?12。<？BR>
  me系は月の英語表記。末尾「c」で一文字(JFCAMNLUSOND)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。<？BR>
   (January,February,marCh,April,May,juNe,juLy,aUgust,September,October,November,December)<？BR>
  mj系は神無月、mjiz系は神有月(睦月,如月,弥生,卯月,皐月,水無月,文月,葉月,長月,神有月,霜月,師走)表記の旧暦の月名。<？BR>
  md系は月間の日数(MonthDays)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。<？BR><？/DD/DL>

<？DLDT> 週=@0wnyi,@_wnyi,@wnyiz,@wnyi,@0Wnyi,@_Wnyi,@Wnyiz,@Wnyi,@0wnm,@_wnm,@wnmz,@wnm,@0Wnm,@_Wnm,@Wnmz,@Wnm<？/DTDD>
  wnyi系はISOカレンダーの週番号(WeekNumberYearIso)。年間約52〜53回。1月4日が含まれる週が第1週(第1木曜日が含まれる週)。<？BR>
  wnm系は月毎の曜番号(WeekNumberMonth)。月間約4?5回。単純に月内の日数を7で割った数。<？BR><？/DD/DL>

<？DLDT> 曜=@wdj,@wdec,@wdes,@wdel,@_wdel,@wdeh,@_wdeh,@wdi,@wd,@Wdj,@Wdec,@Wdes,@Wdel,@_Wdel,@Wdeh,@_Wdeh,@Wdi,@Wd<？/DTDD>
  wd系は曜の数値(WeekDay)。月曜が0で土曜が5、日曜が6。<？BR>
  we系は曜の英語表記。末尾「c」で一文字(MTWRFSU)、末尾「s」で三文字、末尾「l」で単語、末尾「h」で一文字の箇所大文字。<？BR>
   (Monday,Tuesday,Wednesday,thuRsday,Friday,Saturday,sUnday)<？BR>
  wj系は月火水木金土日。<？BR>
  wdi系はISOカレンダー曜日の数値(WeekDayIso)。月曜が1で土曜が6、日曜が7。<？BR><？/DD/DL>

<？DLDT> 日(日付)=@0dm,@_dm,@dmz,@dm,@0dy,@_dy,@dy,@0Dm,@_Dm,@Dmz,@Dm,@0Dy,@_Dy,@Dy<？/DTDD>
 日(時間)=@000d,@___d,@00d,@__d,@0d,@_d,@d,@-000d,@-___d,@-00d,@-__d,@-0d,@-_d,@-d,@000D,@___D,@00D,@__D,@0D,@_D,@D<？BR>
  dm系は月換算の日数(DayMonth)。31,28,31,30,31,30,31,31,30,31,30,31。閏年は31,29,31,30,31,30,31,31,30,31,30,31と2月が29日になる。<？BR>
  dy系は年換算の日数(DayYear)。年間約365〜366日。閏年の時に1日増える。<？BR>
  時間フォーマット(timer系)では日は4桁まで使えます。<？BR><？/DD/DL>

<？DLDT> 時(日付)=@apj,@apel,@apeu,@ap,@Apj,@Apel,@Apeu,@Ap,@0hap,@_hap,@hapz,@hap,@0h,@_h,@hz,@h,@0H,@_H,@Hz,@H<？/DTDD>
 時(時間)=@0dh,@_dh,@dh,@-0dh,@-_dh,@-dh,@0Dh,@_Dh,@Dh,@0h,@_h,@h,@-0h,@-_h,@-h,@0H,@_H,@H<？BR>
  h系は時の数値(Hour)。1?24。大文字の「H」を使うと徹夜日時を表示(overhour)。1〜48。<？BR>
  hap系は午前午後表記の数値(HourAP)。1〜12。<？BR>
  apj系は午前午後徹夜表記。大文字の「A」を使うと徹夜日時を表示(overhour)。36時を過ぎようが徹夜日時の時は「徹夜」と表示される。<？BR>
  ape系はam,pm,al表記。大文字の「A」を使うと徹夜日時を表示(overhour)。末尾「l」で小文字、末尾「u」で大文字。<？BR>
  ap系は午前午後を0,1で。大文字の「A」を使うと午前午後徹夜を0,1,2で。何を言ってるか分からないだろうがoverhourの設定次第では昼の12時だろうが徹夜と表示。<？BR>
  午前午後徹夜は時間フォーマット(timer系)には存在しません。<？BR><？/DD/DL>

<？DLDT> 分(日付)=@0n,@_n,@nz,@n,@0N,@_N,@Nz,@N<？/DTDD>
 分(時間)=@0n,@_n,@n,@-0n,@-_n,@-n,@0N,@_N,@N<？BR>
  n系は分(miNute)。0〜59。<？BR><？/DD/DL>

<？DLDT> 秒(日付)=@0s,@_s,@sz,@s,@0S,@_S,@Sz,@S,@0ls,@_ls,@ls,@0rs,@_rs,@rs,@0Ls,@_Ls,@Ls,@0Rs,@_Rs,@Rs<？BR>
 秒(時間)=@0s,@_s,@s,@-0s,@-_s,@-s,@0S,@_S,@S,@0ls,@_ls,@ls,@-0ls,@-_ls,@-ls,@0Ls,@_Ls,@Ls,@0rs,@_rs,@rs,@-0rs,@-_rs,@-rs,@0Rs,@_Rs,@Rs<？/DTDD>
  s系は秒(Second)。0〜59。<？BR>
  ls系はミリ秒(miLlisecond)。ミリ秒は3桁、0〜999。<？BR>
  rs系はマイクロ秒(micRoSecond)。マイクロ秒は6桁、0〜999999。<？BR><？/DD/DL>

<？DLDT> @Beat(日付)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@bt<？/DTDD>
 @Beat(時間)=@0bti,@_bti,@bti,@0btp,@_btp,@btp,@0bt,@_bt,@bt,@-0bti,@-_bti,@-bti,@-0btp,@-_btp,@-btp,@-0bt,@-_bt,@-bt,@0Bti,@_Bti,@Bti,@0Btp,@_Btp,@Btp,@0Bt,@_Bt,@Bt<？/DTDD>
  bt系はビート(Beat)の途中計算。1日の秒数0〜86399(86400)をそのまま表示。本当のビートは86.4秒。<？BR>
  bti系はビートの整数部分(BeatInteger)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。<？BR>
  btp系はビートの小数部分(BeatPoint)。0?999。ビートとして使う場合、日本だと時差の指定「diffminute=8」が必要。<？BR>
  時間フォーマット(timer系)としてビートを用いる場合時差は関係無し。<？BR><？/DD/DL>

<？DLDT> 正負符号(時間)=@+-,@_-,@--<？/DTDD>
  LTsv_lap_nowがLTsv_goal_nowを通りすぎた、いわゆるタイムオーバーの時はLTsv_lap_nowが負の数に。<？BR>
  @+-はプラスマイナス両方表示。<？BR>
  @_-はプラスの時は空白を表示。<？BR>
  @--はマイナスのみ表示。プラスの時は一文字詰める。<？BR><？/DD/DL>

<？DLDT> @c(カウンター)=@000c,@00c,@0c,@c<？/DTDD>
  「LTsv_getdaytimestr()」もしくは「LTsv_gettimerstr()」が実行される度にカウンター(LTsv_timerCounter)が加算される。<？BR>
  カウンターの値を変更は「LTsv_settimerCounter()」。<？BR><？/DD/DL>

<？DLDT> その他エスケープ文字<？/DTDD>
  @T=\t。タブ文字用。<？BR>
  @E=\n。改行文字用。<？BR>
  @Z=\0。文字列長0用。<？BR><？/DD/DL>
|<＃contents/LTsv_time-1>]

[<？section/address-0>|
.+\.html?	<section>@E <h3 id="address-@c"><？title/address-@c></h3>@E<＃contents/address-@c>@E</section>@E
.*	@E<？title/address-@c>@E<＃contents/address-@c>@E
|<？section/address-0>]

[<＃contents/address-0>|
<？P> 更新情報はGitHubやブログを確認してください。<？BR><？/P>

<address><？https12:github_ooblog></address>
<？https12:hatena_ooblog>
|<＃contents/address-0>]

[<？DICmap>|
.*	漢字配列「<？https/License:kanmap.tsv>」
|<？DICmap>]
[<？DICchar>|
.*	単漢字辞書「<？https/License:kanchar.tsv>」
|<？DICchar>]
[<？DICword>|
.*	汎用辞書「<？https/License:kanword.tsv>」
|<？DICword>]

[<？list/License-0>*<？list/License-1>*<？list/License-2>|
.+\.html?	 <li><？index/License-@c></li>@E
.*	 <？index/License-@c>@E
|<？list/License-0>*<？list/License-1>*<？list/License-2>]
[<？index/License-0>*<？index/License-1>*<？index/License-2>|
.+\.html?	<a href="#License-@c" title="<？title/License-@c>"><？title/License-@c></a>
.*	<？title/License-@c>
|<？index/License-0>*<？index/License-1>*<？index/License-2>]
[<？title/License-0>|
.*	⓪-0．ライセンス及びソフト使用の補足ガイドライン
|<？title/License-0>]
[<？title/License-1>|
.*	⓪-1．インストール(ダウンロード・アンインストール)＆セットアップ
|<？title/License-1>]
[<？title/License-2>|
.*	⓪-2．その他現在わかっている不具合や今後の課題
|<？title/License-2>]
[<？https/License:LICENSE>*<？https/License:kanmap.tsv>*<？https/License:kanchar.tsv>*<？https/License:kanword.tsv>*<？https/License:kanfont.txt>|
.+\.html?	<a href="<？url/ooblog:LTsv10repository>/blob/master/<？path/License-@c>" title="<？url/ooblog:LTsv10repository>/blob/master/<？path/License-@c>"><？path/License-@c></a>
.*	<？path/License-@c>
|<？https/License:LICENSE>*<？https/License:kanmap.tsv>*<？https/License:kanchar.tsv>*<？https/License:kanword.tsv>*<？https/License:kanfont.txt>]
[<？path/License-0>|
.*	LICENSE
|<？path/License-0>]
[<？path/License-1>|
.*	LTsv/kanmap.tsv
|<？path/License-1>]
[<？path/License-2>|
.*	LTsv/kanchar.tsv
|<？path/License-2>]
[<？path/License-3>|
.*	LTsv/kanword.tsv
|<？path/License-3>]
[<？path/License-4>|
.*	kanfont.txt
|<？path/License-4>]
[<？https/License:kan5x5comic.woff>*<？https/License:yakuyon>|
.+\.html?	<a href="<？link/License-@c>" title="<？word/License-@c>"><？word/License-@c></a>
.+\.css	<？link/License-@c>
.*	<？word/License-@c>
|<？https/License:kan5x5comic.woff>*<？https/License:yakuyon>]
[<？link/License-0>|
.*	https://ooblog.github.io/kan5x5comic.woff
|<？link/License-0>]
[<？word/License-0>|
.*	kan5x5comic.woff
|<？word/License-0>]
[<？link/License-1>|
.*	https://ooblog.github.io/
|<？link/License-1>]
[<？word/License-1>|
.*	約四文字
|<？word/License-1>]

[<？list/aboutLTsv-0>*<？list/aboutLTsv-1>|
.+\.html?	 <li><？index/aboutLTsv-@c></li>@E
.*	 <？index/aboutLTsv-@c>@E
|<？list/aboutLTsv-0>*<？list/aboutLTsv-1>]
[<？index/aboutLTsv-0>*<？index/aboutLTsv-1>*<？index/aboutLTsv-2>|
.+\.html?	<a href="#aboutLTsv-@c" title="<？title/aboutLTsv-@c>"><？title/aboutLTsv-@c></a>
.*	<？title/aboutLTsv-@c>
|<？index/aboutLTsv-0>*<？index/aboutLTsv-1>*<？index/aboutLTsv-2>]
[<？title/aboutLTsv-0>|
.*	①-0．「L:Tsv」とは(「L:Tsv」と「LTSV」の違い)
|<？title/aboutLTsv-0>]
[<？url/aboutLTsv-0>|
.*	kanfont.html
|<？url/aboutLTsv-0>]
[<？title/aboutLTsv-1>|
.*	①-1．「L:Tsv」ファイルの構造
|<？title/aboutLTsv-1>]
[<？url/aboutLTsv-1>|
.*	kanmap.html
|<？url/aboutLTsv-1>]

[<？list/LTsv_printf-0>*<？list/LTsv_printf-1>|
.+\.html?	 <li><？index/LTsv_printf-@c></li>@E
.*	 <？index/LTsv_printf-@c>@E
|<？list/LTsv_printf-0>*<？list/LTsv_printf-1>]
[<？index/LTsv_printf-0>*<？index/LTsv_printf-1>|
.+\.html?	<a href="#LTsv_printf-@c" title="<？title/LTsv_printf-@c>"><？title/LTsv_printf-@c></a>
.*	<？title/LTsv_printf-@c>
|<？index/LTsv_printf-0>*<？index/LTsv_printf-1>]
[<？title/LTsv_printf-0>|
.*	②-0．「LTsv_printf.py」の関数一覧
|<？title/LTsv_printf-0>]
[<？title/LTsv_printf-1>|
.*	②-1．ひらカナの変換「LTsv_kanare()」のLTsv_recaseの変換辞書一覧
|<？title/LTsv_printf-1>]
[<？https/LTsv_printf.py>|
.+\.html?	<a href="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_printf-@c>" title="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_printf-@c>"><？path/LTsv_printf-@c></a>
.*	<？path/LTsv_printf-@c>
|<？https/LTsv_printf.py>]
[<？path/LTsv_printf-0>|
.*	LTsv/LTsv_printf.py
|<？path/LTsv_printf-0>]

[<？list/LTsv_file-0>|
.+\.html?	 <li><？index/LTsv_file-@c></li>@E
.*	 <？index/LTsv_file-@c>@E
|<？list/LTsv_file-0>]
[<？index/LTsv_file-0>|
.+\.html?	<a href="#LTsv_file-@c" title="<？title/LTsv_file-@c>"><？title/LTsv_file-@c></a>
.*	<？title/LTsv_file-@c>
|<？index/LTsv_file-0>]
[<？title/LTsv_file-0>|
.*	③-0．「LTsv_file.py」の関数一覧
|<？title/LTsv_file-0>]
[<？https/LTsv_file.py>|
.+\.html?	<a href="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_file-@c>" title="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_file-@c>"><？path/LTsv_file-@c></a>
.*	<？path/LTsv_file-@c>
|<？https/LTsv_file.py>]
[<？path/LTsv_file-0>|
.*	LTsv/LTsv_file.py
|<？path/LTsv_file-0>]

[<？list/LTsv_time-0>*<？list/LTsv_time-1>|
.+\.html?	 <li><？index/LTsv_time-@c></li>@E
.*	 <？index/LTsv_time-@c>@E
|<？list/LTsv_time-0>*<？list/LTsv_time-1>]
[<？index/LTsv_time-0>*<？index/LTsv_time-1>|
.+\.html?	<a href="#LTsv_time-@c" title="<？title/LTsv_time-@c>"><？title/LTsv_time-@c></a>
.*	<？title/LTsv_time-@c>
|<？index/LTsv_time-0>*<？index/LTsv_time-1>]
[<？title/LTsv_time-0>|
.*	④-0．「LTsv_time.py」の関数一覧
|<？title/LTsv_time-0>]
[<？title/LTsv_time-1>|
.*	④-1．日時フォーマットの概要
|<？title/LTsv_time-1>]
[<？https/LTsv_time.py>|
.+\.html?	<a href="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_time-@c>" title="<？url/ooblog:LTsv10repository>/blob/master/<？path/LTsv_time-@c>"><？path/LTsv_time-@c></a>
.*	<？path/LTsv_time-@c>
|<？https/LTsv_time.py>]
[<？path/LTsv_time-0>|
.*	LTsv/LTsv_time.py
|<？path/LTsv_time-0>]

[<？list/address-0>|
.+\.html?	 <li><？index/address-@c></li>@E
.*	 <？index/address-@c>@E
|<？list/address-0>]
[<？index/address-0>|
.+\.html?	<a href="#address-@c" title="<？title/address-@c>"><？title/address-@c></a>
.*	<？title/address-@c>
|<？index/address-0>]
[<？title/address-0>|
^index	⑪-0．<？title/address>
^kanedit	⑫-0．<？title/address>
^kanfont	⑫-0．<？title/address>
^kanmap	⑫-0．<？title/address>
^kanzip	⑫-0．<？title/address>
^LTsv_doc	⑫-0．<？title/address>
|<？title/address-0>]
[<？title/address>|
作者について、例えば連絡先。
|<？title/address>]
[<？https12:github_ooblog>*<？https12:hatena_ooblog>|
.+\.html?	<dl><dt><？web/address-@c></dt><dd><a href="<？url/address-@c>" title="<？web/address-@c>"><？url/address-@c></a></dd></dl>
.*	   <？web/address-@c><？BR>@E   <？url/address-@c><？BR>@E
|<？https12:github_ooblog>*<？https12:hatena_ooblog>]
[<？url/address-0>|
.*	<？url/ooblog:LTsv10repository>
|<？url/address-0>]
[<？web/address-0>|
.*	ooblog/LTsv10kanedit(GitHub)
|<？web/address-0>]
[<？url/address-1>|
.*	http://d.hatena.ne.jp/ooblog/searchdiary?word=*[kanedit]
|<？url/address-1>]
[<？web/address-1>|
.*	[kanedit] - 大風呂ダ敷
|<？web/address-1>]

[<？list/software-0>*<？list/software-1>*<？list/software-2>*<？list/software-3>*<？list/software-4>*<？list/software-5>|
.+\.html?	 <li><？index/software-@c></li>@E
.*	 <？index/software-@c>@E
|<？list/software-0>*<？list/software-1>*<？list/software-2>*<？list/software-3>*<？list/software-4>*<？list/software-5>]
[<？index/software-0>*<？index/software-1>*<？index/software-2>*<？index/software-3>*<？index/software-4>*<？index/software-5>|
.+\.html?	<a href="<？url/software-@c>" title="<？title/software-@c>"><？titleimg/software-@c><？title/software-@c></a>
.*	<？title/software-@c>
|<？index/software-0>*<？index/software-1>*<？index/software-2>*<？index/software-3>*<？index/software-4>*<？index/software-5>]
[<？titleimg/software-0>|
.*	<img src="LTsv10_logo.png" width="48" height="48" alt="LTsv10kanedit(tsvtool10)" title="LTsv10kanedit(tsvtool10)">
|<？titleimg/software-0>]
[<？title/software-0>|
.*	<？title:LTsv10>
|<？title/software-0>]
[<？url/software-0>|
.*	index.html
|<？url/software-0>]
[<？titleimg/software-1>|
.*	<img src="kanedit_logo.png" width="48" height="48" alt="kanedit" title="kanedit">
|<？titleimg/software-1>]
[<？title/software-1>|
.*	<？title:kanedit>
|<？title/software-1>]
[<？url/software-1>|
.*	kanedit.html
|<？url/software-1>]
[<？titleimg/software-2>|
.*	<img src="kanfont_logo.png" width="48" height="48" alt="kanfont" title="kanfont">
|<？titleimg/software-2>]
[<？title/software-2>|
.*	<？title:kanfont>
|<？title/software-2>]
[<？url/software-2>|
.*	kanfont.html
|<？url/software-2>]
[<？titleimg/software-3>|
.*	<img src="kanmap_logo.png" width="48" height="48" alt="kanmap" title="kanmap">
|<？titleimg/software-3>]
[<？title/software-3>|
.*	<？title:kanmap>
|<？title/software-3>]
[<？url/software-3>|
.*	kanmap.html
|<？url/software-3>]
[<？titleimg/software-4>|
.*	<img src="kanzip_logo.png" width="48" height="48" alt="kanzip" title="kanzip">
|<？titleimg/software-4>]
[<？title/software-4>|
.*	<？title:kanzip>
|<？title/software-4>]
[<？url/software-4>|
.*	kanzip.html
|<？url/software-4>]
[<？titleimg/software-5>|
.*	<img src="LTsv_doc_logo.png" width="48" height="48" alt="LTsv_doc" title="LTsv_doc">
|<？titleimg/software-5>]
[<？title/software-5>|
.*	<？title:LTsv_doc>
|<？title/software-5>]
[<？url/software-5>|
.*	LTsv_doc.html
|<？url/software-5>]

[<？title>|
^(index|404)	<？title:LTsv10>
^kanedit	<？title:kanedit>
^kanfon	<？title:kanfont>
^kanmap	<？title:kanmap>
^kanzip	<？title:kanzip>
^LTsv_doc	<？title:LTsv_doc>
|<？title>]
[<？title:LTsv10>|
.*	「LTsv10kanedit(tsvtool10)」は「L:Tsv」の読み書きを中心としたモジュール群です。
|<？title:LTsv10>]
[<？title:kanedit>|
.*	「kanedit」は「LTsv10kanedit(tsvtool10)」を用いた漢直テキストエディタの予定です。
|<？title:kanedit>]
[<？title:kanfont>|
.*	「kanfont」は「LTsv10kanedit(tsvtool10)」を用いたフォントエディタ(グリフエディタ)です。単漢字辞書「kanchar.tsv」を編集します。
|<？title:kanfont>]
[<？title:kanmap>|
.*	「kanmap」は「LTsv10kanedit(tsvtool10)」を用いた「kan5x5comic(LTsv/kanchar.tsv)」グリフ進捗ビュアーです。
|<？title:kanmap>]
[<？title:kanzip>|
.*	「kanzip」は「LTsv10kanedit(tsvtool10)」を用いた郵便番号ダウンローダーです。郵便番号辞書「kanzip.tsv」に合成します。
|<？title:kanzip>]
[<？title:LTsv_doc>|
.*	「LTsv_doc」は「LTsv10kanedit(tsvtool10)」を用いたドキュメントジェネレーターです。
|<？title:LTsv_doc>]

[<？ooblog>|
.+\.html?	# <？Copyright><br />@E# <？LicenseMIT><br />@E# <？https/ooblog:LTsv10LICENSE><br />@E
.*	# <？Copyright>@E# <？LicenseMIT>@E# <？https/ooblog:LTsv10LICENSE>@E
|<？ooblog>]
[<？https/ooblog:LTsv10LICENSE>|
.+\.html?	<a href="<？url/ooblog:LTsv10LICENSE>" title="<？title/ooblog:LTsv10LICENSE>"><？url/ooblog:LTsv10LICENSE></a>
.*	<？url/ooblog:LTsv10LICENSE>
|<？https/ooblog:LTsv10LICENSE>]
[<？url/ooblog:LTsv10LICENSE>|
.*	https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
|<？url/ooblog:LTsv10LICENSE>]
[<？title/ooblog:LTsv10LICENSE>|
.*	LTsv10kanedit/LICENSE at master · ooblog/LTsv10kanedit
|<？title/ooblog:LTsv10LICENSE>]
[<？https/ooblog:LTsv10repository>|
.+\.html?	<a href="<？url/ooblog:LTsv10repository>" title="<？title/ooblog:LTsv10repository>"><？url/ooblog:LTsv10repository></a>
.*	<？url/ooblog:LTsv10repository>
|<？https/ooblog:LTsv10repository>]
[<？url/ooblog:LTsv10repository>|
.*	https://github.com/ooblog/LTsv10kanedit
|<？url/ooblog:LTsv10repository>]
[<？title/ooblog:LTsv10repository>|
.*	ooblog/LTsv10kanedit: 「L:Tsv」の読み書きを中心としたモジュール群と漢字入力「kanedit」のPythonによる実装です(準備中)。
|<？title/ooblog:LTsv10repository>]
[<？https/ooblog:LTsv_doc.py>|
.+\.html?	<a href="https://github.com/ooblog/LTsv10kanedit/blob/master/LTsv/<？url/ooblog:LTsv_doc.py>" title="<？title/ooblog:LTsv_doc.py>"><？url/ooblog:LTsv_doc.py></a>
.*	<？url/ooblog:LTsv_doc.py>
|<？https/ooblog:LTsv_doc.py>]
[<？url/ooblog:LTsv_doc.py>|
.*	LTsv_doc.py
|<？url/ooblog:LTsv_doc.py>]
[<？title/ooblog:LTsv_doc.py>|
.*	LTsv10kanedit/LTsv_doc.py at master · ooblog/LTsv10kanedit
|<？title/ooblog:LTsv_doc.py>]

[<？yakuyon>|
.*	「約四文字」(http://ooblog.github.io/)
|<？yakuyon>]
[<？Copyright>|
.*	Copyright (c) 2016 ooblog
|<？Copyright>]
[<？LicenseMIT>|
.*	License: MIT
|<？LicenseMIT>]
[<？modify>|
.*	@000y@0m@0dm@wdec@0h@0n@0s
|<？modify>]
[<？VRkeyboard>|
.*	漢直鍵盤
|<？VRkeyboard>]
[<？VRcalc>|
.*	テキスト入力欄(電卓)
|<？VRcalc>]


[<？P>|
.+\.html?	<p>@E
.*	
|<？P>]
[<？/PP>|
.+\.html?	</p><p>
.*	
|<？/PP>]
[<？/P>|
.+\.html?	@E</p>
.*	
|<？/P>]
[<？DLDT>|
.+\.html?	<dl><dt>@E
.*	
|<？DLDT>]
[<？/DTDD>|
.+\.html?	</dt>@E<dd>@E
.*	
|<？/DTDD>]
[<？/DD/DL>|
.+\.html?	@E</dd></dl>
.*	
|<？/DD/DL>]
[<？BR>|
.+\.html?	<br />
.*	
|<？BR>]

[<？firstL>|
.+\.html?	<dl><dt>
.*	 【
|<？firstL>]
[<？firstR>|
.+\.html?	</dt>
.*	】@E
|<？firstR>]
[<？restL>|
.+\.html?	<dd>@E
.*	  
|<？restL>]
[<？restC>|
.+\.html?	<br />@E
.*	@E  
|<？restC>]
[<？restR>|
.+\.html?	</dd></dl>@E
.*	@E@E
|<？restR>]
[<？restRLast>|
.+\.html?	</dd></dl>
.*	
|<？restRLast>]

[<？&lt;>|
.+\.html?	&lt;
.*	<
|<？&lt;>]
[<？&gt;>|
.+\.html?	&gt;
.*	>
|<？&gt;>]
[<？&#x7C;>|
.+\.html?	&#x7C;
.*	|
|<？&#x7C;>]
[<？@T>|
.*	@T
|<？@T>]

[<＠kanedit_etc_outlist>|
LTsv_doc.css
index.html	
404.html	
kanedit.html	kanedit
kanfont.html	kanfont
kanmap.html	kanmap
kanzip.html	kanzip
LTsv_doc.html	LTsv_doc
kanedit.txt	kanedit
kanfont.txt	kanfont
kanmap.txt	kanmap
kanzip.txt	kanzip
LTsv_doc.txt	LTsv_doc
|<＠kanedit_etc_outlist>]

# Copyright (c) 2016 ooblog
# License: MIT
# https://github.com/ooblog/LTsv10kanedit/blob/master/LICENSE
